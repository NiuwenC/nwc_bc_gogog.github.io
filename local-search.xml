<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FISCO-WeBase-群组创建与管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E7%BE%A4%E7%BB%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E7%BE%A4%E7%BB%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase-应用管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/FISCO-WeBase/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/FISCO-WeBase/</url>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>WeBASE(WeBank Blockchain Application Software Extension) 是在区块链应用和FISCO BCOS之间搭建的一套通用组件。 围绕<br>交易、合约、密钥管理、数据、数据可视化来设计各个模块，开发者可以根据业务所需，选择子系统进行部署。WeBASE屏蔽了区块链底层的复杂度，降低开发者的门槛，大幅提高区块链应用的开发效率，包括节点前置、节点管理、交易链路、数据导出、Web管理等子系统。</p><h3 id="建立区块链应用开发标准"><a href="#建立区块链应用开发标准" class="headerlink" title="建立区块链应用开发标准"></a>建立区块链应用开发标准</h3><p>WeBASE将区块链应用开发标准化，按照部署、配置、开发智能合约、开发应用层、在线运维管理五个步骤既可以完成一个区块链应用的开发。<a href="https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/quick-start.html">https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/quick-start.html</a></p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>按需部署: WeBASE抽象应用开发的诸多共性模块，形成各类服务组件，开发者根据部署所需组件<br>微服务: WeBASE采用微服务架构，基于Spring Boot框架，提供RESTful风格接口<br>零耦合: WeBASE所有子系统独立存在，均可以独立部署，独立提供服务<br>可定制: 前端页面往往带有自身的业务属性，因此WeBASE采用前后端分离的技术，便于开发者基于后端定义自己的前端页面。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>完整的部署如下，其中WeBASE-front需要和区块链节点同机部署。<br><img src="01.png"></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>从可视化，智能合约，交易，数据四个维度合计各个中间件，各模块主要功能如下</p><p><img src="02.png"></p><h3 id="各子系统介绍"><a href="#各子系统介绍" class="headerlink" title="各子系统介绍"></a>各子系统介绍</h3><h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2 安装部署"></a>2 安装部署</h2><h3 id="2-1-快速入门搭建"><a href="#2-1-快速入门搭建" class="headerlink" title="2.1 快速入门搭建"></a>2.1 快速入门搭建</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>osp-<span class="hljs-number">1257653870</span>.cos.ap-guangzhou.myqcloud.com<span class="hljs-regexp">/WeBASE/</span>releases<span class="hljs-regexp">/download/</span>v1.<span class="hljs-number">5.3</span>/webase-front.zip<br><br>unzip webase-front.zip<br>cd webase-front<br><br></code></pre></td></tr></table></figure><p>拷贝sdk证书文件（build_chain的时候生成的）</p><p>将节点所在目录nodes/${ip}/sdk下的所有文件拷贝到当前conf目录，供SDK与节点建立连接时使用（SDK会自动判断是否为国密，且是否使用国密SSL）</p><ul><li>链的sdk目录包含了ca.crt, sdk.crt, sdk.key和gm文件夹，gm文件夹包含了国密SSL所需的证书</li><li>拷贝命令可使用cp -r nodes/${ip}/sdk/* ./conf/</li><li>注，只有在建链时手动指定了-G(大写)时节点才会使用国密SSL</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">启动： <span class="hljs-keyword">bash </span>start.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>停止： <span class="hljs-keyword">bash </span>stop.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>检查： <span class="hljs-keyword">bash </span>status.<span class="hljs-keyword">sh </span><br><br></code></pre></td></tr></table></figure><p>访问: <a href="http://localhost:5002/WeBASE-Front">http://localhost:5002/WeBASE-Front</a> </p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>一键部署可以在 同机 快速搭建WeBASE管理台环境，方便用户快速体验WeBASE管理平台。</p><p>​ 一键部署会搭建：节点（FISCO-BCOS 2.0+）、管理平台（WeBASE-Web）、节点管理子系统（WeBASE-Node-Manager）、节点前置子系统（WeBASE-Front）、签名服务（WeBASE-Sign）。其中，节点的搭建是可选的，可以通过配置来选择使用已有链或者搭建新链。一键部署架构如下：<br><img src="03.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>osp-<span class="hljs-number">1257653870</span>.cos.ap-guangzhou.myqcloud.com<span class="hljs-regexp">/WeBASE/</span>releases<span class="hljs-regexp">/download/</span>v1.<span class="hljs-number">5.3</span>/webase-deploy.zip<br>unzip webase-deploy.zip<br>cd webase-deploy<br></code></pre></td></tr></table></figure><p>修改后的配置文件common.properties</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs clean">[common]<br><br># Webase Subsystem Version (v1<span class="hljs-number">.1</span><span class="hljs-number">.0</span> or above)<br>webase.web.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.mgr.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.sign.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.front.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br><br>#####################################################################<br># <span class="hljs-keyword">if</span> use [installDockerAll] to install WeBASE by docker<br># <span class="hljs-keyword">if</span> use [installAll] or [installWeBASE], ignore configuration here<br><br># <span class="hljs-number">1</span>: enable mysql <span class="hljs-keyword">in</span> docker<br># <span class="hljs-number">0</span>: mysql run <span class="hljs-keyword">in</span> host, required fill <span class="hljs-keyword">in</span> the configuration <span class="hljs-keyword">of</span> webase-node-mgr and webase-sign<br>docker.mysql=<span class="hljs-number">0</span><br><br># <span class="hljs-keyword">if</span> [docker.mysql=<span class="hljs-number">1</span>], mysql run <span class="hljs-keyword">in</span> host (only works <span class="hljs-keyword">in</span> [installDockerAll])<br># run mysql <span class="hljs-number">5.6</span> by docker<br>docker.mysql.port=<span class="hljs-number">23306</span><br># default user [root]<br>docker.mysql.password=<span class="hljs-number">123456</span><br>#####################################################################<br><br># Mysql database configuration <span class="hljs-keyword">of</span> WeBASE-Node-Manager<br>mysql.ip=<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.46</span><br>mysql.port=<span class="hljs-number">3306</span><br>mysql.user=bigdata<br>mysql.password=Bigdata@<span class="hljs-number">2019</span><br>mysql.database=webasenodemanager<br><br># Mysql database configuration <span class="hljs-keyword">of</span> WeBASE-Sign<br>sign.mysql.ip=<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.46</span><br>sign.mysql.port=<span class="hljs-number">3306</span><br>sign.mysql.user=bigdata<br>sign.mysql.password=Bigdata@<span class="hljs-number">2019</span><br>sign.mysql.database=webasesign<br># <span class="hljs-keyword">if</span> docker mysql disabled[docker.mysql=<span class="hljs-number">0</span>] above<br><br># H2 database name <span class="hljs-keyword">of</span> WeBASE-Front (docker mode ignore this)<br>front.h2.name=webasefront<br>front.org=fisco<br><br># WeBASE-Web service port <br>web.port=<span class="hljs-number">5000</span><br># enable WeBASE-Web overview pages for mobile phone(docker mode not support h5 yet)<br># (<span class="hljs-number">0</span>: disable, <span class="hljs-number">1</span>: enable)<br>web.h5.enable=<span class="hljs-number">1</span><br><br># WeBASE-Node-Manager service port<br>mgr.port=<span class="hljs-number">5001</span><br><br># WeBASE-Front service port<br>front.port=<span class="hljs-number">5002</span><br><br># WeBASE-Sign service port<br>sign.port=<span class="hljs-number">5004</span><br><br># Node listening IP<br>node.listenIp=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br># Node p2p service port<br>node.p2pPort=<span class="hljs-number">30300</span><br># Node channel service port<br>node.channelPort=<span class="hljs-number">20200</span><br># Node rpc service port<br>node.rpcPort=<span class="hljs-number">8545</span><br><br># Encrypt type (<span class="hljs-number">0</span>: standard, <span class="hljs-number">1</span>: guomi)<br>encrypt.type=<span class="hljs-number">0</span><br># ssl encrypt type (<span class="hljs-number">0</span>: standard ssl, <span class="hljs-number">1</span>: guomi ssl)<br># only guomi type support guomi ssl<br>encrypt.sslType=<span class="hljs-number">0</span><br><br># Use existing chain or not (yes/no)<br><span class="hljs-keyword">if</span>.exist.fisco=no<br><br>### <span class="hljs-keyword">if</span> build new chain, [<span class="hljs-keyword">if</span>.exist.fisco=no]<br># Configuration required when building a new chain <br># Fisco-bcos version<br>fisco.version=<span class="hljs-number">2.8</span><span class="hljs-number">.0</span><br># Number <span class="hljs-keyword">of</span> building nodes (default value: <span class="hljs-number">2</span>)<br>node.counts=nodeCounts<br><br>### <span class="hljs-keyword">if</span> using exited chain, [<span class="hljs-keyword">if</span>.exist.fisco=yes]<br># The path <span class="hljs-keyword">of</span> the existing chain, the path <span class="hljs-keyword">of</span> the start_all.sh script<br># Under the path, there should be a <span class="hljs-string">&#x27;sdk&#x27;</span> directory <span class="hljs-keyword">where</span> the SDK certificates (ca.crt, sdk.crt, node.key and gm directory(gm ssl)) are stored<br>fisco.dir=/data/app/nodes/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br># Node directory <span class="hljs-keyword">in</span> [fisco.dir] for WeBASE-Front to connect <br># example: <span class="hljs-string">&#x27;node.dir=node0&#x27;</span> would auto change to <span class="hljs-string">&#x27;/data/app/nodes/127.0.0.1/node0&#x27;</span><br># Under the path, there is a conf directory <span class="hljs-keyword">where</span> node certificates (ca.crt, node.crt and node.key) are stored<br>node.dir=node0<br><br><br><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> deploy.<span class="hljs-keyword">py</span>  installAll<br></code></pre></td></tr></table></figure><p>访问:<br>http://{deployIP}:{webPort}<br>示例：<a href="http://localhost:5000/">http://localhost:5000</a></p><p>用户名: admin  密码: Sxw123</p><h2 id="WeBASE管理平台使用手册"><a href="#WeBASE管理平台使用手册" class="headerlink" title="WeBASE管理平台使用手册"></a>WeBASE管理平台使用手册</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>主要功能</p><ul><li>区块链数据概览</li><li>节点管理</li><li>合约管理</li><li>私钥管理</li><li>应用管理</li><li>系统管理</li><li>系统监控</li><li>交易审计</li><li>订阅事件</li><li>账号管理</li><li>群组管理</li><li>移动端管理台</li><li>数据监控大屏</li></ul><p><img src="4.png"></p><p>CNS查询：CNS（Contract Name Service）是通过提供链上合约名称与合约地址映射关系的记录及相应的查询功能，方便调用者通过记忆简单的合约名来实现对链上合约的调用。详情可查看FISCO-BCOS文档的 CNS方案</p><h4 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h4><p>系统管理目前支持权限管理、系统配置管理、证书管理的功能</p><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>基于FISCO BCOS 2.5.0 及以上版本的基于角色的权限管理: 支持链委员会管理和运维管理员管理</p><ul><li>链委员会管理: 链委员会的修改操作均需要通过多个委员会投票完成，链委员会拥有投票权，可以增删节点，修改链配置，添加撤销运维，冻结节约合约，对用户表的写权限控制；<ul><li>修改委员会成员(新增、撤销委员)、修改委员会投票阈值、修改委员会投票权重等操作均通过投票进行修改。</li><li>投票阈值为投票生效的阈值，有效投票权重数/委员总权重数&gt;生效阈值投票才能生效，阈值为开区间，即：投票权重比例必须大于阈值（不包含等于）；</li><li>每次投票操作，如果是委员投票，则记录操作内容和投票委员，不重复计票；</li><li>票设置过期时间，根据块高，blockLimit的10倍(即10000)，固定不可改；</li><li>用户不能同时成为链委员和运维管理员；</li></ul></li></ul><h4 id="运维管理"><a href="#运维管理" class="headerlink" title="运维管理:"></a>运维管理:</h4><p>维由链委员直接赋予（无需通过投票赋予），运维可以部署合约、创建表、管理合约版本、冻结解冻本账号部署的合约；</p><p>注：链委员会为空时，不作链委员会权限限制，所有用户拥有委员权限，可以自由给自身或其他用户添加链委员权限；设置了第一个链委员后，非链委员用户无权限；请妥善保管链委员的私钥！<br>运维管理员为空时，所有用户拥有运维权限；同理，设置了第一个运维管理员后，非运维用户无权限；</p><p>FISCO-BCOS基于角色的权限管理机制详情可以参考文档使用手册-基于角色的权限控制，具体的设计原理可以参考文档 系统设计-基于角色的权限控制</p><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html#id2">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html#id2</a></p><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html</a></p><h4 id="证书说明："><a href="#证书说明：" class="headerlink" title="证书说明："></a>证书说明：</h4><p>FISCO-BCOS证书说明可以参考FISCO-BCOS使用手册的证书说明<br><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/certificates.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/certificates.html</a></p><h4 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h4><p>应用管理是WeBASE管理台提供的一种第三方应用接入功能。WeBASE作为底层运维平台，已经有了底层运维基础能力。各个应用可以利用这些基础能力来开发自己的运维管理台。这些可以利用的基础能力主要包括四个方面：1、链信息和链运维（权限，配置等）；2、合约；3、链的私钥账号；4、管理账号(登陆状态)</p><p><img src="5.png"></p><ol><li>各应用的进程管理还是自我管理，避免WeBASE过于笨重</li><li>WeBASE提供的是规范，方便其他应用参考打通应用与WeBASE的联系</li><li>如果有扩展，WeBASE也方便提供API来实现</li><li>不破坏各应用自身的完整性</li></ol><p><img src="6.png"></p><p><a href="https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html">https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html</a><br>WeIdentity目前主要包含两大模块：WeIdentity DID以及WeIdentity Credential。 WeIdentity DID模块在FISCO-BCOS区块链底层平台上实现了一套符合W3C DID规范的分布式多中心的身份标识协议，使实体（人或物）的现实身份实现了链上的身份标识；WeIdentity Credential提供了一整套基于W3C VC规范的解决方案，旨在对这一类数据进行标准化、电子化，生成可验证、可交换的「凭证」（Credential），支持对凭证的属性进行选择性披露，及生成链上存证（Evidence）。</p><p><a href="https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html">https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html</a></p><h4 id="交易审计"><a href="#交易审计" class="headerlink" title="交易审计"></a>交易审计</h4><p>联盟链中各个机构按照联盟委员会制定的规章在链上共享和流转数据。这些规章往往是字面的，大家是否遵守缺乏监管和审计。因此为了规范大家的使用方式，避免链的计算资源和存储资源被某些机构滥用，急需一套服务来辅助监管和审计链上的行为。交易审计就是结合上面的区块链数据，私钥管理和合约管理三者的数据，以区块链数据为原材料，以私钥管理和合约管理为依据做的一个综合性的数据分析功能。 交易审计提供可视化的去中心合约部署和交易监控、审计功能，方便识别链资源被滥用的情况，为联盟链治理提供依据。</p><p>交易审计的主要目标:</p><ul><li>用户交易总量数量统计： 监控链上各个外部交易账号的每日交易量</li><li>用户子类交易数量共计: 监控链上各个外部交易账号的每种类型的每日交易量</li><li>异常交易用户监控: 监控链上出现的异常交易用户(没有在区块链中间件平台登记的交易用户)</li><li>异常合约部署监控: 监控链上合约的部署情况，非白名单合约(没有在区块链中间件平台登记的合约)记录。</li></ul><h4 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h4><p>订阅事件管理: 可以查看前置中已订阅的链上事件通知，包括出块事件列表和合约Event事件列表。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WeBASE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-8-案例</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/FISCO-8-%E6%A1%88%E4%BE%8B/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/FISCO-8-%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="案例1-郑州公积金区块链日志平台"><a href="#案例1-郑州公积金区块链日志平台" class="headerlink" title="案例1 郑州公积金区块链日志平台"></a>案例1 郑州公积金区块链日志平台</h2><p><img src="%E9%83%91%E5%B7%9E%E5%85%AC%E7%A7%AF%E9%87%91.png" alt="郑州公积金"></p><p>郑州公积金区块链日志平台</p><ul><li>公积金接口调用日志上链</li><li>各银行调用日志同步共享到其自身节点，数据隔离存储，保护数据隐私</li><li>各银行通过自身节点查询日志，无需通过公积金中心，减少公积金中心系统压力，提高银行获取调用接口日志效率</li></ul>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B-2-区块链应用-高级应用开发</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Go语言实现P2P网络"><a href="#1-Go语言实现P2P网络" class="headerlink" title="1 Go语言实现P2P网络"></a>1 Go语言实现P2P网络</h2><p><img src="01.png" alt="p2p"><br>A和B分别是处于两个局域网的主机，二者进行公网访问时都是通过路由器的NAT技术映射了一个公网地址，对于A和B来说，A和B默认情况下并不知道对方的公网地址。因此想要通信时，必须借助一个第三方服务器S(公网地址是公开的)。 当A和B分别请求与服务器s进行连接时，S同时获得了A和B映射后的公网地址，此时S再将A和B的公网地址分别传递给双方，A和B就知道彼此的地址了。</p><p>A和B可以直接通信了，但是由于路由器的安全策略，当有一个默认的地址想要发信息给内部主机时，路由器通常都是拒绝的，也就是说如果该地址没有在路由器内部登记注册，路由器会认为该地址存在风险，直接将网络包丢弃。<br>那么即便A和B知道对方公网地址，也还是无法通信吗？</p><p>不是的，，因为A和B主动发出消息时，会在路由器内部记录对应的公网地址，正因为如此，A和B想要建立P2P通信时，需要分别向对方发送一次请求，才可以建立P2P连接。</p><p><a href="https://www.zhihu.com/question/39382183">https://www.zhihu.com/question/39382183</a><br>使用UDP封装的最大好处是，可以使用不同的UDP端口来区分不同的用户隧道，那么一个NAT设备理论上可以支持65K个用户隧道连接。</p><pre><code>1、损耗问题。UDP比TCP损耗小，不但是网速损耗，还有控制损耗（即额外一次三次握手，两次窗口控制等）。2、网络设备支持度。虽然新的nat设备一般都支持“tcp同时打开”方式建立连接，但是网络上很多旧的网络设备（个人测试时，同样两个终端，还有随机失败问题！）；UDP由于是无连接协议，对打洞有天生优势，几乎所有nat设备都支持。3、关于数据完整性问题，上层的tcp协议会自己处理的。</code></pre><p>代码</p><ol><li>p2p.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//1 服务器启动侦听</span><br>listener, _ := net.ListenUDP(<span class="hljs-string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class="hljs-number">9527</span>&#125;)<br><span class="hljs-keyword">defer</span> listener.Close()<br>fmt.Println(<span class="hljs-string">&quot;begin server at &quot;</span>, listener.LocalAddr().String())<br><br><span class="hljs-comment">//定义切片存储 A和B的地址</span><br>peers := <span class="hljs-built_in">make</span>([]*net.UDPAddr, <span class="hljs-number">2</span>)<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br><br><span class="hljs-comment">//2 从2个UDP消息中分别获取地址A和B</span><br>n, addr, _ := listener.ReadFromUDP(buf)<br>fmt.Printf(<span class="hljs-string">&quot;read from &lt;%s&gt;: %s\n&quot;</span>, addr.String(), buf[:n])<br>peers[<span class="hljs-number">0</span>] = addr<br><br><span class="hljs-comment">//阻塞的  必须等到之后才能进行连接</span><br>n, addr, _ = listener.ReadFromUDP(buf)<br>fmt.Printf(<span class="hljs-string">&quot;read from &lt;%s&gt;: %s\n&quot;</span>, addr.String(), buf[:n])<br>peers[<span class="hljs-number">1</span>] = addr<br><br><span class="hljs-comment">//3 将A和B分别介绍给彼此，如果是多个 p2p 点呢？这里维护一个map 点即可。一对一的映射关系</span><br>listener.WriteToUDP([]<span class="hljs-keyword">byte</span>(peers[<span class="hljs-number">0</span>].String()), peers[<span class="hljs-number">1</span>])<br>listener.WriteToUDP([]<span class="hljs-keyword">byte</span>(peers[<span class="hljs-number">1</span>].String()), peers[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">// 4睡眠10s 确保消息发送完成</span><br>time.Sleep(time.Second * <span class="hljs-number">10</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>p2pclient.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//1 设定参数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &lt; <span class="hljs-number">5</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;./client tag remoteIp remotePort port&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//本地绑定端口</span><br>port, _ := strconv.Atoi(os.Args[<span class="hljs-number">4</span>])<br><span class="hljs-comment">//客户端标志</span><br>tag := os.Args[<span class="hljs-number">1</span>]<br><span class="hljs-comment">//服务器ip</span><br>remoteIP := os.Args[<span class="hljs-number">2</span>]<br>remotePort, _ := strconv.Atoi(os.Args[<span class="hljs-number">3</span>])<br><span class="hljs-comment">//绑定本地端口</span><br>localAddr := net.UDPAddr&#123;Port: port&#125;<br><br><span class="hljs-comment">//2 与服务器建立联系(UDP服务器)</span><br>conn, err := net.DialUDP(<span class="hljs-string">&quot;udp&quot;</span>, &amp;localAddr, &amp;net.UDPAddr&#123;<br>IP:   net.ParseIP(remoteIP),<br>Port: remotePort,<br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(<span class="hljs-string">&quot;Failed to DialUDP&quot;</span>, err)<br><br>&#125;<br><br><span class="hljs-comment">//2.1 自我介绍，表明身份</span><br>conn.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;我是: &quot;</span> + tag))<br><br><span class="hljs-comment">//3 从服务器获取另一个客户端地址</span><br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br>n, _, err := conn.ReadFromUDP(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(<span class="hljs-string">&quot;Failed to readFromUdp&quot;</span>, err)<br>&#125;<br><br>conn.Close()<br><br>toAddr := parseAddr(<span class="hljs-keyword">string</span>(buf[:n]))<br>fmt.Println(<span class="hljs-string">&quot;目标地址: &quot;</span>, toAddr)<br><span class="hljs-comment">// 4 建立P2P连接通信</span><br>p2p(&amp;localAddr, &amp;toAddr)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseAddr</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">net</span>.<span class="hljs-title">UDPAddr</span></span> &#123;<br>t := strings.Split(addr, <span class="hljs-string">&quot;:&quot;</span>)<br><br>port, _ := strconv.Atoi(t[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">return</span> net.UDPAddr&#123;<br>IP:   net.ParseIP(t[<span class="hljs-number">0</span>]),<br>Port: port,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">p2p</span><span class="hljs-params">(srcAddr *net.UDPAddr, dstAddr *net.UDPAddr)</span></span> &#123;<br><span class="hljs-comment">//1 请求与对方建立联系</span><br>conn, _ := net.DialUDP(<span class="hljs-string">&quot;udp&quot;</span>, srcAddr, dstAddr)<br><br><span class="hljs-comment">//2发送打洞消息</span><br>conn.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;打洞消息 \n&quot;</span>))<br><br><span class="hljs-comment">// 3 启动一个goroutine 监控标准输入</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">//接受UDP消息并打印</span><br>n, _, _ := conn.ReadFromUDP(buf)<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;收到消息: %sp2p&quot;</span>, buf[:n])<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">//4 监控输入，发送给对方</span><br>reader := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;p2p&gt;&quot;</span>)<br>data, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>conn.Write([]<span class="hljs-keyword">byte</span>(data))<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-Go语言实现POW共识算法"><a href="#2-Go语言实现POW共识算法" class="headerlink" title="2 Go语言实现POW共识算法"></a>2 Go语言实现POW共识算法</h2><p>1 定义区块和数据串行化</p><p>定义区块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Block <span class="hljs-keyword">struct</span> &#123;<br>   Timestamp  <span class="hljs-keyword">int64</span> <span class="hljs-comment">//</span><br>   Data  []<span class="hljs-keyword">byte</span><br>   PrevBlockHash  []<span class="hljs-keyword">byte</span><br>   Hash  []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义区块链</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BlockChain <span class="hljs-keyword">struct</span> &#123;<br>   blocks []*Block<br>&#125;<br></code></pre></td></tr></table></figure><p>定义POW: 工作量证明，需要工作难度参与</p><p>需要找到一个随机数nonce,使之和(data,timestamp,prevHash，nonce)等数据的hash结果，满足一定的条件(难度值)</p><p>首先初始化一个值为1 的big.Int.<br>将其左移256-targetBit位。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">target := big.NewInt(<span class="hljs-number">1</span>) <span class="hljs-comment">// New函数返回指针</span><br>fmt.Println(target)<br><span class="hljs-comment">//target为1 向左移动256-24（挖矿难度）</span><br>target.Lsh(target,<span class="hljs-keyword">uint</span>(<span class="hljs-number">256</span><span class="hljs-number">-24</span>))<br>fmt.Println(target)<br><br></code></pre></td></tr></table></figure><p>1：<br>左移1，=2<br>左移2，=4<br>左移10，=1024<br>左移256-24，即为最终难度值.</p><p>当找到的nonce对应的hash小于target(难度)则代表找到了.</p><p>挖矿逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//挖矿逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pow *ProofOfWork)</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">int64</span>, []<span class="hljs-keyword">byte</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span> hashInt big.Int<br><span class="hljs-keyword">var</span> hash [<span class="hljs-number">32</span>]<span class="hljs-keyword">byte</span><br>nonce := <span class="hljs-number">0</span><br><br>fmt.Printf(<span class="hljs-string">&quot;Mining the block containing %s, maxNonce=%d\n&quot;</span>, pow.block.Data, maxNonce)<br><span class="hljs-keyword">for</span> nonce &lt; maxNonce &#123;<br>data := pow.prepareDara(<span class="hljs-keyword">int64</span>(nonce))<br><span class="hljs-comment">//计算hash</span><br>hash = sha256.Sum256(data)<br>fmt.Printf(<span class="hljs-string">&quot;\r%x&quot;</span>, hash)<br>hashInt.SetBytes(hash[:])<br><span class="hljs-comment">// 按字节比较，小于0则代表扎到目标Nonce</span><br><br><span class="hljs-keyword">if</span> hashInt.Cmp(pow.target) == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>nonce++<br>&#125;<br>&#125;<br>fmt.Print(<span class="hljs-string">&quot;\n\n&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">int64</span>(nonce), hash[:]<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共识算法介绍-1-POW</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D-1-POW/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D-1-POW/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>共识算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>共识算法</tag>
      
      <tag>POW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共识算法介绍</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.geeksforgeeks.org/consensus-algorithms-in-blockchain/?ref=lbp">https://www.geeksforgeeks.org/consensus-algorithms-in-blockchain/?ref=lbp</a></p><p>我们知道区块链是一个分布式的去中心化网络，它提供了不可变性、隐私性、安全性和透明性。目前没有中央机构来验证和验证事务，但是区块链中的每个事务都被认为是完全安全的和经过验证的。这是可能的，只是因为存在“共识协议”，它是任何区块链网络的核心部分。</p><p>共识算法是一个过程，通过它，区块链网络的所有对等体对分布式分类帐的当前状态达成一致意见。通过这种方式，共识算法在区块链网络中实现可靠性，并在分布式计算环境中的未知对等体之间建立信任。从本质上说，共识协议确保添加到区块链的每个新块都是区块链中所有节点一致同意的真相的唯一版本。</p><p>区块链共识协议包含了一些具体的目标，如达成协议、合作、合作、每个节点的平等权利，以及每个节点在共识过程中的强制性参与。因此，共识算法的目标是找到一个共同的协议，这是整个网络的胜利。</p><ul><li><p>1 Proof of Work (PoW):<br>该共识算法用于为下一个块生成选择一个矿工。比特币使用这种PoW共识算法。该算法的核心思想是解决一个复杂的数学难题，并轻松给出答案。这个数学难题需要大量的计算能力，因此，尽快解决这个难题的节点可以挖掘下一个块。</p></li><li><p>2 Practical Byzantine Fault Tolerance (PBFT)</p></li><li><p>3 Proof of Stake (PoS):<br>这是PoW最常见的替代方法。以太坊已经从PoW共识转向PoS共识。在这种类型的共识算法中，验证者不是投资昂贵的硬件来解决一个复杂的谜题，而是通过锁定他们的一些硬币作为股权来投资系统中的硬币。在那之后，所有的验证器将开始验证这些块。如果验证者发现了一个他们认为可以添加到链中的区块，他们就会在上面下赌注来验证区块。基于在区块链中添加的实际块，所有的验证者得到与他们的赌注成比例的奖励，他们的股份相应地增加。最后，根据他们在网络中的经济利益，选择一个验证器来生成一个新的区块。因此，PoS通过激励机制鼓励验证者达成协议。</p></li><li><p>4 Proof of Burn (PoB):</p></li><li><p>5 Proof of Capacity:</p></li><li><p>6 Proof of Elapsed Time:</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>共识算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>共识算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具-数据仓库</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>数据仓库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-3-开发应用-java</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/24/FISCO-3-%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8-java/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/24/FISCO-3-%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8-java/</url>
    
    <content type="html"><![CDATA[<p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/java_sdk/quick_start.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/java_sdk/quick_start.html</a></p><p><a href="https://gitee.com/niuwenchen/fisco_bcos_project.git">https://gitee.com/niuwenchen/fisco_bcos_project.git</a></p><p><a href="https://gitee.com/FISCO-BCOS/java-sdk-demo.git">https://gitee.com/FISCO-BCOS/java-sdk-demo.git</a></p><h2 id="1-example"><a href="#1-example" class="headerlink" title="1 example"></a>1 example</h2><p>配置文件: config.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[cryptoMaterial]</span><br><br><span class="hljs-attr">certPath</span> = <span class="hljs-string">&quot;conf&quot;</span>                           <span class="hljs-comment"># The certification path</span><br><br><span class="hljs-comment"># The following configurations take the certPath by default if commented</span><br><span class="hljs-comment"># caCert = &quot;conf/ca.crt&quot;                    # CA cert file path</span><br><span class="hljs-comment"># If connect to the GM node, default CA cert path is $&#123;certPath&#125;/gm/gmca.crt</span><br><br><span class="hljs-comment"># sslCert = &quot;conf/sdk.crt&quot;                  # SSL cert file path</span><br><span class="hljs-comment"># If connect to the GM node, the default SDK cert path is $&#123;certPath&#125;/gm/gmsdk.crt</span><br><br><span class="hljs-comment"># sslKey = &quot;conf/sdk.key&quot;                   # SSL key file path</span><br><span class="hljs-comment"># If connect to the GM node, the default SDK privateKey path is $&#123;certPath&#125;/gm/gmsdk.key</span><br><br><span class="hljs-comment"># enSslCert = &quot;conf/gm/gmensdk.crt&quot;         # GM encryption cert file path</span><br><span class="hljs-comment"># default load the GM SSL encryption cert from $&#123;certPath&#125;/gm/gmensdk.crt</span><br><br><span class="hljs-comment"># enSslKey = &quot;conf/gm/gmensdk.key&quot;          # GM ssl cert file path</span><br><span class="hljs-comment"># default load the GM SSL encryption privateKey from $&#123;certPath&#125;/gm/gmensdk.key</span><br><br><span class="hljs-section">[network]</span><br><span class="hljs-attr">peers</span>=[<span class="hljs-string">&quot;172.16.0.89:20200&quot;</span>]   <span class="hljs-comment"># The peer list to connect</span><br><br><span class="hljs-comment"># Configure a private topic as a topic message sender.</span><br><span class="hljs-comment"># [[amop]]</span><br><span class="hljs-comment"># topicName = &quot;PrivateTopic1&quot;</span><br><span class="hljs-comment"># publicKeys = [ &quot;conf/amop/consumer_public_key_1.pem&quot; ]    # Public keys of the nodes that you want to send AMOP message of this topic to.</span><br><br><span class="hljs-comment"># Configure a private topic as a topic subscriber.</span><br><span class="hljs-comment"># [[amop]]</span><br><span class="hljs-comment"># topicName = &quot;PrivateTopic2&quot;</span><br><span class="hljs-comment"># privateKey = &quot;conf/amop/consumer_private_key.p12&quot;         # Your private key that used to subscriber verification.</span><br><span class="hljs-comment"># password = &quot;123456&quot;</span><br><br><span class="hljs-section">[account]</span><br><span class="hljs-attr">keyStoreDir</span> = <span class="hljs-string">&quot;account&quot;</span>         <span class="hljs-comment"># The directory to load/store the account file, default is &quot;account&quot;</span><br><span class="hljs-comment"># accountFilePath = &quot;&quot;          # The account file path (default load from the path specified by the keyStoreDir)</span><br><span class="hljs-attr">accountFileFormat</span> = <span class="hljs-string">&quot;pem&quot;</span>       <span class="hljs-comment"># The storage format of account file (Default is &quot;pem&quot;, &quot;p12&quot; as an option)</span><br><br><span class="hljs-comment"># accountAddress = &quot;&quot;           # The transactions sending account address</span><br><span class="hljs-comment"># Default is a randomly generated account</span><br><span class="hljs-comment"># The randomly generated account is stored in the path specified by the keyStoreDir</span><br><br><span class="hljs-comment"># password = &quot;&quot;                 # The password used to load the account file</span><br><br><span class="hljs-section">[threadPool]</span><br><span class="hljs-comment"># channelProcessorThreadSize = &quot;16&quot;         # The size of the thread pool to process channel callback</span><br><span class="hljs-comment"># Default is the number of cpu cores</span><br><br><span class="hljs-comment"># receiptProcessorThreadSize = &quot;16&quot;         # The size of the thread pool to process transaction receipt notification</span><br><span class="hljs-comment"># Default is the number of cpu cores</span><br><br><span class="hljs-attr">maxBlockingQueueSize</span> = <span class="hljs-string">&quot;102400&quot;</span>             <span class="hljs-comment"># The max blocking queue size of the thread pool</span><br><br></code></pre></td></tr></table></figure><p>加密材料: resources/conf/xxx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco;<br><br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.protocol.response.BlockNumber;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.ConfigOption;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.TransactionReceipt;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.exception.ContractException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosSDKTest</span> </span>&#123;<br>    <span class="hljs-comment">//获取配置文件路径</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> String configPath = BcosSDKTest.class.getClassLoader().getResource(<span class="hljs-string">&quot;config.toml&quot;</span>).getPath();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ContractException </span>&#123;<br>        System.out.println(configPath);<br><br>        String path=<span class="hljs-string">&quot;E:\\project\\fisco_project\\fisco_bcos_project\\2-sdk\\fisco-bcos-sdk\\src\\main\\resources&quot;</span><br>                + <span class="hljs-string">&quot;\\config.toml&quot;</span>;<br><br>        BcosSDK sdk = BcosSDK.build(path);<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">//获取群组1的块高</span><br>        BlockNumber blockNumber = client.getBlockNumber();<br>        System.out.println(blockNumber);<br><br>        <span class="hljs-comment">//向群组1部署HelloWorld合约</span><br>        CryptoKeyPair cryptoKeyPair =  client.getCryptoSuite().getCryptoKeyPair();<br>        HelloJack helloJack = HelloJack.deploy(client,cryptoKeyPair);<br><br>        String getValue = helloJack.get();<br><br>        System.out.println(getValue);<br>        TransactionReceipt receipt = helloJack.set(<span class="hljs-string">&quot;Hello, fisco&quot;</span>);<br><br>        String getValue1 = helloJack.get();<br><br>        System.out.println(getValue1);<br><br>    &#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="2-AMOP功能"><a href="#2-AMOP功能" class="headerlink" title="2 AMOP功能"></a>2 AMOP功能</h2><p>Java SDK支持链上信使协议AMOP(Advanced Messages Onchain Protocol),用户可以通过AMOP协议与其他机构互传信息。</p><h3 id="2-1-配置方法"><a href="#2-1-配置方法" class="headerlink" title="2.1 配置方法"></a>2.1 配置方法</h3><p>AMOP有两种话题模式: 普通话题和私有话题。任何一个订阅了某普通话题的订阅者都能收到该话题相关的推送消息。但是在某些情况下，发送者只希望特定的接收者能接收到消息，不希望无关的接收者能任意的监听此话题，就需要使用私有话题了。</p><p>AMOP私有话题的特殊之处在于，SDK之间需要身份验证，认证通过的订阅者才可以接收到该话题的信息。 </p><pre><code>身份验证的原理，首先由发送方生成一个随机数，订阅方用私钥对随机数签名，发送方用配置的公钥验证这个签名来确定对方是否是自己指定的订阅方。 因此，一个成功的私钥话题通道的建立需要(1) 消息发送者需要设置指定的订阅者的公钥(2) 订阅方也需要设置能证明自己身份的私钥</code></pre><p>当用户需要订阅私有话题，或者作为消息发布者配置一个私有话题时，可以用配置文件进行配置。 但AMOP的配置不是必须项，私有话题的订阅和设置，还可以通过调用AMOP的接口实现。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"># AMOP configuration<br># You can use following two methods <span class="hljs-keyword">to</span> configure <span class="hljs-keyword">as</span> a <span class="hljs-keyword">private</span> topic message sender <span class="hljs-built_in">or</span> subscriber.<br># Usually, the <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> <span class="hljs-built_in">is</span> generated <span class="hljs-keyword">by</span> subscriber.<br># Message sender receive <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">from</span> topic subscriber <span class="hljs-keyword">then</span> make configuration.<br># But, please <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> config <span class="hljs-keyword">as</span> both the message sender <span class="hljs-built_in">and</span> the subscriber <span class="hljs-keyword">of</span> one <span class="hljs-keyword">private</span> topic, <span class="hljs-built_in">or</span> you may send the message <span class="hljs-keyword">to</span> yourself.<br><br># Configure a <span class="hljs-keyword">private</span> topic <span class="hljs-keyword">as</span> a topic message sender.<br># [[amop]]<br># topicName = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br># publicKeys = [ <span class="hljs-string">&quot;conf/amop/consumer_public_key_1.pem&quot;</span> ]    # <span class="hljs-keyword">Public</span> keys <span class="hljs-keyword">of</span> the nodes that you want <span class="hljs-keyword">to</span> send AMOP message <span class="hljs-keyword">of</span> this topic <span class="hljs-keyword">to</span>.<br><br># Configure a <span class="hljs-keyword">private</span> topic <span class="hljs-keyword">as</span> a topic subscriber.<br># [[amop]]<br># topicName = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br># privateKey = <span class="hljs-string">&quot;conf/amop/consumer_private_key.p12&quot;</span>         # Your <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> that used <span class="hljs-keyword">to</span> subscriber verification.<br># password = <span class="hljs-string">&quot;123456&quot;</span><br><br></code></pre></td></tr></table></figure><p>配置详解:</p><ol><li>配置一个私有话题(作为消息发布者)</li></ol><ul><li>需要在配置文件中新建一个[[amop]]节点</li><li>配置话题 topicName=”xxxx”</li><li>消息订阅方的公钥列表 publicKeys=[“conf/amop/consumer_public_key_1.pem”]，即指定的接收对象的公钥，这个公钥必须与某个订阅方的私钥匹配</li></ul><ol start="2"><li>订阅一个私有话题(作为订阅者)</li></ol><ul><li>amop</li><li>topicName=”xxx”</li><li>证明订阅方身份的私钥</li><li>密码<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[[amop]]</span><br><span class="hljs-attr">topicName</span> = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br><span class="hljs-attr">privateKey</span> = <span class="hljs-string">&quot;conf/amop/consumer_private_key.p12&quot;</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-接口说明"><a href="#2-2-接口说明" class="headerlink" title="2.2 接口说明"></a>2.2 接口说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2014-2020  [fisco-dev]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment"> * in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment"> * is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment"> * or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment"> * the License.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.amop;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.topic.TopicManager;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.channel.Channel;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.ConfigOption;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keystore.KeyTool;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AMOP module interface.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Maggie</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Amop</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a Amop object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel the channel to send/receive message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config the config object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Amop instance</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Amop <span class="hljs-title">build</span><span class="hljs-params">(Channel channel, ConfigOption config)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AmopImp(channel, config);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Subscribe a normal topic.</span><br><span class="hljs-comment">     * 订阅一个普通话题</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback callback is called when receive a msg relate to this topic</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribeTopic</span><span class="hljs-params">(String topicName, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Subscribe a private topic which need verify.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKeyTool the private key you used to prove your identity.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback callback is called when receive a msg relate to this topic</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribePrivateTopics</span><span class="hljs-params">(String topicName, KeyTool privateKeyTool, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribePrivateTopics</span><span class="hljs-params">(String topicName, String hexPrivateKey, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Config a topic which is need verification, after that user can send message to verified</span><br><span class="hljs-comment">     * subscriber.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKeyTools the public keys of the target organizations that you want to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">publishPrivateTopic</span><span class="hljs-params">(String topicName, List&lt;KeyTool&gt; publicKeyTools)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">publishPrivateTopicWithHexPublicKeyList</span><span class="hljs-params">(String topicName, List&lt;String&gt; publicKeyList)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Unsubscribe a topic.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unsubscribeTopic</span><span class="hljs-params">(String topicName)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Send amop msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content the sent message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback the callback that will be called when receive the AMOP response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendAmopMsg</span><span class="hljs-params">(AmopMsgOut content, AmopResponseCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Send amop msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content the broadcasted AMOP message</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">broadcastAmopMsg</span><span class="hljs-params">(AmopMsgOut content)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get all subscribe topics.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> topic name list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Set&lt;String&gt; <span class="hljs-title">getSubTopics</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * set amop default callback</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cb the amop callback</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCallback</span><span class="hljs-params">(AmopCallback cb)</span></span>;<br><br>    <span class="hljs-comment">/** Start. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/** Stop. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * generate message sequence string</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Sequence string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">newSeq</span><span class="hljs-params">()</span> </span>&#123;<br>        String seq = UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> seq;<br>    &#125;<br><br>    <span class="hljs-function">TopicManager <span class="hljs-title">getTopicManager</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendSubscribe</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-demo"><a href="#2-3-demo" class="headerlink" title="2.3 demo"></a>2.3 demo</h3><p>广播 发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.amop.tool;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.Amop;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.AmopMsgOut;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.topic.TopicType;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.protocol.response.Peers;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmopPublisher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> parameterNum = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String publisherFile =<br>            AmopPublisher.class<br>                    .getClassLoader()<br>                    .getResource(<span class="hljs-string">&quot;amop/config-publisher-for-test.toml&quot;</span>)<br>                    .getPath();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args topicName, isBroadcast, Content(Content you want to send out), Count(how many msg</span><br><span class="hljs-comment">     *     you want to send out)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception AMOP publish exceptioned</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (args.length &lt; parameterNum) &#123;<br>            System.out.println(<span class="hljs-string">&quot;param: target topic total number of request&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String topicName = args[<span class="hljs-number">0</span>];<br>        Boolean isBroadcast = Boolean.valueOf(args[<span class="hljs-number">1</span>]);<br>        String content = args[<span class="hljs-number">2</span>];<br>        Integer count = Integer.parseInt(args[<span class="hljs-number">3</span>]);<br>        BcosSDK sdk = BcosSDK.build(publisherFile);<br>        Amop amop = sdk.getAmop();<br><br>        System.out.println(<span class="hljs-string">&quot;3s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;2s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;1s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-keyword">if</span> (!subscribed(sdk, topicName)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;No subscriber, exist.&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;start test&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===================================================================&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Integer i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            AmopMsgOut out = <span class="hljs-keyword">new</span> AmopMsgOut();<br>            out.setType(TopicType.NORMAL_TOPIC);<br>            out.setContent(content.getBytes());<br>            out.setTimeout(<span class="hljs-number">6000</span>);<br>            out.setTopic(topicName);<br>            DemoAmopResponseCallback cb = <span class="hljs-keyword">new</span> DemoAmopResponseCallback();<br>            DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-keyword">if</span> (isBroadcast) &#123;<br>                amop.broadcastAmopMsg(out);<br>                System.out.println(<br>                        <span class="hljs-string">&quot;Step 1: Send out msg by broadcast,  time: &quot;</span><br>                                + df.format(LocalDateTime.now())<br>                                + <span class="hljs-string">&quot; topic:&quot;</span><br>                                + out.getTopic()<br>                                + <span class="hljs-string">&quot; content:&quot;</span><br>                                + <span class="hljs-keyword">new</span> String(out.getContent()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                amop.sendAmopMsg(out, cb);<br>                System.out.println(<br>                        <span class="hljs-string">&quot;Step 1: Send out msg,  time: &quot;</span><br>                                + df.format(LocalDateTime.now())<br>                                + <span class="hljs-string">&quot; topic:&quot;</span><br>                                + out.getTopic()<br>                                + <span class="hljs-string">&quot; content:&quot;</span><br>                                + <span class="hljs-keyword">new</span> String(out.getContent()));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">subscribed</span><span class="hljs-params">(BcosSDK sdk, String topicName)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br>        Boolean hasSubscriber = <span class="hljs-keyword">false</span>;<br>        Peers peers = client.getPeers();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (Peers.PeerInfo info : peers.getPeers()) &#123;<br>                <span class="hljs-keyword">for</span> (String tp : info.getTopic()) &#123;<br>                    <span class="hljs-keyword">if</span> (tp.equals(topicName)) &#123;<br>                        hasSubscriber = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-keyword">return</span> hasSubscriber;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!hasSubscriber) &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接收者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.amop.tool;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.Amop;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.AmopCallback;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmopSubscriber</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        URL configUrl =<br>                AmopSubscriber.class<br>                        .getClassLoader()<br>                        .getResource(<span class="hljs-string">&quot;amop/config-subscriber-for-test.toml&quot;</span>);<br>        <span class="hljs-keyword">if</span> (args.length &lt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Param: topic&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String topic = args[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// Construct a BcosSDK instance</span><br>        BcosSDK sdk = BcosSDK.build(configUrl.getPath());<br><br>        <span class="hljs-comment">// Get the amop module instance</span><br>        Amop amop = sdk.getAmop();<br><br>        <span class="hljs-comment">// Set callback</span><br>        AmopCallback cb = <span class="hljs-keyword">new</span> DemoAmopCallback();<br>        <span class="hljs-comment">// Set a default callback</span><br>        amop.setCallback(cb);<br>        <span class="hljs-comment">// Subscriber a normal topic</span><br>        amop.subscribeTopic(topic, cb);<br>        System.out.println(<span class="hljs-string">&quot;Start test&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>还可以发送文件，具体看:  <a href="https://github.com/FISCO-BCOS/java-sdk-demo.git">https://github.com/FISCO-BCOS/java-sdk-demo.git</a></p><h2 id="3-合约事件推送"><a href="#3-合约事件推送" class="headerlink" title="3 合约事件推送"></a>3 合约事件推送</h2><p>合约事件推送功能提供了合约事件的异步推送机制，客户端向节点发送注册请求，在请求中携带客户端关注的合约事件的参数，节点根据请求参数对区块范围内的Event Log进行过滤，将结果分次推送给客户端。</p><h3 id="3-1-交互协议"><a href="#3-1-交互协议" class="headerlink" title="3.1 交互协议"></a>3.1 交互协议</h3><p>客户端与节点的交互基于Channel协议。 交互分为三个阶段： 注册请求，节点回复，Event Log数据推送</p><p><strong>注册请求</strong><br>客户端向节点发送事件推送的注册请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// request sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;fromBlock&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>  <span class="hljs-attr">&quot;toBlock&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>  <span class="hljs-attr">&quot;addresses&quot;</span>: [<br>    <span class="hljs-string">&quot;0xca5ed56862869c25da0bdf186e634aac6c6361ee&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;topics&quot;</span>: [<br>    <span class="hljs-string">&quot;0x91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;groupID&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filerID：字符串类型，每次请求唯一，标记一次注册任务</li><li>groupID：字符串类型，群组ID</li><li>fromBlock：整形字符串，初始区块。“latest” 当前块高</li><li>toBlock：整形字符串，最终区块。“latest” 处理至当前块高时，继续等待新区块</li><li>addresses：字符串或者字符串数组：字符串表示单个合约地址，数组为多个合约地址，数组可以为空</li><li>topics：字符串类型或者数组类型：字符串表示单个topic，数组为多个topic，数组可以为空</li></ul><p><strong>节点回复</strong><br>节点接受客户端注册请求时，会对请求参数进行校验，将是否成功接受该注册请求结果回复给客户端。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// response sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filterID：字符串类型，每次请求唯一，标记一次注册任务</li><li>result：整形，返回结果。0成功，其余为失败状态码</li></ul><p><strong>Event Log数据推送</strong><br>节点验证客户端注册请求成功之后，根据客户端请求参数条件，向客户端推送Event Log数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// event log push sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;logs&quot;</span>: [<br>    <br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filterID：字符串类型，每次请求唯一，标记一次注册任务</li><li>result：整形 0：Event Log数据推送 1：推送完成。客户端一次注册请求对应节点的数据推送会有多次（请求区块范围比较大或者等待新的区块），result字段为1时说明节点推送已经结束</li><li>logs：Log对象数组，result为0时有效</li></ul><h3 id="3-2-JavaSDK"><a href="#3-2-JavaSDK" class="headerlink" title="3.2 JavaSDK"></a>3.2 JavaSDK</h3><p>Java SDK中org.fisco.bcos.sdk.eventsub类提供合约事件的注册接口，用户可以调用subscribeEvent向节点发送注册请求，并设置回调函数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">subscribeEvent</span><span class="hljs-params">(EventLogParams params, EventCallback callback)</span></span>;<br></code></pre></td></tr></table></figure><p>事件回调请求注册的参数：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventLogParams</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> fromBlock;   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> toBlock;<br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-keyword">String</span>&gt; addresses;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; topics;<br>&#125;<br></code></pre></td></tr></table></figure><p>callback回调对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EventCallback</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status, List&lt;EventLog&gt; logs)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>status 回调返回状态：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">0</span>       : 正常推送，此时<span class="hljs-type">logs</span>为节点推送的事件日志<br><span class="hljs-number">1</span>       : 推送完成，执行区间的区块都已经处理<br>-<span class="hljs-number">41000</span>  : 参数无效，客户端验证参数错误返回<br>-<span class="hljs-number">41001</span>  : 参数错误，节点验证参数错误返回<br>-<span class="hljs-number">41002</span>  : 群组不存在<br>-<span class="hljs-number">41003</span>  : 请求错误的区块区间<br>-<span class="hljs-number">41004</span>  : 节点推送数据格式错误<br>-<span class="hljs-number">41005</span>  : 请求发送超时<br>-<span class="hljs-number">41006</span>  : 客户端无订阅权限<br>-<span class="hljs-number">41007</span>  : 事件尚未注册，取消订阅失败<br><span class="hljs-number">42000</span>   : 其他错误 <br><br></code></pre></td></tr></table></figure><p>logs表示回调的Event Log对象列表，status为0有效。默认值null，可以在子类中通过org.fisco.bcos.sdk.abi.ABICodec解析以下EventLog对象的data字段。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// EventLog 对象</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventLog</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> logIndex;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> transactionIndex;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> transactionHash;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> blockHash;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> blockNumber;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> address;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> data;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> type;<br>   <span class="hljs-keyword">private</span> List&lt;<span class="hljs-keyword">String</span>&gt; topics;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>实现回调对象</strong><br>Java SDK对回调类EventCallback无默认实现，用户可以通过继承EventCallback类，重写onReceiveLog接口，实现自己的回调逻辑处理。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">SubscribeCallback</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">EventCallback</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> onReceiveLog(<span class="hljs-built_in">int</span> status, List&lt;EventLog&gt; logs) &#123;<br>        <span class="hljs-comment">// ADD CODE</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>topic工具</strong></p><p>org.fisco.bcos.sdk.abi.TopicTools提供将各种类型参数转换为对应topic的工具，用户设置EventLogParams的topics参数可以使用。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs processing">class TopicTools &#123;<br>    <span class="hljs-comment">// int1/uint1~uint1/uint256 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> integerToTopic(BigInteger i)<br>    <span class="hljs-comment">// bool</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> boolToTopic(<span class="hljs-built_in">boolean</span> b)<br>    <span class="hljs-comment">// address</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> addressToTopic(<span class="hljs-keyword">String</span> s)<br>    <span class="hljs-comment">// string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> stringToTopic(<span class="hljs-keyword">String</span> s)<br>    <span class="hljs-comment">// bytes</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> bytesToTopic(<span class="hljs-built_in">byte</span>[] b)<br>    <span class="hljs-comment">// byte1~byte32</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> byteNToTopic(<span class="hljs-built_in">byte</span>[] b)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-实例"><a href="#3-3-实例" class="headerlink" title="3.3 实例"></a>3.3 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.event;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventCallback;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventLogParams;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventSubscribe;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.ConstantConfig;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.EventLog;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Listen</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(Listen.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allEventLog</span><span class="hljs-params">()</span> </span>&#123;<br>        String configFileName = ConstantConfig.CONFIG_FILE_NAME;<br>        URL configUrl = Listen.class.getClassLoader().getResource(configFileName);<br>        <span class="hljs-keyword">if</span> (configUrl == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The configFile &quot;</span> + configFileName + <span class="hljs-string">&quot; doesn&#x27;t exist!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String configFile = configUrl.getPath();<br>        BcosSDK sdk = BcosSDK.build(configFile);<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br>        EventSubscribe eventSubscribe = sdk.getEventSubscribe(client.getGroupId());<br>        eventSubscribe.start();<br><br>        EventLogParams eventLogParams = <span class="hljs-keyword">new</span> EventLogParams();<br>        eventLogParams.setFromBlock(<span class="hljs-string">&quot;latest&quot;</span>);<br>        eventLogParams.setToBlock(<span class="hljs-string">&quot;latest&quot;</span>);<br>        eventLogParams.setAddresses(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        eventLogParams.setTopics(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubscribeCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EventCallback</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>, <span class="hljs-keyword">true</span>);<br><br>            SubscribeCallback() &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    logger.error(<span class="hljs-string">&quot;error :&quot;</span>, e);<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status, List&lt;EventLog&gt; logs)</span> </span>&#123;<br>                String str = <span class="hljs-string">&quot;status in onReceiveLog : &quot;</span> + status;<br>                logger.debug(str);<br>                semaphore.release();<br>                <span class="hljs-keyword">if</span> (logs != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (EventLog log : logs) &#123;<br>                        logger.debug(<br>                                <span class="hljs-string">&quot; blockNumber:&quot;</span><br>                                        + log.getBlockNumber()<br>                                        + <span class="hljs-string">&quot;,txIndex:&quot;</span><br>                                        + log.getTransactionIndex()<br>                                        + <span class="hljs-string">&quot; data:&quot;</span><br>                                        + log.getData());<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        SubscribeCallback subscribeEventCallback = <span class="hljs-keyword">new</span> SubscribeCallback();<br>        String registerId = eventSubscribe.subscribeEvent(eventLogParams, subscribeEventCallback);<br>        System.out.print(<span class="hljs-string">&quot;subscribe event, registerId is &quot;</span> + registerId);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        allEventLog();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是实测有点问题</p><h2 id="4-账户管理"><a href="#4-账户管理" class="headerlink" title="4 账户管理"></a>4 账户管理</h2><p>Java SDK提供账户管理接口，支持以下功能：</p><ul><li>账户加载: 从指定路径加载账户，同时支持pem和p12格式的账户文件加载，也支持加载十六进制的私钥字符串</li><li>账户生成: 随机生成账户公私钥对</li><li>账户保存: 保存账户信息</li><li>提供加载p12和pem文件解析的接口</li></ul><h3 id="4-1-账户加载"><a href="#4-1-账户加载" class="headerlink" title="4.1 账户加载"></a>4.1 账户加载</h3><p>Java SDK的org.fisco.bcos.sdk.crypto.CryptoSuite提供账户加载功能，默认从配置文件的[account]配置项加载交易发送账户，具体请参考这里.</p><p><strong>从十六进制私钥字符串加载账户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco.account;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.CryptoSuite;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.ECDSAKeyPair;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountExample</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建cryptoSuite,通过cryptoSuite加载私钥字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cryptoType 用于需要指定加载的私钥类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hexPrivateKey 十六进制的私钥字符串,但是这里的十六进制私钥字符串怎么获取？？？</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadAccountFromHexPrivateKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cryptoType, String hexPrivateKey)</span></span>&#123;<br>        <span class="hljs-comment">// 根据cryotoType创建cryptoSuite，cryotoType目前支持</span><br>        <span class="hljs-comment">//1. CryptoType.ECDSA_TYPE: 用于创建非国密类型的CryptoSuite</span><br>        <span class="hljs-comment">//2. CryptoType.SM_TYPE:    用于创建国密类型的CryptoSuite</span><br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(cryptoType);<br>        <span class="hljs-keyword">return</span> cryptoSuite.getKeyPairFactory().createKeyPair(hexPrivateKey);<br>    &#125;<br><br>    <span class="hljs-comment">/* 示例二：直接加载非国密私钥 ****/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadECDSAAccountFromHexPrivateKey</span><span class="hljs-params">(BigInteger privateKey)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 创建国密类型的KeyFactory</span><br>        ECDSAKeyPair keyFacotry = <span class="hljs-keyword">new</span> ECDSAKeyPair();<br>        <span class="hljs-comment">// 从十六进制字符串加载hexPrivateKey</span><br>        <span class="hljs-keyword">return</span> keyFacotry.createKeyPair(privateKey);<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoKeyPair cryptoKeyPair = loadAccountFromHexPrivateKey(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;e94b6355d3c4a000000000000000000000000000000000000000000000000000&quot;</span>);<br>        System.out.println(cryptoKeyPair.getAddress());<br>        System.out.println(cryptoKeyPair.getAddress(<span class="hljs-string">&quot;04ac80e2d354de2634de7adbf89a5dfeb20eae0c31aa4f0db65aa43700be830048baddc08e336a33e121ae88633c084a5de821a11e1f6296a7ec8e6198fc6df740&quot;</span>));<br><br><br><span class="hljs-comment">//        CryptoKeyPair cp = loadECDSAAccountFromHexPrivateKey();</span><br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>现在的问题是不知道十六进制的私钥字符串。</p><p><img src="%E8%B4%A6%E6%88%B7.png" alt="account"><br>变形的过程，用公钥获取地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadAccountFromHexPrivateKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cryptoType)</span></span>&#123;<br>        <span class="hljs-comment">// 根据cryotoType创建cryptoSuite，cryotoType目前支持</span><br>        <span class="hljs-comment">//1. CryptoType.ECDSA_TYPE: 用于创建非国密类型的CryptoSuite</span><br>        <span class="hljs-comment">//2. CryptoType.SM_TYPE:    用于创建国密类型的CryptoSuite</span><br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(cryptoType);<br>        <span class="hljs-keyword">return</span> cryptoSuite.getKeyPairFactory().generateKeyPair();<br>    &#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoKeyPair cryptoKeyPair = loadAccountFromHexPrivateKey(<span class="hljs-number">0</span>);<br>        System.out.println(cryptoKeyPair.getAddress(<span class="hljs-string">&quot;04ac80e2d354de2634de7adbf89a5dfeb20eae0c31aa4f0db65aa43700be830048baddc08e336a33e121ae88633c084a5de821a11e1f6296a7ec8e6198fc6df740&quot;</span>));<br>    &#125;<br><br>&gt;&gt;&gt;&gt;&gt;&gt;输出<br><span class="hljs-number">0xf9c75f92388cf87a65281155a0afe913b09ca2f6</span><br><br></code></pre></td></tr></table></figure><p>可以直接从公钥获取地址。</p><p>通过loadAccount的方式加载外部账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">client.getCryptoSuite().loadAccount(<span class="hljs-string">&quot;pem&quot;</span>,systemConfig.getAccountPath(),<span class="hljs-keyword">null</span>);<br><br></code></pre></td></tr></table></figure><h2 id="5-密码学模块"><a href="#5-密码学模块" class="headerlink" title="5 密码学模块"></a>5 密码学模块</h2><p>Java SDK提供了可访问所有密码学相关接口的CryptoSuite，CryptoSuite会根据传入的cryptoType(目前支持CryptoType.ECDSA_TYPE和CryptoType.SM_TYPE，前者用在非国密链中，后者用于国密链中)初始化密码学相关的套件。</p><p>Java SDK目前支持以下功能:</p><ul><li>计算哈希: 支持sm3和keccak256两种哈希算法，一般国密采用前者，非国密采用后者；</li><li>签名/验签 : 支持sm2和secp256k1两种签名和验签方法，一半国密采用前者，非国密采用后者。</li></ul><p>hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco.crypto;<br><br><span class="hljs-keyword">import</span> org.bouncycastle.jcajce.provider.digest.SHA256;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.CryptoSuite;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.hash.Keccak256;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.CryptoType;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br><br>        System.out.println(cryptoSuite.hash(<span class="hljs-string">&quot;JackNiu&quot;</span>));<br>        System.out.println(calculateHashWithkeccak256(<span class="hljs-string">&quot;JackNiu&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-comment">/// 调用keccak256哈希算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">calculateHashWithkeccak256</span><span class="hljs-params">(String data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 创建keccak256对应的对象</span><br>        Keccak256 hasher = <span class="hljs-keyword">new</span> Keccak256();<br><span class="hljs-comment">//        SHA256 hasher = new SHA256();</span><br>        <span class="hljs-comment">// 返回十六进制哈希字符串</span><br>        <span class="hljs-keyword">return</span> hasher.hash(data);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用CryptoSuite调用签名/验证签名接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// 生成secp256k1签名</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ECDSASignatureResult  <span class="hljs-title">generateSigantureWithSecp256k1</span><span class="hljs-params">(String data)</span></span><br><span class="hljs-function">   </span>&#123;<br>       CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br>       <span class="hljs-comment">// 生成CryptoKeyPair</span><br>       CryptoKeyPair cryptoKeyPair = cryptoSuite.createKeyPair();<br>       <span class="hljs-comment">// 计算传入数据的哈希(keccak256哈希算法)</span><br>       String hashData = cryptoSuite.hash(data);<br>       <span class="hljs-comment">// 生成签名</span><br>       <span class="hljs-keyword">return</span> (ECDSASignatureResult)(cryptoSuite.sign(hashData, cryptoKeyPair));<br>   &#125;<br><br><br><br>   <span class="hljs-comment">/// 验证签名</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifySignature</span><span class="hljs-params">(SignatureResult signatureResult, CryptoKeyPair keyPair, String data)</span></span><br><span class="hljs-function">   </span>&#123;<br>       CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br>       <span class="hljs-comment">// 计算data的哈希(keccak256k1哈希算法)</span><br>       String hashData = cryptoSuite.hash(data);<br>       <span class="hljs-comment">// 验证签名</span><br>       <span class="hljs-keyword">return</span> cryptoSuite.verify(keyPair.getHexPublicKey(), hashData, signatureResult.convertToString());<br>   &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 开发应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>sdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具-区块链应用开发组件</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-脚手架开发应用"><a href="#1-脚手架开发应用" class="headerlink" title="1 脚手架开发应用"></a>1 脚手架开发应用</h2><h3 id="1-1-下载脚手架"><a href="#1-1-下载脚手架" class="headerlink" title="1.1 下载脚手架"></a>1.1 下载脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://github.com/WeBankBlockchain/SmartDev-Scaffold/releases/download/V1.0.1/SmartDev-Scaffold-V1_0_1.zip<br><br>unzip SmartDev-Scaffold*.zip<br><br><span class="hljs-built_in">cd</span> SmartDev-Scaffold/tools<br><br><span class="hljs-comment"># tools目录包含了执行环境</span><br>├── tools<br>│   ├── contracts<br>│   ├──|── HelloWorld.sol<br>│   ├── config.ini<br>│   ├── run.sh<br>│   ├── run.bat<br><br><br></code></pre></td></tr></table></figure><p>contracts目录用于存放solidity合约文件，脚手架后续会读取该目录下的合约以生成对应的业务工程。请删除该目录下的默认合约，并将自己的业务合约拷贝到该目录下。<br>config.ini是启动相关配置。<br>run.sh和run.bat分别是unix和windows下的启动脚本。</p><h3 id="1-2-配置脚手架"><a href="#1-2-配置脚手架" class="headerlink" title="1.2 配置脚手架"></a>1.2 配置脚手架</h3><p>合约配置： 在contracts目录下删除默认合约，拷贝自己的合约</p><p>生成配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[general]<br>artifact=fiscodemo<br>group=com.jackniu<br>selector=<br><span class="hljs-comment"># 0.4.25.1 0.5.2.0 0.6.10.0</span><br>compiler=0.4.25.1<br><span class="hljs-built_in">type</span>=gradle<br>gradleVersion=6.3<br><br><br></code></pre></td></tr></table></figure><h3 id="1-3-运行脚手架"><a href="#1-3-运行脚手架" class="headerlink" title="1.3 运行脚手架"></a>1.3 运行脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>bash run.sh<br><br><span class="hljs-comment"># 运行完成后,生成工作目录</span><br>├─contracts<br>├─run.sh<br>├─run.bat<br>└─demo<br></code></pre></td></tr></table></figure><p>脚手架目录</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<br>├── build.gradle<br>├── gradle<br>│   └── <span class="hljs-keyword">wrapper</span><br>│       ├── gradle-<span class="hljs-keyword">wrapper</span>.jar<br>│       └── gradle-<span class="hljs-keyword">wrapper</span>.properties<br>├── settings.gradle<br>└── src<br>    ├── main<br>    │   ├── contracts<br>    │   │   └── HelloWorld.sol<br>    │   ├── java<br>    │   │   └── org<br>    │   │       └── example<br>    │   │           └── demo<br>    │   │               ├── Application.java<br>    │   │               ├── config<br>    │   │               │   ├── BcosConfig.java<br>    │   │               │   ├── ContractConfig.java<br>    │   │               │   ├── SdkBeanConfig.java<br>    │   │               │   └── SystemConfig.java<br>    │   │               ├── constants<br>    │   │               │   ├── ContractConstants.java<br>    │   │               ├── model<br>    │   │               │   ├── CommonResponse.java<br>    │   │               │   └── bo<br>    │   │               │       └── HelloWorldSetInputBO.java<br>    │   │               ├── service<br>    │   │               │   └── HelloWorldService.java<br>    │   └── resources<br>    │       ├── abi<br>    │       │   └── HelloWorld.abi<br>    │       ├── application.properties<br>    │       ├── bin<br>    │       │   ├── ecc<br>    │       │   │   └── HelloWorld.bin<br>    │       │   └── sm<br>    │       │       └── HelloWorld.bin<br>    │       └── conf<br>    └── test<br>        └── java<br>            ├── org<br>            │   └── example<br>            │       └── demo<br>            │           └── Demos.java<br>            └── org.example.demo<br><br><br></code></pre></td></tr></table></figure><p>其中:</p><ul><li>config目录包含Bean配置类</li><li>service目录中包含了智能合约访问的Service类，一个类对应一个合约。</li><li>bo目录包含了合约函数输入参数的封装POJO类。</li><li>src/main/resource/conf目录用于存放证书信息</li><li>Demos.java包含了私钥生成、部署合约等示例代码</li></ul><h2 id="2-DAPP开发"><a href="#2-DAPP开发" class="headerlink" title="2 DAPP开发"></a>2 DAPP开发</h2><h3 id="2-1-在FISCO-BCOS联盟链上部署合约"><a href="#2-1-在FISCO-BCOS联盟链上部署合约" class="headerlink" title="2.1 在FISCO BCOS联盟链上部署合约"></a>2.1 在FISCO BCOS联盟链上部署合约</h3><p>可以使用控制台部署HelloWorld</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif">[group:1]&gt; deploy HelloWorld<br><span class="hljs-attribute">transaction hash</span>: 0xaf10275220a45ec5f913876d4b8f69c313907b2b3aa8100642b68fe83c045129<br><span class="hljs-attribute">contract address</span>: 0xe6a6140ae78fd31056acdee9fb0472be3213c5ef<br><span class="hljs-attribute">currentAccount</span>: 0xe45059851df184dd36e069d4671522052c8988a9<br></code></pre></td></tr></table></figure><h3 id="2-2-将联盟链的证书拷贝"><a href="#2-2-将联盟链的证书拷贝" class="headerlink" title="2.2 将联盟链的证书拷贝"></a>2.2 将联盟链的证书拷贝</h3><p>cp -r nodes/127.0.0.1/sdk/*   src/main/resources/conf下</p><p><img src="02.png" alt="证书"></p><h3 id="2-3-修改配置文件-application-properties"><a href="#2-3-修改配置文件-application-properties" class="headerlink" title="2.3 修改配置文件 application.properties"></a>2.3 修改配置文件 application.properties</h3><p>注意，原配置文件有误，用修改后的，前缀为bcos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs config">### Java sdk configuration<br>bcos.cryptoMaterial.certPath=conf<br>bcos.network.peers=172.16.0.89:20200,172.16.0.89:20201<br>#network.peers[1]=<br><br>### System configuration<br>system.groupId=1<br>system.privateKey=<br><br>### Contract configuration<br>contract.helloWorldAddress=0xe6a6140ae78fd31056acdee9fb0472be3213c5ef<br><br>### Springboot configuration<br>server.port=8080<br>server.session.timeout=60<br>banner.charset=UTF-8<br>spring.jackson.date-format=yyyy-MM-dd HH:mm:ss<br>spring.jackson.time-zone=GMT+8<br><br><br><br></code></pre></td></tr></table></figure><p>修改config/BcosConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.model.AmopTopic;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties</span><br>        (<br>                prefix = <span class="hljs-string">&quot;bcos&quot;</span><br>        )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; cryptoMaterial;<br>    <span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; network;<br>    <span class="hljs-keyword">public</span> List&lt;AmopTopic&gt; amop;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; account;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; threadPool;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-补全业务"><a href="#3-补全业务" class="headerlink" title="3 补全业务"></a>3 补全业务</h2><p>新建controller包，新建HelloWorldController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.controller;<br><br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.service.HelloWorldService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldService helloWorldService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;set&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;n&quot;)</span> String n)</span> <span class="hljs-keyword">throws</span>  Exception</span>&#123;<br>        HelloWorldSetInputBO input = <span class="hljs-keyword">new</span> HelloWorldSetInputBO(n);<br>        <span class="hljs-keyword">return</span> helloWorldService.set(input).getTransactionReceipt().getTransactionHash();<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> helloWorldService.get().getValues();<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>编译jar包并运行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">gradle <span class="hljs-keyword">bootJar</span><br><span class="hljs-keyword"></span><br>cd <span class="hljs-keyword">dist</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxxx.<span class="hljs-keyword">jar</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4 验证"></a>4 验证</h2><p>在浏览器输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/hello/</span>set?n=hello<br></code></pre></td></tr></table></figure><p>获得交易TxHash: 0x659feaddf3fac785a0273966417dca09302fee98c608802a82b2a59891b22527</p><p>在webase-front中查询具体交易详情:<br><img src="03.png" alt="交易信息"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/hello/g</span>et<br><br>返回 hello<br></code></pre></td></tr></table></figure><p>Tips:如果有新的合约，还是建议重新按照脚手架的步骤生成一份，然后合并到一起。</p><h2 id="5-Java代码分析"><a href="#5-Java代码分析" class="headerlink" title="5 Java代码分析"></a>5 Java代码分析</h2><p>build.gradle</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        mavenCentral()<br>        maven &#123; url <span class="hljs-string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span>&#125;<br>        maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span> &#125;<br>        mavenLocal()<br><br>    &#125;<br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        <span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.webank:solc-gradle-plugin:1.0.1&#x27;</span><br>        <span class="hljs-keyword">classpath</span>(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE&quot;</span>)<br>    &#125;<br>&#125;<br>plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.1.1.RELEASE&#x27;</span><br>&#125;<br>apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;eclipse&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;idea&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;maven&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;solc-gradle-plugin&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span><br><br><span class="hljs-keyword">sourceCompatibility</span> = <span class="hljs-number">1.8</span><br><span class="hljs-keyword">targetCompatibility</span> = <span class="hljs-number">1.8</span><br><span class="hljs-keyword">group</span> = <span class="hljs-string">&#x27;com.jackniu&#x27;</span><br>version = <span class="hljs-string">&#x27;1.0.0-SNAPSHOT&#x27;</span><br><br>solc&#123;<br>    output = <span class="hljs-string">&#x27;src/main/resources&#x27;</span><br>    onlyAbiBin = <span class="hljs-keyword">true</span><br>&#125;<br><br><br><span class="hljs-keyword">repositories</span> &#123;<br>    mavenLocal()<br>    mavenCentral()<br>    maven &#123; url <span class="hljs-string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span>&#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span> &#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://dl.bintray.com/ethereum/maven/&quot;</span> &#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/service/local/staging/deploy/maven2&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-keyword">configurations</span> &#123;<br>    compileOnly &#123;<br>        extendsFrom annotationProcessor<br>    &#125;<br>    all &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">dependencies</span> &#123;<br><br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;org.slf4j:slf4j-api:1.7.5&#x27;</span><br>    compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    annotationProcessor <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    testCompile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;<br>        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;org.junit.vintage&#x27;</span>, module: <span class="hljs-string">&#x27;junit-vintage-engine&#x27;</span><br>    &#125;<br>    testImplementation <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-api:5.6.1&#x27;</span><br>    testRuntimeOnly <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.6.1&#x27;</span><br>    <span class="hljs-keyword">compile</span> (<span class="hljs-string">&#x27;org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:2.7.2&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;org.slf4j&#x27;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">sourceSets</span> &#123;<br>    main &#123;<br>        java &#123;<br>            srcDir <span class="hljs-string">&#x27;src/main/java&#x27;</span><br>        &#125;<br>        resources  &#123;<br>            srcDir <span class="hljs-string">&#x27;src/main/resources&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>test &#123;<br>    useJUnitPlatform()<br>&#125;<br><br>bootJar &#123;<br>    <span class="hljs-keyword">destinationDir</span> <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;dist&#x27;</span>)<br>    archiveName <span class="hljs-keyword">project</span>.name + <span class="hljs-string">&#x27;-exec.jar&#x27;</span><br>    <span class="hljs-keyword">doLast</span> &#123;<br>        <span class="hljs-keyword">copy</span> &#123;<br>            <span class="hljs-keyword">from</span> <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;src/main/resources&#x27;</span>)<br>            <span class="hljs-keyword">into</span> <span class="hljs-string">&#x27;dist&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>clean &#123;<br>    <span class="hljs-keyword">println</span> <span class="hljs-string">&quot;delete $&#123;projectDir&#125;/dist&quot;</span><br>    <span class="hljs-keyword">delete</span> <span class="hljs-string">&quot;$&#123;projectDir&#125;/dist&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="04.png" alt="java代码结构"></p><h3 id="5-1-config目录"><a href="#5-1-config目录" class="headerlink" title="5.1 config目录"></a>5.1 config目录</h3><p>config目录主要解析application.properties文档中的配置内容。<br>SystemConfig.java,读取群组Id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemConfig</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> groupId = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">private</span> String hexPrivateKey;<br>&#125;<br><br><span class="hljs-comment">//对应的配置文件</span><br>### System configuration<br>system.groupId=<span class="hljs-number">1</span><br>system.privateKey=<br></code></pre></td></tr></table></figure><p>ContractConfig.java 读取合约部署在FISCO BCOS上的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractConfig</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String helloWorldAddress;<br>&#125;<br><br>### Contract configuration<br>contract.helloWorldAddress=<span class="hljs-number">0xe6a6140ae78fd31056acdee9fb0472be3213c5ef</span><br><br><br><br></code></pre></td></tr></table></figure><p>BcosConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; cryptoMaterial;<br>    <span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; network;<br>    <span class="hljs-keyword">public</span> List&lt;AmopTopic&gt; amop;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; account;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; threadPool;<br>&#125;<br><br><span class="hljs-comment">//加密材料的目录,网络的rpc通讯节点</span><br>### Java sdk configuration<br>bcos.cryptoMaterial.certPath=conf<br>bcos.network.peers=<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span>:<span class="hljs-number">20200</span>,<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span>:<span class="hljs-number">20201</span><br></code></pre></td></tr></table></figure><h3 id="5-2-constants目录"><a href="#5-2-constants目录" class="headerlink" title="5.2 constants目录"></a>5.2 constants目录</h3><p>ContractConstants.java  合约常量,读取abi地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.constants;<br><br><span class="hljs-keyword">import</span> java.lang.Exception;<br><span class="hljs-keyword">import</span> java.lang.RuntimeException;<br><span class="hljs-keyword">import</span> java.lang.String;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractConstants</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldAbi;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldBinary;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldGmBinary;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      HelloWorldAbi = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;abi/HelloWorld.abi&quot;</span>));<br>      HelloWorldBinary = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;bin/ecc/HelloWorld.bin&quot;</span>));<br>      HelloWorldGmBinary = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;bin/sm/HelloWorld.bin&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>    &#125;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>如果有新的合约，可以在这里调用</p><h3 id="5-3-model包"><a href="#5-3-model包" class="headerlink" title="5.3 model包"></a>5.3 model包</h3><p>CommonResponse.java 通用响应,接口返回结果封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.model;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResponse</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OK = <span class="hljs-string">&quot;0&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResponse <span class="hljs-title">ok</span><span class="hljs-params">(Object data)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResponse(OK, <span class="hljs-string">&quot;&quot;</span>,data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResponse <span class="hljs-title">fail</span><span class="hljs-params">(String code, Exception ex)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResponse(code, ex.getMessage(), <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>HelloWorldSetInputBO.java   因为有一个set方法需要传入参数，因此封装传入参数的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.model.bo;<br><br><span class="hljs-keyword">import</span> java.lang.Object;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldSetInputBO</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String n;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">toArgs</span><span class="hljs-params">()</span> </span>&#123;<br>    List args = <span class="hljs-keyword">new</span> ArrayList();<br>    args.add(n);<br>    <span class="hljs-keyword">return</span> args;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="5-4-service包"><a href="#5-4-service包" class="headerlink" title="5.4 service包"></a>5.4 service包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.service;<br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.constants.ContractConstants;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> java.lang.Exception;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.manager.AssembleTransactionProcessor;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.manager.TransactionProcessorFactory;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.dto.CallResponse;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.dto.TransactionResponse;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldService</span> </span>&#123;<br>  <span class="hljs-meta">@Value(&quot;$&#123;contract.helloWorldAddress&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Client client;<br><br>  AssembleTransactionProcessor txProcessor;<br><br>  <span class="hljs-meta">@PostConstruct</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">this</span>.txProcessor = TransactionProcessorFactory.createAssembleTransactionProcessor(<span class="hljs-keyword">this</span>.client, <span class="hljs-keyword">this</span>.client.getCryptoSuite().getCryptoKeyPair());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> TransactionResponse <span class="hljs-title">set</span><span class="hljs-params">(HelloWorldSetInputBO input)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.txProcessor.sendTransactionAndGetResponse(<span class="hljs-keyword">this</span>.address, ContractConstants.HelloWorldAbi, <span class="hljs-string">&quot;set&quot;</span>, input.toArgs());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> CallResponse <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.txProcessor.sendCall(<span class="hljs-keyword">this</span>.client.getCryptoSuite().getCryptoKeyPair().getAddress(), <span class="hljs-keyword">this</span>.address, ContractConstants.HelloWorldAbi, <span class="hljs-string">&quot;get&quot;</span>, Arrays.asList());<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-5-controller包"><a href="#5-5-controller包" class="headerlink" title="5.5 controller包"></a>5.5 controller包</h3><p>业务逻辑: 调用service中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.controller;<br><br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.service.HelloWorldService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldService helloWorldService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;set&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;n&quot;)</span> String n)</span> <span class="hljs-keyword">throws</span>  Exception</span>&#123;<br>        HelloWorldSetInputBO input = <span class="hljs-keyword">new</span> HelloWorldSetInputBO(n);<br>        <span class="hljs-keyword">return</span> helloWorldService.set(input).getTransactionReceipt().getTransactionHash();<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> helloWorldService.get().getValues();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>基本逻辑完成</p><h2 id="6-Asset合约，涉及msg-sender的合约"><a href="#6-Asset合约，涉及msg-sender的合约" class="headerlink" title="6 Asset合约，涉及msg.sender的合约"></a>6 Asset合约，涉及msg.sender的合约</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs s">pragma solidity ^0.4.25;<br><br>contract Asset &#123;<br>    address public issuer;<br>    mapping (address =&gt; uint) public balances;<br><br>    event Sent(address from, address to, uint amount);<br><br>    constructor() &#123;<br>        issuer = msg.sender;<br>    &#125;<br><br>    function issue(address receiver, uint amount) public &#123;<br>        if (msg.sender != issuer) return;<br>        balances[receiver] += amount;<br>    &#125;<br><br>    function send(address receiver, uint amount) public &#123;<br>        if (balances[msg.sender] &lt; amount) return;<br>        balances[msg.sender] -= amount;<br>        balances[receiver] += amount;<br>        emit Sent(msg.sender, receiver, amount);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>TODO:</p><ul><li>1 部署之后，在FISCO BCOS中获取了合约地址，使用java sdk，编译成java代码，在调用的时候回检查 已部署合约的调用者的地址,<br>  这里要求的都是msg.sender == issuer,<br>  <img src="05.png" alt="合约部署"><br>  如何在java工程中配置工作账户？</li></ul><p>解决方案:</p><ul><li><p>1 在application.properties中增加账户文件地址:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">### System configuration</span><br><span class="hljs-attribute">system</span>.groupId=<span class="hljs-number">1</span><br><span class="hljs-attribute">system</span>.privateKey=<br><span class="hljs-attribute">system</span>.hexPrivateKey=<span class="hljs-number">0</span>xe<span class="hljs-number">45059851</span>df<span class="hljs-number">184</span>dd<span class="hljs-number">36</span>e<span class="hljs-number">069</span>d<span class="hljs-number">4671522052</span>c<span class="hljs-number">8988</span>a<span class="hljs-number">9</span> # 这个配置属性无效，或者说没有找到合适的使用方式<br><span class="hljs-attribute">system</span>.accountPath=E:\\project\\fisco_project\\fiscodemoasset\\src\\main\\resources\\conf\\<span class="hljs-number">0</span>xe<span class="hljs-number">45059851</span>df<span class="hljs-number">184</span>dd<span class="hljs-number">36</span>e<span class="hljs-number">069</span>d<span class="hljs-number">4671522052</span>c<span class="hljs-number">8988</span>a<span class="hljs-number">9</span>.pem<br><br><br></code></pre></td></tr></table></figure></li><li><p>2 修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configCryptoKeyPair</span><span class="hljs-params">(Client client)</span> <span class="hljs-keyword">throws</span> ConfigException </span>&#123;<br><span class="hljs-comment">//        if(systemConfig.getHexPrivateKey() == null || systemConfig.getHexPrivateKey().isEmpty())&#123;</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        if(systemConfig.getHexPrivateKey().startsWith(&quot;0x&quot;) || systemConfig.getHexPrivateKey().startsWith(&quot;0X&quot;))&#123;</span><br><span class="hljs-comment">//            systemConfig.setHexPrivateKey(systemConfig.getHexPrivateKey().substring(2));</span><br><span class="hljs-comment">//        &#125;</span><br><br><br>        client.getCryptoSuite().loadAccount(<span class="hljs-string">&quot;pem&quot;</span>,systemConfig.getAccountPath(),<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">//        client.getCryptoSuite().setCryptoKeyPair(client.getCryptoSuite().createKeyPair(systemConfig.getHexPrivateKey()));</span><br>    &#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>3 测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1:8080/asset/issue?receiver=0xf9c75f92388cf87a65281155a0afe913b09ca2f6&amp;amount=10000<br><br>返回: 0x6d2e5b3d867ea80bda5f2af260689866bd3519c21fd366c6bab3bf8b2ce8783c<br><br>http://127.0.0.1:8080/asset/balance?address=0xf9c75f92388cf87a65281155a0afe913b09ca2f6<br><br>返回: [10000]<br><br><br><br></code></pre></td></tr></table></figure><p><img src="%E4%BA%A4%E6%98%93%E8%B4%A6%E6%88%B7.png" alt="交易账户"></p></li></ul><p>基本完成了。。。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>应用开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-运维部署工具"><a href="#1-运维部署工具" class="headerlink" title="1 运维部署工具"></a>1 运维部署工具</h2><h3 id="1-1-一键部署"><a href="#1-1-一键部署" class="headerlink" title="1.1 一键部署"></a>1.1 一键部署</h3><p>one_click_generator.sh脚本为根据用户填写的节点配置，一键部署联盟链的脚本。脚本会根据用户指定文件夹下配置的node_deployment.ini，在文件夹下生成相应的节点。</p><p>构建3个机构，2个群组，6个节点的组网模式，了解机构一键部署运维工具的使用方法。</p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p><strong>下载</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~/ <br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/FISCO-BCOS/g</span>enerator.git<br><br><span class="hljs-comment"># 若因为网络问题导致长时间无法下载，请尝试以下命令：</span><br>git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/FISCO-BCOS/g</span>enerator.git<br><br><br>cd ~<span class="hljs-regexp">/generator &amp;&amp; bash ./</span>scripts/install.sh<br><br><span class="hljs-comment">## 检查是否安装成功，若成功，输出 usage: generator xxx</span><br>./generator -h<br></code></pre></td></tr></table></figure><p><strong>获取节点二进制</strong><br>下载fisco-bcos最新二进制文件到meta中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/generator --download_fisco ./m</span>eta<br><br>.<span class="hljs-regexp">/meta/</span>fisco-bcos -v  <span class="hljs-comment"># 输出版本即成功</span><br></code></pre></td></tr></table></figure><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>部署3机构2群组6节点的组网模式。</p><p><strong>节点组网拓扑结构</strong><br><img src="%E6%8B%93%E6%89%91.png" alt="节点拓扑"></p><p><strong>机器环境</strong></p><table><thead><tr><th>机构</th><th>节点</th><th>所属群组</th><th>P2P地址</th><th>RPC</th><th>Channel监听地址</th></tr></thead><tbody><tr><td>机构A</td><td>节点0</td><td>群组1,2</td><td>127.0.0.1:30300</td><td>127.0.0.1:8545</td><td>0.0.0.:20200</td></tr><tr><td>机构A</td><td>节点1</td><td>群组1,2</td><td>127.0.0.1:30301</td><td>127.0.0.1:8546</td><td>0.0.0.:20201</td></tr><tr><td>机构A</td><td>节点4</td><td>群组1,2</td><td>127.0.0.1:30304</td><td>127.0.0.1:8549</td><td>0.0.0.:20202</td></tr><tr><td>机构B</td><td>节点2</td><td>群组1</td><td>127.0.0.1:30302</td><td>127.0.0.1:8547</td><td>0.0.0.:20203</td></tr><tr><td>机构B</td><td>节点3</td><td>群组1</td><td>127.0.0.1:30303</td><td>127.0.0.1:8548</td><td>0.0.0.:20204</td></tr><tr><td>机构C</td><td>节点5</td><td>群组1,2</td><td>127.0.0.1:30305</td><td>127.0.0.1:8550</td><td>0.0.0.:20205</td></tr></tbody></table><h4 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h4><p>在tmp_one_click文件夹下是机构的配置位置，每个机构目录下需要有对应的配置文件node_deployment.ini. 使用前需要保证generator的meta文件夹没有进行过任何操作。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 参数解释</span><br><span class="hljs-comment"># 如需多个机构，需要手动创建该文件夹</span><br>tmp_one_click <span class="hljs-comment"># 用户指定进行一键部署操作的文件夹</span><br>├── agencyA <span class="hljs-comment"># 机构A目录，命令执行后会在该目录下生成机构A的节点及相关文件</span><br>│   └── node_deployment.ini <span class="hljs-comment"># 机构A节点配置文件，一键部署命令会根据该文件生成相应节点</span><br>└── agencyB <span class="hljs-comment"># 机构B目录，命令执行后会在该目录下生成机构B的节点及相关文件</span><br>    └── node_deployment.ini <span class="hljs-comment"># 机构B节点配置文件，一键部署命令会根据该文件生成相应节点</span><br><br></code></pre></td></tr></table></figure><p> cat node_deployment.ini<br> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[group]</span><br><span class="hljs-attr">group_id</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment">; Owned nodes</span><br><span class="hljs-section">[node0]</span><br><span class="hljs-comment">; host ip for the communication among peers.</span><br><span class="hljs-comment">; Please use your ssh login ip.</span><br><span class="hljs-attr">p2p_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-comment">; listen ip for the communication between sdk clients.</span><br><span class="hljs-comment">; This ip is the same as p2p_ip for physical host.</span><br><span class="hljs-comment">; But for virtual host e.g. vps servers, it is usually different from p2p_ip.</span><br><span class="hljs-comment">; You can check accessible addresses of your network card.</span><br><span class="hljs-comment">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-comment">; for more instructions.</span><br><span class="hljs-attr">rpc_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">channel_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">p2p_listen_port</span>=<span class="hljs-number">30300</span><br><span class="hljs-attr">channel_listen_port</span>=<span class="hljs-number">20200</span><br><span class="hljs-attr">jsonrpc_listen_port</span>=<span class="hljs-number">8545</span><br><br><span class="hljs-section">[node1]</span><br><span class="hljs-attr">p2p_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">rpc_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">channel_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">p2p_listen_port</span>=<span class="hljs-number">30301</span><br><span class="hljs-attr">channel_listen_port</span>=<span class="hljs-number">20201</span><br><span class="hljs-attr">jsonrpc_listen_port</span>=<span class="hljs-number">8546</span><br></code></pre></td></tr></table></figure></p><h5 id="生成节点"><a href="#生成节点" class="headerlink" title="生成节点"></a>生成节点</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">bash ./one_click_generator.sh -b ./tmp_one_click<br><br>ls ./tmp_one_click<br><br>├── agencyA <span class="hljs-comment"># A机构文件夹</span><br>│   ├── agency_cert <span class="hljs-comment"># A机构证书及私钥</span><br>│   ├── generator-agency <span class="hljs-comment"># 自动代替A机构进行操作的generator文件夹</span><br>│   ├── <span class="hljs-keyword">node</span> <span class="hljs-title"># A</span>机构生成的节点，多机部署时推送至对应服务器即可<br>│   ├── node_deployment.ini <span class="hljs-comment"># A机构的节点配置信息</span><br>│   └── sdk <span class="hljs-comment"># A机构的sdk或控制台配置文件</span><br>├── agencyB<br>|   ├── agency_cert<br>|   ├── generator-agency<br>|   ├── <span class="hljs-keyword">node</span><br><span class="hljs-title">|   ├── node_deployment</span>.ini<br>|   └── sdk<br>|── ca.crt <span class="hljs-comment"># 链证书</span><br>|── ca.key <span class="hljs-comment"># 链私钥</span><br>|── group.<span class="hljs-number">1</span>.genesis <span class="hljs-comment"># 群组1创世区块</span><br>|── peers.txt <span class="hljs-comment"># 节点的peers.txt信息</span><br><br></code></pre></td></tr></table></figure><h5 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> ./tmp_one_click/agencyA/node/start_all.sh<br><span class="hljs-attribute">bash</span> ./tmp_one_click/agencyB/node/start_all.sh<br><br><br><span class="hljs-attribute">root</span>     <span class="hljs-number">18650</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30301</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18651</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30300</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18911</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30302</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18913</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30303</span>/fisco-bcos -c config.ini<br></code></pre></td></tr></table></figure><p>目前已经完成了机构A-节点0，机构A-节点1，机构B-节点2，机构B-节点3的创建，全部属于群组1，还需要节点4，节点5 的扩容</p><h4 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h4><p><strong>初始化扩容配置</strong><br>创建扩容文件夹，任意名称  tmp_one_click_expand，每次扩容都使用新的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 创建文件</span><br>mkdir ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(2) 拷贝链证书及私钥至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/ca.* ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(3) 拷贝群组1创世区块group.1.genesis至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/group.1.genesis ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(4) 拷贝群组1节点P2P连接文件peers.txt至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/peers.txt ~/generator/tmp_one_click_expand/<br><br></code></pre></td></tr></table></figure><p><strong>机构A配置节点信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (1) 创建机构A扩容节点所在目录</span><br>mkdir ~/generator/tmp_one_click_expand/agencyA<br><br><span class="hljs-comment">#(2) 此时机构A已经存在联盟链中，因此需拷贝机构A证书、私钥至对应文件夹</span><br>cp -r ~/generator/tmp_one_click/agencyA/agency_cert ~/generator/tmp_one_click_expand/agencyA<br><br><span class="hljs-comment">#(3) 机构A填写节点配置信息</span><br>cat &gt; ./tmp_one_click_expand/agencyA/node_deployment.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[node0]</span><br><span class="hljs-string">; Host IP for the communication among peers.</span><br><span class="hljs-string">; Please use your ssh login IP.</span><br><span class="hljs-string">p2p_ip=127.0.0.1</span><br><span class="hljs-string">; listening IP for the communication between SDK clients.</span><br><span class="hljs-string">; This IP is the same as p2p_ip for the physical host.</span><br><span class="hljs-string">; But for virtual host e.g., VPS servers, it is usually different from p2p_ip.</span><br><span class="hljs-string">; You can check accessible addresses of your network card.</span><br><span class="hljs-string">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-string">; for more instructions.</span><br><span class="hljs-string">rpc_ip=127.0.0.1</span><br><span class="hljs-string">channel_ip=0.0.0.0</span><br><span class="hljs-string">p2p_listen_port=30304</span><br><span class="hljs-string">channel_listen_port=20204</span><br><span class="hljs-string">jsonrpc_listen_port=8549</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h5 id="机构C配置节点信息"><a href="#机构C配置节点信息" class="headerlink" title="机构C配置节点信息"></a>机构C配置节点信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 创建机构C扩容节点所在目录</span><br>mkdir ~/generator/tmp_one_click_expand/agencyC<br><br><br><span class="hljs-comment">#(2) 机构C填写节点配置信息</span><br>cat &gt; ./tmp_one_click_expand/agencyC/node_deployment.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[node0]</span><br><span class="hljs-string">; Host IP for the communication among peers.</span><br><span class="hljs-string">; Please use your ssh login IP.</span><br><span class="hljs-string">p2p_ip=127.0.0.1</span><br><span class="hljs-string">; listening IP for the communication between SDK clients.</span><br><span class="hljs-string">; This IP is the same as p2p_ip for the physical host.</span><br><span class="hljs-string">; But for virtual host e.g., VPS servers, it is usually different from p2p_ip.</span><br><span class="hljs-string">; You can check accessible addresses of your network card.</span><br><span class="hljs-string">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-string">; for more instructions.</span><br><span class="hljs-string">rpc_ip=127.0.0.1</span><br><span class="hljs-string">channel_ip=0.0.0.0</span><br><span class="hljs-string">p2p_listen_port=30305</span><br><span class="hljs-string">channel_listen_port=20205</span><br><span class="hljs-string">jsonrpc_listen_port=8550</span><br><span class="hljs-string">EOF</span><br><br><br><br><br></code></pre></td></tr></table></figure><h5 id="生成扩容节点"><a href="#生成扩容节点" class="headerlink" title="生成扩容节点"></a>生成扩容节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>bash ./one_click_generator.sh   -e ./tmp_one_click_expand<br><br><br>[root@cz-ambari-slave-0003 tmp_one_click_expand]<span class="hljs-comment"># tree -L 3</span><br>.<br>├── agencyA<br>│   ├── agency_cert<br>│   │   ├── agency.crt<br>│   │   ├── agency.key<br>│   │   └── ca.crt<br>│   ├── generator-agency<br>│   │   ├── Changelog.md<br>│   │   ├── conf<br>│   │   ├── CONTRIBUTING.md<br>│   │   ├── doc<br>│   │   ├── generator<br>│   │   ├── LICENSE<br>│   │   ├── <span class="hljs-built_in">log</span><br>│   │   ├── meta<br>│   │   ├── node_send<br>│   │   ├── one_click_generator.sh<br>│   │   ├── pys<br>│   │   ├── README.md<br>│   │   ├── release_note.txt<br>│   │   ├── requirements.txt<br>│   │   ├── scripts<br>│   │   ├── tmp_one_click<br>│   │   └── tpl<br>│   ├── node<br>│   │   ├── monitor<br>│   │   ├── node_127.0.0.1_30304<br>│   │   ├── scripts<br>│   │   ├── start_all.sh<br>│   │   └── stop_all.sh<br>│   ├── node_deployment.ini<br>│   └── sdk<br>│       ├── applicationContext.xml<br>│       ├── ca.crt<br>│       ├── node.crt<br>│       ├── node.key<br>│       ├── sdk.crt<br>│       └── sdk.key<br>├── agencyC<br>│   ├── agency_cert<br>│   │   ├── agency.crt<br>│   │   ├── agency.key<br>│   │   └── ca.crt<br>│   ├── generator-agency<br>│   │   ├── Changelog.md<br>│   │   ├── conf<br>│   │   ├── CONTRIBUTING.md<br>│   │   ├── doc<br>│   │   ├── generator<br>│   │   ├── LICENSE<br>│   │   ├── <span class="hljs-built_in">log</span><br>│   │   ├── meta<br>│   │   ├── node_send<br>│   │   ├── one_click_generator.sh<br>│   │   ├── pys<br>│   │   ├── README.md<br>│   │   ├── release_note.txt<br>│   │   ├── requirements.txt<br>│   │   ├── scripts<br>│   │   ├── tmp_one_click<br>│   │   └── tpl<br>│   ├── node<br>│   │   ├── monitor<br>│   │   ├── node_127.0.0.1_30305<br>│   │   ├── scripts<br>│   │   ├── start_all.sh<br>│   │   └── stop_all.sh<br>│   ├── node_deployment.ini<br>│   └── sdk<br>│       ├── applicationContext.xml<br>│       ├── ca.crt<br>│       ├── node.crt<br>│       ├── node.key<br>│       ├── sdk.crt<br>│       └── sdk.key<br>├── ca.crt<br>├── ca.key<br>├── ca.srl<br>├── group.1.genesis<br>└── peers.txt<br></code></pre></td></tr></table></figure><h5 id="启动新节点"><a href="#启动新节点" class="headerlink" title="启动新节点"></a>启动新节点</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash .<span class="hljs-regexp">/tmp_one_click_expand/</span>agencyA<span class="hljs-regexp">/node/</span>start_all.sh<br>bash .<span class="hljs-regexp">/tmp_one_click_expand/</span>agencyC<span class="hljs-regexp">/node/</span>start_all.sh<br></code></pre></td></tr></table></figure><p>查看节点进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>     <span class="hljs-number">18650</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30301</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18651</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30300</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18911</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30302</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18913</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30303</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">27860</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click_expand/agencyC/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30305</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">27995</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click_expand/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30304</span>/fisco-bcos -c config.ini<br><br></code></pre></td></tr></table></figure><p>Tips: 为群组1扩容的新节点需要使用sdk或控制台加入到群组中。</p><h4 id="使用控制台注册节点"><a href="#使用控制台注册节点" class="headerlink" title="使用控制台注册节点"></a>使用控制台注册节点</h4><p>以机构A使用控制台为例，此步需要切换到机构A对应的generator-agency文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/generator/tmp_one_click/agencyA/generator-agency<br>./generator --download_console ./ --cdn<br><br></code></pre></td></tr></table></figure><h5 id="查看机构A节点4"><a href="#查看机构A节点4" class="headerlink" title="查看机构A节点4"></a>查看机构A节点4</h5><p>机构A使用控制台加入架构A节点4为共识节点，其中参数第二项需要在conf的node.nodeid中找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat ~/generator/tmp_one_click_expand/agencyA/node/node_127.0.0.1_30304/conf/node.nodeid<br>&gt;&gt;&gt;  4b784ca0c48ba62ded1875c7560ca6ece5643e4114620d5c2c3c5d3353c89ffbc60b02203b5a528ef2da6acbf9be96170e16b1ee94bc6c416f2b2d56362311a7<br><br><span class="hljs-comment"># 启动控制台</span><br><span class="hljs-built_in">cd</span> ~/generator/tmp_one_click/agencyA/generator-agency/console &amp;&amp; bash ./start.sh 1<br><br>addSealer nodeid<br><br><span class="hljs-comment"># 执行成功显示success</span><br><br></code></pre></td></tr></table></figure><h5 id="查看机构C节点5"><a href="#查看机构C节点5" class="headerlink" title="查看机构C节点5"></a>查看机构C节点5</h5><p>机构A使用控制台加入机构C的节点5为观察节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 节点5的nodeid</span><br>fc0e7b59508b3fb9a1be5325052a1f339e0b432285997b08679f7c51280e6de06ab4b40bd2ac37334d9371f69d7d64a4258bd60337a6fd4becf8770b59c9f920<br><br><span class="hljs-comment">#(2) 在agencyA的控制台中将节点注册为观察节点</span><br>addObserver nodeid<br><br></code></pre></td></tr></table></figure><p>至此，我们完成了新增节点至现有群组的操作。</p><h4 id="新增群组-扩容新群组"><a href="#新增群组-扩容新群组" class="headerlink" title="新增群组(扩容新群组)"></a>新增群组(扩容新群组)</h4><p>新增群组的操作在one_click_generator.sh脚本的目录下，修改./conf/group_genesis.ini文件，并执行–create_group_genesis命令。<br>为如图4个节点生成群组2</p><p><img src="%E6%8B%93%E6%89%91.png" alt="群组2"></p><h5 id="配置群组2创世区块"><a href="#配置群组2创世区块" class="headerlink" title="配置群组2创世区块"></a>配置群组2创世区块</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; ./conf/group_genesis.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=2</span><br><span class="hljs-string"></span><br><span class="hljs-string">[nodes]</span><br><span class="hljs-string">node0=127.0.0.1:30300</span><br><span class="hljs-string">node1=127.0.0.1:30301</span><br><span class="hljs-string">node2=127.0.0.1:30304</span><br><span class="hljs-string">node3=127.0.0.1:30305</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment">## (1) 获取对应节点证书  结构A-节点0证书 (node0=127.0.0.1:30300)  pwd=meta</span><br>cp ../tmp_one_click/agencyA/generator-agency/meta/cert_127.0.0.1_30300.crt .<br><br><span class="hljs-comment">## (2) 机构A-节点1（node1=127.0.0.1:30301）</span><br><span class="hljs-comment">## 机构A-节点4（node2=127.0.0.1:30304）</span><br><span class="hljs-comment">## 机构C-节点5（node3=127.0.0.1:30305）</span><br><br><span class="hljs-comment">## (3) 生成创世区块</span><br>./generator --create_group_genesis ./group2<br><br><br><span class="hljs-comment">## (4) 将群组创世区块加入现有节点：</span><br>./generator --add_group ./group2/group.2.genesis ./tmp_one_click/agencyA/node/node_127.0.0.1_30300<br><span class="hljs-comment">## 其他的3个都加入</span><br></code></pre></td></tr></table></figure><h5 id="加载、启动新群组"><a href="#加载、启动新群组" class="headerlink" title="加载、启动新群组"></a>加载、启动新群组</h5><p>节点在运行时，可直接用脚本load_new_groups.sh加载新群组配置，并调用startGroupRPC接口启动新群组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#(1) 机构A-节点0</span><br>bash ./tmp_one_click/agencyA/node/node_127.0.0.1_30300/scripts/load_new_groups.sh<br>curl -X POST --data <span class="hljs-string">&#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27;</span> http://127.0.0.1:8545<br><br><br><br><span class="hljs-comment">## 整体</span><br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click/agencyA/node/node_127.0.0.1_30301/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30301 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8546</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click_expand/agencyA/node/node_127.0.0.1_30304/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30304 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8549</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click_expand/agencyC/node/node_127.0.0.1_30305/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30305 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8550</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>查看节点</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">tail -f ~<span class="hljs-regexp">/generator/</span>tmp_one_click<span class="hljs-regexp">/agency*/</span>node<span class="hljs-regexp">/node*/</span>log/log* | <span class="hljs-keyword">grep</span> g:<span class="hljs-number">2</span> | <span class="hljs-keyword">grep</span> +++<br></code></pre></td></tr></table></figure><p>至此 我们完成了所示构建教程中的所有操作。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-1-基础认知及操作</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-1-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-1-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>B-2-区块链应用-应用开发</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="区块链初级应用开发"><a href="#区块链初级应用开发" class="headerlink" title="区块链初级应用开发"></a>区块链初级应用开发</h2><h3 id="智能合约的重点"><a href="#智能合约的重点" class="headerlink" title="智能合约的重点"></a>智能合约的重点</h3><p><strong>01 函数</strong><br>函数中的参数必须明确指定为memory类型</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Equal(<span class="hljs-params">string</span> <span class="hljs-params">memory</span> <span class="hljs-params">a</span>, <span class="hljs-params">string</span> <span class="hljs-params">memory</span> <span class="hljs-params">b</span>)</span> public view returns (<span class="hljs-built_in">bool</span>)<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>02 付款</strong><br>操作：向智能合约内充钱</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deposit</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>代码这样就可以了，good<br>唯一强调的是payable，凡是涉及ether转移的，函数或地址都需要增加payable修饰符，代表可以支付，行为可以发生。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">address payable <span class="hljs-keyword">public</span> tuhao ;<span class="hljs-comment">//这里是地址增加payable，代表可以操作eth</span><br></code></pre></td></tr></table></figure><p>合约部署之后会形成一个地址，这个地址和账户地址的格式是一样的，在以太坊网络中，合约地址是一种特殊的账户地址，可以像普通账户一样节后转账交易。<br>对于deposit函数，我们没有在函数内部实现任何逻辑，但是调用的时候，msg（在合约调用时传递过来的信息），msg.value（所携带信息中wei的数量）已经被合约地址给接收了，就是合约是给钱就收到。</p><p><img src="01.png" alt="payable"></p><p>查询余额</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> <span class="hljs-params">(uint256)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> address(<span class="hljs-keyword">this</span>).balance;<span class="hljs-comment">//this是合约,address(this)获取合约地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>03 函数修饰符<br>public 权限最大，private权限最小。<br>蓝色：只读函数，使用view关键字，该类函数不允许修改状态变量，调用时不会消耗gas<br>橘红色: 写函数，该类函数会修改状态变量的值，调用时会消耗gas<br>红色: 可支付函数，该类函数涉及资产转移，必须加payable关键字，调用时会消耗gas<br><img src="02.png" alt="修饰符"></p><p>复合类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mapping</span><span class="hljs-params">(address=&gt;string)</span></span> public addr_names<br></code></pre></td></tr></table></figure><p>断言处理与自定义修饰符</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-built_in">function</span> <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">bool</span> cool_expr)<br><span class="hljs-built_in">function</span> require(<span class="hljs-built_in">bool</span> cond_expr,<span class="hljs-built_in">string</span> msg)<br></code></pre></td></tr></table></figure><p>assert 和 require 都是断言函数，断定某件事情一定成立，否则智能合约就会发生回退。 区别： 第一，原型函数不同，assert只需要传入一个条件表达式，而require则需要传入条件表达式和异常信息(也可以不用传递)两个参数； 第二，当condexpr为假时，虽然二者都会回退，但是assert处理的方式较为过激，他会通过扣光剩余gas的方式惩罚调用者(gas limit是多少，就会扣掉多少)，require则会把剩余的gas返回给调用者。</p><p>require相对温和。因此推荐大多数时候使用require，不过也并不代表assert完全无用。 assert的场景多事作内部判断，尤其是与状态变量无关的判断多使用assert，另外assert还有一个很好的作用是测试，在商用前可以使用assert尽可能的测试合约错误， 一旦assert扣光gas了，代表我们认为的不会发生的事情发生了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">//充值功能</span><br>function deposit(uint256 <span class="hljs-variable">_amount</span>)  public payable &#123;<br>    require(msg.value == <span class="hljs-variable">_amount</span>, <span class="hljs-string">&quot;msg value must equal _amount&quot;</span>);<br><br>    <span class="hljs-built_in">assert</span>(<span class="hljs-variable">_amount</span> &gt;<span class="hljs-number">0</span>);<br>    amount += <span class="hljs-variable">_amount</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>modifier 可以将一些断言判断封装、组合为我们的业务需求，方便在其他函数中使用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义修饰符</span><br>modifier <span class="hljs-function"><span class="hljs-title">onlyadmin</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">require</span>(admin == msg.sender,<span class="hljs-string">&quot;only admin can do this&quot;</span>);<br>    _; <span class="hljs-comment">// 占位符号，标志modifier的结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>传递方式：<br>值传递时，使用memory修饰变量，引用传递时用storage修饰变量</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br><br>//值传递和引用传递<br>contract storage_demo&#123;<br>    //自定义结构<br>    struct <span class="hljs-keyword">User</span>&#123;<br>        string <span class="hljs-type">name</span>;<br>        uint256 age;<br>    &#125;<br><br>    <span class="hljs-keyword">User</span> <span class="hljs-built_in">public</span> adminUser;<br><br>    constructor() <span class="hljs-built_in">public</span>&#123;<br>        adminUser.name = &quot;jackniu&quot;;<br>        adminUser.age = <span class="hljs-number">40</span>;<br>    &#125;<br><br>    //值传递,adminUser的age不会被修改<br>    <span class="hljs-keyword">function</span> setAge(uint256 _age) <span class="hljs-built_in">public</span> &#123;<br>        //值传递，<span class="hljs-keyword">user</span>是adminUser的拷贝<br>        <span class="hljs-keyword">User</span> memory <span class="hljs-keyword">user</span> = adminUser;<br>        <span class="hljs-keyword">user</span>.age = _age;<br>    &#125;<br><br>    //引用传递，adminUser的age会被修改<br>    <span class="hljs-keyword">function</span> setAge2(uint256 _age) <span class="hljs-built_in">public</span> &#123;<br>        //引用传递，<span class="hljs-keyword">user</span>就是adminUser<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">storage</span> <span class="hljs-keyword">user</span> = adminUser;<br>        <span class="hljs-keyword">user</span>.age = _age;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="抢红包"><a href="#抢红包" class="headerlink" title="抢红包"></a>抢红包</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs zephir">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br>contract redpacket&#123;<br>    address payable <span class="hljs-keyword">public</span> tuhao;<br>    <span class="hljs-keyword">uint</span> <span class="hljs-keyword">public</span> number; <span class="hljs-comment">//红包数量</span><br><br>    <span class="hljs-comment">//构造函数，携带msg.values</span><br>    constructor(<span class="hljs-keyword">uint</span> _number) payable <span class="hljs-keyword">public</span> &#123;<br>        tuhao = payable(msg.sender);<br>        number = _number;<br>    &#125;<br><br><br>    <span class="hljs-comment">//获取余额</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> <span class="hljs-params">(<span class="hljs-keyword">uint</span>)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> address(this).balance;<br>    &#125;<br><br>    <span class="hljs-comment">//抢红包</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stakeMoney</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span> <span class="hljs-title">returns</span> <span class="hljs-params">(<span class="hljs-keyword">bool</span>)</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(number &gt;<span class="hljs-number">0</span> );<br>        <span class="hljs-keyword">require</span>(getBalance() &gt;<span class="hljs-number">0</span>);  <span class="hljs-comment">//还有红包，余额不为0</span><br><br>        number--;<br><br>        <span class="hljs-comment">//抢到的红包金额采用随机的方式，获取一个随机数</span><br>        <span class="hljs-keyword">uint</span> random = <span class="hljs-keyword">uint</span>(keccak256(abi.encode(block.timestamp,msg.sender,<span class="hljs-string">&quot;tuhao&quot;</span>))) %<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">uint</span> balance = getBalance();<br><br>        <span class="hljs-comment">//将钱打给抢到红包的人 , transfer==get</span><br>        payable (msg.sender).transfer(balance * random /<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br><br>    &#125;<br>    <span class="hljs-comment">// function selfdestruct(address user) 销毁合约，user代表销毁合约的受益人，如果合约内存在资产，将他们打给user</span><br><br>    <span class="hljs-comment">//销毁合约</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kill</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> </span>&#123;<br>        <span class="hljs-keyword">require</span>(msg.sender == tuhao );<br>        selfdestruct(tuhao);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一: address 转换为address payable</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tuhao</span> = payable(msg.sender)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>第二： 谁在抢红包，抢谁的钱<br>合约部署者，在部署合约的时候，同时传递了msg.values<br><img src="03.png"></p><p>剩余90，10ether 给了合约地址，0xd9145CCE52D386f254917e481eB44e9943F39138</p><p>开始抢红包，就需要别的账户使用部署的这个合约，并且调用里面的sakeMoney方法。<br><img src="04.png"><br><img src="05.png"></p><p>点击红色按钮抢红包，抢到了<br><img src="06.png"><br>还剩2个了<br><img src="07.png"></p><p>那么怎么给调用者给钱呢？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">payable</span> (msg.sender).<span class="hljs-built_in">transfer</span>(balance * random /<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><img src="08.png"></p><p>A.transfer()的类似于  “合约，给A多少钱”</p><p>10 智能合约开发技巧<br>技巧1： 使用event调试<br>event函数接口可以像日志那样显示智能合约运行时的数据问题，开发者可以将关注的数据通过event接口调用的方式显示在调用返回信息中。</p><pre><code>event eventname(paramlists)event只是接口，不需要实现，调用的时候和普通函数类似，在前面多加一个emit就行了。</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">event age<span class="hljs-constructor">Info(<span class="hljs-params">address</span> <span class="hljs-params">_owner</span>, <span class="hljs-params">uint256</span> <span class="hljs-params">_age</span>)</span>;<br><br>    constructor<span class="hljs-literal">()</span> public&#123;<br>        adminUser.name = <span class="hljs-string">&quot;jackniu&quot;</span>;<br>        adminUser.age = <span class="hljs-number">40</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//值传递,adminUser的age不会被修改</span><br>    <span class="hljs-keyword">function</span> set<span class="hljs-constructor">Age(<span class="hljs-params">uint256</span> <span class="hljs-params">_age</span>)</span> public &#123;<br>        <span class="hljs-comment">//值传递，user是adminUser的拷贝</span><br>        User memory user = adminUser;<br>        user.age = _age;<br>        <br>        emit age<span class="hljs-constructor">Info(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>,<span class="hljs-params">_age</span>)</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>2 合约升级</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs typescript">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br><span class="hljs-comment">//返回值带结构体</span><br><span class="hljs-comment">//pragma experimental ABIEncoderV2;</span><br><br>struct Bank&#123;<br>    <span class="hljs-built_in">string</span> name;<br>    uint256 amount;<br>&#125;<br><br>contract data_demo&#123;<br>    Bank bank;<br><br>    <span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _name,uint256 _amount</span>) <span class="hljs-title">public</span> &#123;<br>        bank.name = _name;<br>        bank.amount = _amount;<br>    &#125;<br><br>    <span class="hljs-comment">//返回银行信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBank</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">Bank memory</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> bank;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现一个call_demo调用</span><br>contract  call_demo&#123;<br>    <span class="hljs-comment">//引用前一个合约的数据</span><br>    data_demo data;<br>    <br>    <span class="hljs-comment">// 构造时，指定请一个合约的地址</span><br>    <span class="hljs-title">constructor</span>(<span class="hljs-params">address addr</span>) <span class="hljs-title">public</span>&#123;<br>        data = data_demo(addr);<br>    &#125;<br>    <br>    <span class="hljs-comment">//合约可以对data_demo的地址进行更新</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upgrade</span>(<span class="hljs-params">address _addrV2</span>) <span class="hljs-title">public</span></span>&#123;<br>        data = data_demo(_addrV2);    <br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用getbank方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>)<span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">Bank memory</span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> data.getBank();  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个合约部署之后地址不变，如果升级，那么地址就变了。</p><p>现在分离用户访问层面和底层数据层面的逻辑<br>用户访问层面始终给一个公开方法，用来查询最底层的数据，<br>但是里面实现了不同的数据层面，接口+多态的方式。</p><p>用户访问层面的方法封装  合约地址， 如果升级，也就是新的合约地址，但对于用于来说是无感的。</p><h2 id="Go语言与智能合约调用"><a href="#Go语言与智能合约调用" class="headerlink" title="Go语言与智能合约调用"></a>Go语言与智能合约调用</h2><p>智能合约号称是自动执行的，但了解智能合约原理后应该清楚，智能合约并不是自动执行的，内部的函数是需要被调用后才能够触发</p><ol><li>合约函数如何被调用<br>一个完整的DApp包括前端、后端、智能合约以及区块链系统，智能合约的调用是连接区块链与前后端的关键。<br>智能合约运行在以太坊节点的EVM中。调用的话必须访问某个节点，IPC 本地进程间通信， RPC远程通信。<br>Geth启动的时候可以选择开启RPC，默认端口是8545<br><img src="09.png"></li></ol><p>智能合约的运行过程是后端连接某节点，将智能合约的调用发送给节点，节点在验证了交易的合法性后进行全网广播，被矿工打包到区块中代表该交易得到确认，至此交易才算完成。<br>每个区块链平台都会提供主流的开发语言SDK， Geth本身就是用go语言开发的，因此如果使用go语言连接节点，发交易，直接在工程内导入go-ethereum包就可以了。</p><ol start="2"><li>智能合约被调用的基本步骤<br>合约为例<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs fortran">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br>contract calldemo&#123;<br>    uint <span class="hljs-built_in">count</span>;<br>    <br>    constructor() <span class="hljs-keyword">public</span> &#123;<br>        <span class="hljs-built_in">count</span> = <span class="hljs-number">2020</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> setCount(uint _count) <span class="hljs-keyword">external</span>&#123;<br>        <span class="hljs-built_in">count</span> =_count;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> getCount() <span class="hljs-keyword">public</span> view returns(uint)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">count</span>;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>步骤01： 编译合约，获取合约ABI (Application Binary Interface,应用二进制接口)<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;nonpayable&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;constructor&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [],<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;getCount&quot;</span>,<br><span class="hljs-attr">&quot;outputs&quot;</span>: [<br>&#123;<br><span class="hljs-attr">&quot;internalType&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span>,<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span><br>&#125;<br>],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;view&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;function&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [<br>&#123;<br><span class="hljs-attr">&quot;internalType&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span>,<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;_count&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span><br>&#125;<br>],<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;setCount&quot;</span>,<br><span class="hljs-attr">&quot;outputs&quot;</span>: [],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;nonpayable&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;function&quot;</span><br>&#125;<br>]<br><br></code></pre></td></tr></table></figure>步骤02: 获取合约地址。注意要将合约部署到Geth节点。 因此环境选择Web3 Provider<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">geth</span> <span class="hljs-built_in">--datadir</span> ./<span class="hljs-string">data</span> <span class="hljs-built_in">--networkid</span> <span class="hljs-string">18</span> <span class="hljs-built_in">--port</span> <span class="hljs-string">30303</span>  <span class="hljs-built_in">--rpc</span> <span class="hljs-built_in">--rpcport</span> <span class="hljs-string">8545</span> <span class="hljs-built_in">--rpcapi</span> <span class="hljs-string">&#x27;db,net,eth,web3,personal&#x27;</span> <span class="hljs-built_in">--rpccorsdomain</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--gasprice</span> <span class="hljs-string">0</span> <span class="hljs-built_in">--allow-insecure-unlock</span>   <span class="hljs-string">console</span> <span class="hljs-string">2</span>&gt; <span class="hljs-string">1</span>.<span class="hljs-string">log</span><br><br><br><br><span class="hljs-string">personal</span>.<span class="hljs-string">newAccount</span>(<span class="hljs-string">&quot;123&quot;</span>) <br>    <span class="hljs-string">0x4185782d716e4b180c67cf4796518b8c2e556c8b</span><br><span class="hljs-string">acc0</span> = <span class="hljs-string">eth</span>.<span class="hljs-string">accounts</span>[<span class="hljs-string">0</span>]<br>    <span class="hljs-string">0xf7fde7db14b786cebc33a4cf45e55b61b3f2e922</span><br><span class="hljs-string">personal</span>.<span class="hljs-string">unlockAccount</span>(<span class="hljs-string">acc0</span>,<span class="hljs-string">&quot;123&quot;</span>)<br><br></code></pre></td></tr></table></figure></li></ol><p>部署后：获取合约地址  0x4698662Cb5598fE5392dF60Afbe5502338f19C23<br><img src="10.png"></p><p>步骤03： 利用abigen工具，将abi文件转换为go代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">abigen  -abi  calldemo.abi  -<span class="hljs-keyword">type</span> calldemo  -pkg  main -out calldemo.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p><img src="11.png"></p><p>步骤04： 创建main.go<br>分为4步：</p><ul><li>1 连接geth节点</li><li>2 生成合约实例</li><li>3 调用合约函数</li><li>4 打印</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;github.com/ethereum/go-ethereum/common&quot;</span><br>   <span class="hljs-string">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span><br>   <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">//1 连接到geth节点</span><br>   fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>   conn, err := ethclient.Dial(<span class="hljs-string">&quot;http://localhost:8545&quot;</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to connect to Ethereum client: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">//延迟关闭连接</span><br>   <span class="hljs-keyword">defer</span> conn.Close()<br><br>   <span class="hljs-comment">//2 生成合约实例</span><br>   demoIns, err := NewCalldemo(common.HexToAddress(<span class="hljs-string">&quot;0x4698662Cb5598fE5392dF60Afbe5502338f19C23&quot;</span>), conn)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to NewCLient: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">// 3 调用合约的函数</span><br>   val, err := demoIns.GetCount(<span class="hljs-literal">nil</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to getCount: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">// 4 打印结果</span><br>   fmt.Println(val)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B-1-区块链应用-基础知识</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/B-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/B-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="01-什么是hash函数"><a href="#01-什么是hash函数" class="headerlink" title="01 什么是hash函数"></a>01 什么是hash函数</h2><p>hash函数，一般翻译为散列；<br>在比特币领域中hash函数指特定算法支持的hash函数 (SHA-256)</p><p>演示网站: <a href="https://andersbrownworth.com/blockchain">https://andersbrownworth.com/blockchain</a></p><p><img src="01.png" alt="区块"></p><p>创世区块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;config&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;chainId&quot;</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">&quot;homesteadBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip150Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip150Hash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>    <span class="hljs-attr">&quot;eip155Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip158Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;byzantiumBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;constantinopleBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;petersburgBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;ethash&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;0x5d5cdc87&quot;</span>,<br>  <span class="hljs-attr">&quot;extraData&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;gasLimit&quot;</span>: <span class="hljs-string">&quot;0x47b760&quot;</span>,<br>  <span class="hljs-attr">&quot;difficulty&quot;</span>: <span class="hljs-string">&quot;0x80000&quot;</span>,<br>  <span class="hljs-attr">&quot;mixHash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;coinbase&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;alloc&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;0000000000000000000000000000000000000000&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;0x1&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;number&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;gasUsed&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;parentHash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>coinbase:挖矿后获得奖励的地址<br>Difficulty: 挖矿难度<br>gasLimit: 一个区块所能容纳的gas的上限，智能合约指令在执行时需要消耗gas，可以通过以太币自动兑换。<br>nonce: 随机值<br>mixHash: 一个256位的哈希证明，与nonce结合，验证本区块的有效性<br>extraData: 附加信息，随意填写<br>parentHash: 前一块的hash，因为是创世块所以为0</p><p><img src="02.png" alt="区块链创世块"></p><p>命令:</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">geth</span> <span class="hljs-built_in">--datadir</span> ./<span class="hljs-string">data</span> <span class="hljs-built_in">--networkid</span> <span class="hljs-string">19900112</span> <span class="hljs-built_in">--port</span> <span class="hljs-string">30303</span>  <span class="hljs-built_in">--rpc</span> <span class="hljs-built_in">--rpcport</span> <span class="hljs-string">8545</span> <span class="hljs-built_in">--rpcapi</span> <span class="hljs-string">&#x27;db,net,eth,web3,personal&#x27;</span> <span class="hljs-built_in">--rpccorsdomain</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--gasprice</span> <span class="hljs-string">0</span> <span class="hljs-built_in">--allow-insecure-unlock</span>   <span class="hljs-string">console</span><br><br><br><span class="hljs-string">personal</span>.<span class="hljs-string">newAccount</span>(<span class="hljs-string">&quot;123&quot;</span>) <br>        <span class="hljs-string">0x4185782d716e4b180c67cf4796518b8c2e556c8b</span><br><span class="hljs-string">acc0</span> = <span class="hljs-string">eth</span>.<span class="hljs-string">accounts</span>[<span class="hljs-string">0</span>]<br>        <span class="hljs-string">0xf7fde7db14b786cebc33a4cf45e55b61b3f2e922</span><br> <span class="hljs-string">personal</span>.<span class="hljs-string">unlockAccount</span>(<span class="hljs-string">acc0</span>,<span class="hljs-string">&quot;123&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
