<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FISCO-Solidity疑难</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/14/FISCO-Solidity%E7%96%91%E9%9A%BE/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/14/FISCO-Solidity%E7%96%91%E9%9A%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="0-sol中的ABI问题"><a href="#0-sol中的ABI问题" class="headerlink" title="0 sol中的ABI问题"></a>0 sol中的ABI问题</h2><p>有这个合约 EvidenceSignersData.sol,并且有这几个方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> verify(address addr)<span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">function</span> getSigner(uint <span class="hljs-keyword">index</span>)<span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(address)<br><span class="hljs-keyword">function</span> getSignersSize() <span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(uint)<br><span class="hljs-keyword">function</span> getSigners() <span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(address[])<br></code></pre></td></tr></table></figure><p>有另一个合约Evidence，在里面定义了这样一个合约</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">contract EvidenceSignersDataABI&#123; <br>    <span class="hljs-keyword">function</span> verify(address addr)<span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(<span class="hljs-type">bool</span>)&#123;&#125;<br>    <span class="hljs-keyword">function</span> getSigner(uint <span class="hljs-keyword">index</span>)<span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(address)&#123;&#125;<br>    <span class="hljs-keyword">function</span> getSignersSize() <span class="hljs-built_in">public</span> <span class="hljs-keyword">constant</span> <span class="hljs-keyword">returns</span>(uint)&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在Evidence中，会使用EvidenceSignersDataABI的方法去完成一些操作，就感觉是一个反向操作，但是一般的做法是引入EvidenceSignersData.sol,然后实例化EvidenceSignersData，再去调用。 我们测试一下。</p><p>1： 假如我们使用 LoginSignersDataABIDDD 这样加了一些乱七八糟后缀的合约能不能起效果？？？<br>    同样成功了。</p><p>2: 然后实例化EvidenceSignersData，再去调用，也没有问题</p><pre><code>    LoginSignersData test = LoginSignersData(msg.sender);    if(test.verify(tx.origin))    &#123;    loginUser = user;    signers.push(tx.origin);    emit newSignaturesEvent(user,addr);    &#125;    else&#123;        errorNewSignaturesEvent(user,addr);    &#125;</code></pre><p>在测试上述问题的时候，发现了这样一种情况</p><pre><code>合约A引用了合约B，并且在合约A中构造了一个合约B的实例。此时返回了合约B的地址如下：     Login login = new Login(user,this);    return login;对于合约A而言，msg.sender是调用合约A这个方法的用户。在合约B中，会有msg.sender这个值，那么对于合约B而言，msg.sender到底是调用A的用户还是合约A的地址呢？结果: 是合约A的地址那么如何 引用使用合约A的用户地址呢？tx.origin这个属性值。</code></pre>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-Governance-私钥</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/13/FISCO-Governance-%E7%A7%81%E9%92%A5/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/13/FISCO-Governance-%E7%A7%81%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<ul><li>椭圆曲线: 一族曲线，广泛用于密码学。这里仅指使用了secp256k1的椭圆曲线或者国米sm2p256v1的椭圆曲线</li><li>私钥: 用户私有密钥，用于签名，解密等，这里特指基于椭圆曲线的私钥</li><li>公钥: 公开的密钥，用于验签、加密等，这里特指基于椭圆曲线的公钥</li><li>地址: 用公钥经过特定的哈希算法生成的账户地址</li><li>助记词: 一串单词文本，解决私钥难以记忆，表达的问题，可结合口令得到私钥</li><li>派生: 私钥根据不同场景生成子私钥的过程，用于减低记忆成本、泄露风险。私钥公钥均可以派生</li><li>chaincode: 生成密钥时会附带一个链码，用于安全派生子密钥</li><li>密钥导出: 指将私钥按照固定格式加密导出，如keystore、pem、p12等</li><li>密钥恢复: 将机密导出的私钥还原为私钥明文</li><li>分片: 将数据分为若干块的过程</li><li>还原: 将碎块还原为原始数据的过程。</li></ul><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><h3 id="1-关键特性"><a href="#1-关键特性" class="headerlink" title="1 关键特性"></a>1 关键特性</h3><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/architecture.png"></p><h4 id="1-1-多种密钥生成方式"><a href="#1-1-多种密钥生成方式" class="headerlink" title="1.1 多种密钥生成方式"></a>1.1 多种密钥生成方式</h4><p>提供三种密钥生成方式：随机数、助记词、密钥派生。随机数方式是指椭圆曲线方式，在曲线域内生成一个随机数作为私钥。助记词遵循BIP-32协议，通过助记词和口令可获取私钥，降低了私钥保存的难度。而密钥派生模式下，支持通过父级私钥和一串数据来确定性地生成下级私钥，适用于根据不同场景使用不同私钥的方案。</p><h4 id="1-2-支持密钥导出"><a href="#1-2-支持密钥导出" class="headerlink" title="1.2 支持密钥导出"></a>1.2 支持密钥导出</h4><p>支持用户对私钥进行导出，目前支持PEM、PKCS12、ETH Keystore等标准。PEM格式下，私钥信息被编码到.pem文件中；PKCS12格式下，私钥通过口令加密，按RFC7292规范导出到p12文件中，与openssl等主流工具相兼容；ETH Keystore格式下，私钥通过口令加密，按以太坊标准keystore格式导出到json文件中。</p><h4 id="1-3-密钥托管方案"><a href="#1-3-密钥托管方案" class="headerlink" title="1.3 密钥托管方案"></a>1.3 密钥托管方案</h4><p>支持企业机构来托管用户私钥，适用于B2B2C等业务模式。该模式下，允许将用户的私钥加密并保存，其中加密后的密钥可保存到文件，也可以保存到数据库。此外，加密口令也可以单独保存到另一个数据库，通过双库的方式提高了安全性。</p><h4 id="1-4-私钥分片、还原"><a href="#1-4-私钥分片、还原" class="headerlink" title="1.4 私钥分片、还原"></a>1.4 私钥分片、还原</h4><p>支持将私钥进行门限分片和还原。使用者可以将私钥分解成n个碎片，只有集齐指定数量的碎片，才能恢复出原始私钥。<br><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/shard.png"></p><h4 id="1-5-常规密码学操作"><a href="#1-5-常规密码学操作" class="headerlink" title="1.5 常规密码学操作"></a>1.5 常规密码学操作</h4><p>支持常规密码学操作，例如签名、加解密、哈希。</p><h4 id="1-6-国密支持"><a href="#1-6-国密支持" class="headerlink" title="1.6 国密支持"></a>1.6 国密支持</h4><p>支持国密算法。例如，对于私钥生成、签名、加解密等非对称密码学操作，我们采用标准国密曲线sm2p256v1；对于哈希，则采用SM3标准。</p><h3 id="2-场景实例"><a href="#2-场景实例" class="headerlink" title="2 场景实例"></a>2 场景实例</h3><p>某用户想使用私钥来处理不同的业务需求，出于安全性考虑，该用户希望有一个根私钥，然后在不同的场景下使用其派生的子私钥。</p><ol><li>首先该用户使用助记词方式生成了一个私钥作为根私钥，将该助记词抄写在纸上妥善保管。</li><li>随后，为了私钥明文在不被黑客攻击，该用户还用自己的口令将其加密为P12格式保存好。</li><li>最后，该用户还是担心该私钥泄露，便采用门限分片将其分解为多片，置于不同的设备上，如果丢失，可以通过这些设备还原。</li></ol><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/personal_use.png"></p><p>随机数方式生成私钥</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.webank.demo;<br><br>import com.webank.keygen.<span class="hljs-keyword">exception</span>.KeyGenException;<br>import com.webank.keygen.model.PkeyInfo;<br>import com.webank.keygen.service.PkeyByRandomService;<br>import com.webank.keygen.utils.KeyPresenter;<br><br>public <span class="hljs-keyword">class</span> GenPrivKey &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws KeyGenException &#123;<br>        <span class="hljs-comment">//生成非国密私钥</span><br>        PkeyByRandomService pkeyByRandomService = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PkeyByRandomService()</span>;<br>        PkeyInfo pkeyInfo = pkeyByRandomService.generate<span class="hljs-constructor">PrivateKey()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;private key: &quot;</span>+ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPresenter</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">String(<span class="hljs-params">pkeyInfo</span>.<span class="hljs-params">getPrivateKey</span>()</span>));<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;public key: &quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPresenter</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">String(<span class="hljs-params">pkeyInfo</span>.<span class="hljs-params">getPublicKey</span>()</span>.get<span class="hljs-constructor">PublicKey()</span>));<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;address: &quot;</span>+ pkeyInfo.get<span class="hljs-constructor">Address()</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPresenter</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">String(<span class="hljs-params">pkeyInfo</span>.<span class="hljs-params">getChainCode</span>()</span>));<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyPresenter</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">String(<span class="hljs-params">pkeyInfo</span>.<span class="hljs-params">getPublicKey</span>()</span>.get<span class="hljs-constructor">Chaincode()</span>));<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> key: <span class="hljs-number">0x818e7969dc6ae16387f03ec098afbbc49a3239a6a36d018b69d51964f86ee5a6</span><br>public key: <span class="hljs-number">0x040443cf0bc055654f2b49e7cca92f6e032effee87bb955552d0e0094f5d997bf369bb687e210cf216f17ab1d3328547353dfbe4446142fd93541204b58579e408</span><br>address: adf1a3a16cda096c8b9da00ad38f927d7e194f97<br><span class="hljs-number">0x2aee6256bc760b7a664154400dca52ba</span><br><span class="hljs-number">0x2aee6256bc760b7a664154400dca52ba</span><br><br>````<br><br>私钥转换为公钥及地址<br></code></pre></td></tr></table></figure><p>package com.webank.demo;</p><p>import com.webank.keygen.enums.EccTypeEnums;<br>import com.webank.keygen.model.PkeyInfo;<br>import com.webank.keygen.utils.KeyPresenter;</p><p>public class KeyToPubAndAddress {<br>    public static void main(String[] args) {<br>        String pkeystr = “0x818e7969dc6ae16387f03ec098afbbc49a3239a6a36d018b69d51964f86ee5a6”;<br>        byte[] privateKey = KeyPresenter.asBytes(pkeystr);<br>        PkeyInfo info = PkeyInfo.builder()<br>                .privateKey(privateKey)<br>                .eccName(EccTypeEnums.SECP256K1.getEccName())<br>                .build();<br>        System.out.println(“public key: “ + KeyPresenter.asString(info.getPublicKey().getPublicKey()));<br>        System.out.println(“address: “+ info.getAddress());<br>    }<br>}</p><p>public key: 0x040443cf0bc055654f2b49e7cca92f6e032effee87bb955552d0e0094f5d997bf369bb687e210cf216f17ab1d3328547353dfbe4446142fd93541204b58579e408<br>address: adf1a3a16cda096c8b9da00ad38f927d7e194f97</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">助记词使用<br></code></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    
    <categories>
      
      <category>Governance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>key</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-Governance-证书</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/13/FISCO-Governance-%E8%AF%81%E4%B9%A6/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/13/FISCO-Governance-%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><h3 id="1-私钥和公钥"><a href="#1-私钥和公钥" class="headerlink" title="1 私钥和公钥"></a>1 私钥和公钥</h3><p>在非对称加密领域，对数据的加解密、签名都依赖于密钥对。在密钥对中，公开的密钥叫做公钥，只有自己知道的叫私钥。非对称加密有许多体系，最著名的是RSA、DH、ECDSA。其中ECDSA是区块链领域采纳的密钥体系，也称为椭圆曲线体系，该体系中，私钥是一个某范围内的整数，公钥则是曲线上的一个点。</p><h3 id="2-曲线"><a href="#2-曲线" class="headerlink" title="2 曲线"></a>2 曲线</h3><p>在椭圆曲线体系中，密钥生成依赖于曲线参数，一条区县中合法的密钥对，在另一条曲线的环境中，就是非法密钥。最经典的曲线之一就是 secp256k1,为多种主流区块链采纳； 另一种曲线是国密曲线sm2p256v1, 该曲线满足我国的密码学标准。</p><h3 id="3-证书"><a href="#3-证书" class="headerlink" title="3. 证书"></a>3. 证书</h3><p>数字证书也称为公开密钥证书，是指用于电子信息活动中电子文件行为主体的验证和证明。并可以实现电子文件保密性和完整性的电子数据。 数字证书是一个经证书认证中心(CA)发行的文件。</p><h3 id="4-数字签名"><a href="#4-数字签名" class="headerlink" title="4. 数字签名"></a>4. 数字签名</h3><p>数字签名(Digital Signature)(又称为公钥数字签名、电子签章)是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术实现， 用于鉴别数字信息的方法。 一套数字签名通常定义两种互补的运算，一个用于签名，一个用于验证。</p><h2 id="2-组件介绍"><a href="#2-组件介绍" class="headerlink" title="2 组件介绍"></a>2 组件介绍</h2><p>WeBankBlockchain-Governance-Cert提供了证书生命周期管理的解决方案，规范证书签发流程，支持证书托管，支持多种签名算法，方便个人或企业使用。</p><h3 id="1-设计概要"><a href="#1-设计概要" class="headerlink" title="1. 设计概要"></a>1. 设计概要</h3><p>WeBankBlockchain-Governance-Cert包含两个模块，cert-toolkit和cert-mgr，cert-toolkit作为证书生成工具，可作为独立工具包使用，cert-mgr基于cert-toolkit工具包，提供了证书的托管能力，并支持证书的生命周期管理，对签发的流程统一规范。</p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/cert_framework.png"></p><h3 id="2-关键特性"><a href="#2-关键特性" class="headerlink" title="2 关键特性"></a>2 关键特性</h3><h4 id="2-1-支持多种密钥和签名算法"><a href="#2-1-支持多种密钥和签名算法" class="headerlink" title="2.1 支持多种密钥和签名算法"></a>2.1 支持多种密钥和签名算法</h4><p>支持RSA，EC等密钥算法，支持SM2国密算法，支持SHA256WITHRSA,SHA256WITHECDSA、SM3WITHSM2等签名算法</p><h4 id="2-2-支持证书托管"><a href="#2-2-支持证书托管" class="headerlink" title="2.2 支持证书托管"></a>2.2 支持证书托管</h4><p>证书和子证书请求会持久化在数据库中，同时证书相关的私钥也会保存，对证书信息统一管理，可对证书进行多维度查询，并支持证书的导出</p><h4 id="2-3-支持多级证书签发"><a href="#2-3-支持多级证书签发" class="headerlink" title="2.3 支持多级证书签发"></a>2.3 支持多级证书签发</h4><p>证书可进行多级签发，可选择上级证书并请求签发，生成证书链，使用方便，操作便捷</p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/cert_chain.png"></p><h4 id="2-4-支持证书重置"><a href="#2-4-支持证书重置" class="headerlink" title="2.4 支持证书重置"></a>2.4 支持证书重置</h4><p>支持对证书进行重置，重置信息包括有效时间、证书用途等。</p><h3 id="3-场景示例"><a href="#3-场景示例" class="headerlink" title="3 场景示例"></a>3 场景示例</h3><h4 id="3-1-链上节点准入证书管理"><a href="#3-1-链上节点准入证书管理" class="headerlink" title="3.1 链上节点准入证书管理"></a>3.1 链上节点准入证书管理</h4><p>链上节点证书的签发统一由WeBankBlockchain-Governance-Cert来完成，Governance-Cert可以集成或者独立部署，并由权威机构来管理服务。<br>在链初始化时可以由部署者调用接口完成根证书的生成，新增机构或者节点可以通过Governance-Cert提供的查询接口，来查询根证书，并提交子证书请求，根证书管理者可以从通过查询请求列表，来获取准入请求，并签发子证书，子证书签发完成，下一级证书采取同样逻辑处理。 通过Governance-cert对于证书的管理，可以规范流程，提升效率，并保证证书安全。</p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/cert_use.png"></p><h4 id="3-2-证书工具包使用"><a href="#3-2-证书工具包使用" class="headerlink" title="3.2 证书工具包使用"></a>3.2 证书工具包使用</h4><p>WeBankBlockchain-Governance-Cert中cert-toolkit可作为独立JAVA工具包在项目中引用，代替命令行完成证书的生成和签发。企业或个人项目可集成WeBankBlockchain-Governance-Cert作为证书签发工具包</p><h2 id="3-快速开始"><a href="#3-快速开始" class="headerlink" title="3 快速开始"></a>3 快速开始</h2><h3 id="cert-toolkit使用"><a href="#cert-toolkit使用" class="headerlink" title="cert-toolkit使用"></a>cert-toolkit使用</h3><h4 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1 功能介绍"></a>1 功能介绍</h4><p>cert-toolkit用于证书生成。支持轻量级jar包接入。</p><p>支持如下方式:</p><ul><li>根证书请求</li><li>证书请求生成</li><li>子证书生成</li><li>证书文件的读写</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/WeBankBlockchain/</span>Governance-Cert.git<br></code></pre></td></tr></table></figure><p>cert-mgr中启动只有创建的表如下:<br>证书信息表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `cert_info` (<br>  `pk_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `cert_content` longtext,<br>  `is_ca_cert` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `issuer_cn` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `issuer_key_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `issuer_org` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `parent_cert_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `serial_number` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_cn` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_key_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_org` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_pub_key` longtext,<br>  `user_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`pk_id`),<br>  KEY `user_id` (`user_id`),<br>  KEY `issuer_key_id` (`issuer_key_id`),<br>  KEY `subject_key_id` (`subject_key_id`),<br>  KEY `serial_number` (`serial_number`),<br>  KEY `parent_cert_id` (`parent_cert_id`),<br>  KEY `issuer_org` (`issuer_org`),<br>  KEY `issuer_cn` (`issuer_cn`),<br>  KEY `subject_org` (`subject_org`),<br>  KEY `subject_cn` (`subject_cn`),<br>  KEY `is_ca_cert` (`is_ca_cert`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure><p>证书keys信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `cert_keys_info` (<br>  `pk_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `key_alg` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `key_pem` longtext,<br>  `user_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`pk_id`),<br>  KEY `user_id` (`user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br><br></code></pre></td></tr></table></figure><p>证书请求信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `cert_request_info` (<br>  `pk_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `cert_request_content` longtext,<br>  `issue` bit(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `parent_cert_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `parent_cert_user_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_cn` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_key_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `subject_org` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`pk_id`),<br>  KEY `user_id` (`user_id`),<br>  KEY `subject_key_id` (`subject_key_id`),<br>  KEY `parent_cert_id` (`parent_cert_id`),<br>  KEY `subject_org` (`subject_org`),<br>  KEY `subject_cn` (`subject_cn`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Governance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cert</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-Governance-权限</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/10/FISCO-Governance-%E6%9D%83%E9%99%90/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/10/FISCO-Governance-%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>WeBankBlockchain-Governance-Authority定位为区块链权限治理组件，旨在为智能合约开发者提供强大、轻便的权限管理工具，使得开发者可以快速地为自己的业务系统搭建智能合约权限控制体系。<br><a href="https://governance-doc.readthedocs.io/zh_CN/latest/docs/WeBankBlockchain-Governance-Auth/gov.html">https://governance-doc.readthedocs.io/zh_CN/latest/docs/WeBankBlockchain-Governance-Auth/gov.html</a></p><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h3><p>随着智能合约业务日益丰富，越来越多的合约需要引入权限控制。如果不对智能合约做权限控制，那么无法满足业务的安全性要求。例如，存证场景中，除了上传存证的函数外，还有许多专供审核人员调用的函数，这些函数应仅由审核人员来使用，如果这些函数没有正确设置权限拦截逻辑，整套逻辑就会被攻击者轻易操控。</p><p>WeBankBlockchain-Governance-Authority的目的在于为智能合约开发者提供权限控制功能。开发者只要添加少量代码，即可拦截非法调用。同时，有一个专门的权限治理合约用于治理各个业务合约的拦截规则，对规则的修改只需操作权限治理合约，不需要调整业务合约，且修改会实时生效。</p><h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2 特性"></a>2 特性</h3><h4 id="2-1-函数级的权限粒度"><a href="#2-1-函数级的权限粒度" class="headerlink" title="2.1 函数级的权限粒度"></a>2.1 函数级的权限粒度</h4><p>在权限体系中，可以为每个函数单独设置权限，同一个合约中的不同函数可以有不同的权限设置</p><h4 id="2-2-批量设置用户权限"><a href="#2-2-批量设置用户权限" class="headerlink" title="2.2 批量设置用户权限"></a>2.2 批量设置用户权限</h4><p>合约函数的权限配置基本单位为组，是的可以设置整批账户的权限访问规则</p><h4 id="2-3-侵入性低"><a href="#2-3-侵入性低" class="headerlink" title="2.3 侵入性低"></a>2.3 侵入性低</h4><p>业务合约只需要在代码中引入权限合约地址，并通过在需要权限控制的函数中访问权限合约的权限判断接口，就可以实现权限控制</p><h4 id="2-4-易于集成"><a href="#2-4-易于集成" class="headerlink" title="2.4 易于集成"></a>2.4 易于集成</h4><p>对于权限管理人员，既支持通过手动方式来调用权限合约，也支持通过SDK方式进行调用</p><h4 id="2-5-支持多种治理方式"><a href="#2-5-支持多种治理方式" class="headerlink" title="2.5 支持多种治理方式"></a>2.5 支持多种治理方式</h4><p>允许中心化和去中心化两种方式进行权限治理。在中心化方式中，有一位管理员，可以直接设置各个账户的权限信息；在去中心化方式下，有一个治理委员会，治理委员会成员通过投票来决定如何更改权限信息。</p><h3 id="3-整体原理"><a href="#3-整体原理" class="headerlink" title="3 整体原理"></a>3 整体原理</h3><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/arch.png"></p><p>合约角度来看，合约分为业务合约和权限合约，业务合约包含了业务逻辑，权限合约包含了权限信息。从角色划分来看，参与角色分为普通调用者和管理员，普通调用者用于调用业务合约，而管理员负责修改权限合约中的合约信息。</p><pre><code>普通调用者调用业务合约，业务合约内部的拦截器会向权限合约查询用户是否有权限调用该函数权限合约的鉴权依赖存储其内部的“组权限信息列表”，每个组都记录了包含哪些地址、哪些函数、运行于什么模式。组A包含Alice 和Bob 两个地址，并关联了某合约的helloworld函数，且组A在白名单模式下，那就意味着只有alice和bob可以访问该合约的helloworld函数，其他账户无权访问。</code></pre><h3 id="4-场景示例"><a href="#4-场景示例" class="headerlink" title="4 场景示例"></a>4 场景示例</h3><p>假设现在要开发一个存证智能合约，要求其中某些函数仅能由审查员来调用，例如验证存证。这时，权限合约的管理员到权限治理合约中配置“审查员”组，将审查员的地址添加到该组中、添加相应函数，并将组设为白名单模式。如此配置完成后，权限规则即生效，当审查员之外的账户在调用这些函数的时候，均会被拦截掉，有且仅有审查员可以调用这些函数。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>权限组件的使用者包括两个角色：治理方和业务方。治理方负责权限合约的部署、配置；业务方负责接入权限合约、拦截非法调用。这一节提供一个简单但完整的示例，通过部署并为业务合约HelloWorld配置权限，以使您了解整个组件的使用流程。这一节的内容包括：</p><ul><li>【治理方】部署权限合约</li><li>【业务方】部署HelloWorld合约</li><li>【治理方】配置HelloWorld的权限</li><li>【业务方】权限验证</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/WeBankBlockchain/</span>Governance-Authority.git<br>cd Governance-Authority<span class="hljs-regexp">/src/m</span>ain/contracts<br></code></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><img src="01.png"></p><h2 id="治理手册"><a href="#治理手册" class="headerlink" title="治理手册"></a>治理手册</h2><p>权限合约是本组件提供的AuthManager合约，用于配置哪些账户可以访问哪些合约的哪些函数。可以治理多个业务合约的权限。</p><h3 id="1-关键概念"><a href="#1-关键概念" class="headerlink" title="1 关键概念"></a>1 关键概念</h3><h4 id="1-2-组"><a href="#1-2-组" class="headerlink" title="1.2 组"></a>1.2 组</h4><p>组定义了哪些账户可以访问哪些函数。组包含的信息如下：</p><ul><li>账户列表</li><li>模式。包含两个可选择的模式：<ul><li>黑名单模式</li><li>白名单模式</li></ul></li><li>函数列表</li></ul><h3 id="1-3-治理模式"><a href="#1-3-治理模式" class="headerlink" title="1.3 治理模式"></a>1.3 治理模式</h3><p>权限治理合约有两种模式: 管理员模式、委员会模式</p><ul><li>管理员模式下，由单一管理员修改配置；还可以转让管理员权限</li><li>委员会模式下，所有操作均通过投票进行。 委员会成员可以修改组配置。 还可以修改委员会列表，投票规则等。</li></ul><p>一个权限治理合约的模式在部署时即确定，一旦确定一种模式，就无法更改。</p><h3 id="1-4-投票模式"><a href="#1-4-投票模式" class="headerlink" title="1.4 投票模式"></a>1.4 投票模式</h3><p>投票包含两种规则：多签模式和阈值权重模式。</p><ul><li>多签模式下，当投票数达到最小签名数时，投票即通过。</li><li>阈值权重模式下，每个委员均配有对应的权重，当已投票的总权重达到最小阈值时，投票即通过。</li></ul><p>多签是阈值权重模式下的一个特例，即所有委员会的权重为1。</p><h3 id="2-AuthManager合约接口列表"><a href="#2-AuthManager合约接口列表" class="headerlink" title="2 AuthManager合约接口列表"></a>2 AuthManager合约接口列表</h3><ul><li><p>合约部署<br>合约部署时需要决定是管理员模式还是治理委员会模式。以下为管理员模式下权限配置接口：</p><p>  createGroup 创建组<br>  addAccountToGroup 将账户添加到组<br>  addFunctionToGroup 将合约函数关联到组<br>  removeAccountFromGroup 将账户从组内移除<br>  removeFunctionFromGroup 将合约函数与组的关联取消</p></li></ul><p>以下为治理委员会模式下的权限配置接口：</p><pre><code>    requestCreateGroup 请求创建组    requestAddAccountToGroup 请求将账户添加到组    requestAddFunctionToGroup 请求将合约函数关联到组    requestRemoveAccountFromGroup 请求将账户从组内移除    requestRemoveFunctionFromGroup 请求将合约函数与组的关联取消    approveSingle 投票请求    deleteSingle 删除请求    getRequestSingle 查看请求    executeCreateGroup 创建组    executeAddAccountToGroup 执行将账户添加到组    executeAddFunctionToGroup 执行将合约函数关联到组    executeRemoveAccountFromGroup 执行将账户从组内移除    executeRemoveFunctionFromGroup 执行将合约函数与组的关联取消</code></pre><p>以下为通用的查询接口</p><pre><code>    containsAccount    containsFunction    getGroup    canCallFunction</code></pre><p>以下为管理员模式下的治理接口：</p><pre><code>    transferAdminAuth    isAdmin</code></pre><p>以下是治理委员会模式下的治理接口：</p><pre><code>    requestSetThreshold    requestResetGovernors    executeSetThreshold    executeResetGovernors    requestAddGovernor    deleteAddGovernorReq    approveAddGovernorReq    getGovernorsToAdd    executeAddGovernorReq    requestRemoveGovernor    deleteRemoveGovernorReq    approveRemoveGovernorReq    getGovernorsToRemove    executeRemoveGovernorReq</code></pre><h3 id="2-1-部署合约"><a href="#2-1-部署合约" class="headerlink" title="2.1 部署合约"></a>2.1 部署合约</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"># 管理员模式<br>deploy AuthManager <span class="hljs-number">1</span> <span class="hljs-selector-attr">[]</span> <span class="hljs-selector-attr">[]</span> <span class="hljs-number">0</span> <br><br><br><br># 委员会治理模式<br>deploy AuthManager <span class="hljs-number">2</span> <span class="hljs-selector-attr">[<span class="hljs-string">&quot;0x1&quot;</span>, <span class="hljs-string">&quot;0x2&quot;</span>, <span class="hljs-string">&quot;0x3&quot;</span>]</span> <span class="hljs-selector-attr">[1,1,1]</span> <span class="hljs-number">3</span> <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Governance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Authority</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-Governance-账户-代码</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/09/FISCO-Governance-%E8%B4%A6%E6%88%B7-%E4%BB%A3%E7%A0%81/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/09/FISCO-Governance-%E8%B4%A6%E6%88%B7-%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>代码地址: <a href="https://gitee.com/niuwenchen/Governance-Account.git">https://gitee.com/niuwenchen/Governance-Account.git</a></p><h2 id="账户治理合约说明"><a href="#账户治理合约说明" class="headerlink" title="账户治理合约说明"></a>账户治理合约说明</h2><h3 id="1-WEBasicAuth-sol"><a href="#1-WEBasicAuth-sol" class="headerlink" title="1 WEBasicAuth.sol"></a>1 WEBasicAuth.sol</h3><p>构造函数: _owner赋值为创建合约的用户地址<br>方法: setOwner(owner),由合约拥有者调用，_owner赋值为owner<br>功能实现: 实现合约拥有者切换</p><h3 id="2-LibBoardVote-sol"><a href="#2-LibBoardVote-sol" class="headerlink" title="2 LibBoardVote.sol"></a>2 LibBoardVote.sol</h3><p>定义结构体:</p><ul><li>VoteRequestInfo 投票请求信息</li><li>VoteWeightInfo  投票权重信息</li><li>VoteInfo 投票信息</li></ul><p>定义函数修改器:</p><ul><li>voteNotExisted(VoteInfo storage voteInfo, uint256 id)  投票不存在</li><li>voteExisted(VoteInfo storage voteInfo, uint256 id)    投票存在, 都是判断requestAddress是否为address(0)</li><li>isWeightEmpty(VoteWeightInfo storage self)  投票权重是空</li></ul><p>函数:</p><ul><li>getRequestInfo(VoteInfo storage self, uint256 id)  根据id获取投票请求信息</li><li>getVoteParas(VoteInfo storage self, uint256 id) </li><li>register(VoteInfo storage self,VoteWeightInfo voteWeight,uint8 txType,address requestAddress,address newAddress,uint16 newValue)<br>  构造 VoteRequestInfo实例，配置VoteInfo的requestMapping[id]映射</li><li>unregister(VoteInfo storage self, uint256 id) 删除VoteInfo的requestMapping[id]映射</li><li>vote(VoteInfo storage self,VoteWeightInfo storage voteWeight,address from,uint256 id,bool flag)</li><li>canCallById(VoteInfo storage self, uint256 id) 是否能够根据id调用</li><li>validVote(VoteInfo storage self,uint256 id,uint8 txType,address requestAddress,address newAddress,uint16 newValue)</li><li>init(VoteWeightInfo storage self,address[] key,uint16[] value,uint16 threshold)</li><li>clean(VoteWeightInfo storage self) 清空</li><li>setWeight(VoteWeightInfo storage self,address key,uint16 value) 设置权重</li><li>isVoter(VoteWeightInfo storage self, address src) 判断会否是投票者(委员?)</li><li>setThreshold(VoteWeightInfo storage self, uint16 value)  设定投票生效阈值</li><li>getWeight(VoteWeightInfo storage self, address key)</li><li>getThreshold(VoteWeightInfo storage self)</li><li>getInfo(VoteWeightInfo storage self)</li><li>isVoted(VoteRequestInfo storage self, address src)</li><li>isAgree(VoteRequestInfo storage self, address src)</li><li>vote(VoteRequestInfo storage self,address src,uint16 weight,bool flag) </li></ul><p>LibBoardVote库内容较多,基本都是委员投票部分的内容</p><h3 id="3-WEBoardVoteGuard-sol"><a href="#3-WEBoardVoteGuard-sol" class="headerlink" title="3 WEBoardVoteGuard.sol"></a>3 WEBoardVoteGuard.sol</h3><p>WeBase的委员会管理<br>引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">import &quot;./WEBasicAuth.sol&quot;;<br>import &quot;./LibBoardVote.sol&quot;;<br><br>contract WEBoardVoteGuard is WEBasicAuth &#123;<br>    using LibBoardVote for LibBoardVote.VoteWeightInfo;<br>    LibBoardVote.VoteWeightInfo _voteWeight;<br>    using LibBoardVote for LibBoardVote.VoteInfo;<br>    LibBoardVote.VoteInfo _voteInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造函数:  定义 _voteInfo.currentId = 10000;<br>方法: 所有的方法都是 LibBoardVote 的方法封装调用</p><h3 id="4-BaseAccountInterface-sol"><a href="#4-BaseAccountInterface-sol" class="headerlink" title="4 BaseAccountInterface.sol"></a>4 BaseAccountInterface.sol</h3><p>定义BaseAccount接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function isNormal() public returns (bool);<br><br>    function cancel() public returns (bool);<br><br>    function freeze() public returns (bool);<br><br>    function unfreeze() public returns (bool);<br></code></pre></td></tr></table></figure><h3 id="5-BaseAccount-sol"><a href="#5-BaseAccount-sol" class="headerlink" title="5 BaseAccount.sol"></a>5 BaseAccount.sol</h3><p>账户的操作，正常，冻结，解冻，取消等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract BaseAccount is BaseAccountInterface, WEBasicAuth &#123;<br>    address public _accountManager;<br>    // 0-normal, 1-frozen, 2-closed<br>    uint8 public _status = 0;<br>    <br>    constructor(address accountManager) public &#123;<br>        _accountManager = accountManager;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>构造器: 设定账户管理员</p><h3 id="7-UserAccount-sol"><a href="#7-UserAccount-sol" class="headerlink" title="7 UserAccount.sol"></a>7 UserAccount.sol</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs solidity"><br>import &quot;./WEBoardVoteGuard.sol&quot;;<br>import &quot;./AccountManager.sol&quot;;<br>import &quot;./BaseAccount.sol&quot;;<br><br>contract UserAccount is WEBoardVoteGuard, BaseAccount&#123;<br>    // 0-none, 1- social vote;<br>    uint8 public _statics;<br>    //构造器<br>    constructor(address accountManager, address owner)<br>        public<br>        BaseAccount(accountManager)<br>    &#123;<br>        _statics = 0;<br>        setOwner(owner);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>函数:</p><ul><li><p>getSocialInfo()   (keys,values,threshold)作为social信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function getSocialInfo()<br>        internal<br>        view<br>        returns (<br>            address[],<br>            uint16[],<br>            uint16<br>        )<br>    &#123;<br>        return _voteWeight.getInfo();<br>    &#125;<br><br>//具体调用<br>function getInfo(VoteWeightInfo storage self)<br>        internal<br>        view<br>        returns (<br>            address[],<br>            uint16[],<br>            uint16<br>        )<br>    &#123;<br>        return (self.keys, self.values, self.threshold);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>setOwnerByManager(address owner)</p></li><li><p>setStatics() </p></li><li><p>setVoteStatics(address[] key,uint16[] value,uint16 threshold)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function init(<br>        VoteWeightInfo storage self,<br>        address[] key,<br>        uint16[] value,<br>        uint16 threshold<br>    ) internal isWeightEmpty(self) returns (bool) &#123;<br>        self.keys = key;<br>        self.values = value;<br>        self.threshold = threshold;<br>        for (uint256 i = 0; i &lt; key.length; i++) &#123;<br>            self.index[key[i]] = (i + 1);<br>        &#125;<br>        return true;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>setWeight(address externalAccount, uint16 weight)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//根据外部账户，获取映射的内部地址，更改权限</span><br>address a = <span class="hljs-constructor">AccountManager(<span class="hljs-params">_accountManager</span>)</span>.get<span class="hljs-constructor">UserAccount(<span class="hljs-params">externalAccount</span>)</span>;<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_voteWeight</span>.</span></span>set<span class="hljs-constructor">Weight(<span class="hljs-params">a</span>, <span class="hljs-params">weight</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p> register(uint8 txType,address requestAddress,address newAddress,uint16 newValue)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">(b, id) = _voteInfo.register(<br>            _voteWeight,<br>            txType,<br>            requestAddress,<br>            newAddress,<br>            newValue<br>        );<br></code></pre></td></tr></table></figure></li><li><p>unregister(uint256 id)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">b</span> = _voteInfo.unregister(id)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>vote(uint256 id, bool flag)</p></li><li><p>function passed(uint8 txType,address requestAddress,address newAddress,uint16 newValue)</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//验证是否是有效的投票</span><br>_voteInfo.validVote(<br>                    txType,<br>                    txType,<br>                    requestAddress,<br>                    <span class="hljs-keyword">new</span><span class="hljs-type">Address</span>,<br>                    <span class="hljs-keyword">new</span><span class="hljs-type">Value</span><br>                );<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-AccountManager"><a href="#6-AccountManager" class="headerlink" title="6 AccountManager"></a>6 AccountManager</h3><p>账户管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">import &quot;./WEBasicAuth.sol&quot;;<br>import &quot;./BaseAccount.sol&quot;;<br>import &quot;./UserAccount.sol&quot;;<br><br>contract AccountManager is WEBasicAuth&#123;<br>    //定义外部账户和用户账户<br>    mapping(address =&gt; address) _externalAccountMapping;<br>    mapping(address =&gt; address) _userAccountMapping;<br><br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><p>函数:</p><ul><li><p>accountPermitFunc(address externalAccount,uint8 operType,address newAddress,uint16 newValue)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs solidity">        if (_externalAccountMapping[externalAccount] == address(0)) &#123;<br>            return false;<br>        &#125;<br>        address ac = _externalAccountMapping[externalAccount];<br>        UserAccount userAccount = UserAccount(ac);<br>        return<br>            userAccount.passed(operType, externalAccount, newAddress, newValue);<br><br>//如果含外部账户到用户账户的映射，那么通过用户账户的passed函数检查是否允许<br><br></code></pre></td></tr></table></figure></li><li><p>newAccount(address externalAccount) 创建新账户</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//外部账户</span><br>UserAccount userAccount = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserAccount(<span class="hljs-params">this</span>, <span class="hljs-params">externalAccount</span>)</span>;<br>address ua = address(userAccount);<br>_externalAccountMapping<span class="hljs-literal">[<span class="hljs-identifier">externalAccount</span>]</span> = ua;<br>_userAccountMapping<span class="hljs-literal">[<span class="hljs-identifier">ua</span>]</span> = externalAccount;<br></code></pre></td></tr></table></figure></li><li><p>hasAccount(address externalAccount) 判断是否有账户</p></li><li><p>isExternalAccountNormal(address externalAccount)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">address account = _externalAccountMapping[externalAccount];<br><span class="hljs-keyword">if</span>(account==<span class="hljs-number">0x0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>BaseAccount a = BaseAccount(account);<br><span class="hljs-keyword">return</span> a.isNormal();<br></code></pre></td></tr></table></figure></li><li><p>function setExternalAccount(address newExternalAccount,address oldExternalAccount)<br>更新外部账户，实际是更新映射关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">address userAccount = _externalAccountMapping[oldExternalAccount];<br>_externalAccountMapping[newExternalAccount] = userAccount;<br>_externalAccountMapping[oldExternalAccount] = 0x0;<br>_userAccountMapping[userAccount] = newExternalAccount;<br><br>UserAccount ac = UserAccount(userAccount);<br>ac.setOwnerByManager(newExternalAccount);<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-WEGovernance-sol"><a href="#8-WEGovernance-sol" class="headerlink" title="8 WEGovernance.sol"></a>8 WEGovernance.sol</h3><p>WEBase治理–&gt;WeBase委员会指引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs solidity">import &quot;./WEBoardVoteGuard.sol&quot;;<br>import &quot;./AccountManager.sol&quot;;<br><br>contract WEGovernance is WEBoardVoteGuard &#123;<br>    address _accountManager;<br>    // 0: admin-mode; 1: vote-mode.<br>    uint8 public _mode = 0;<br>    <br>    //构造函数比较其他，我们一般做法是给定外部账户作为管理员账户,每一次运行构造函数<br>    constructor(uint8 mode) public &#123;<br>            _mode = mode;<br>            AccountManager accountManager = new AccountManager();<br>            _accountManager = address(accountManager);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他方法都是WeBase账户治理的方法， 更新外部账户，解冻，冻结，取消, 3-freeze 4-unfreeze 5-cancel</p><h3 id="AdminGovernBuilder-sol"><a href="#AdminGovernBuilder-sol" class="headerlink" title="AdminGovernBuilder.sol"></a>AdminGovernBuilder.sol</h3><p>超级管理员治理模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">import &quot;./WEGovernance.sol&quot;;<br>import &quot;./AccountManager.sol&quot;;<br><br>contract AdminGovernBuilder&#123;<br>    constructor() public &#123;<br>        WEGovernance governance = new WEGovernance(0);<br>        governance.setOwner(msg.sender);<br>        _governance = address(governance);<br>        address _accountManager = governance.getAccountManager();<br>        AccountManager accountManager = AccountManager(_accountManager);<br>        accountManager.newAccount(msg.sender);<br>        emit LogCreate(_governance, _accountManager);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一共有以下几个账户:</p><pre><code>_governance: 治理者地址_accountManager: 账户管理者地址_owner: msg.senderaccountManager.newAccount(msg.sender);将msg.sender和内部userAccount的地址映射</code></pre><p>另一种写法:</p><pre><code>WEGovernance governance = WEGovernance(_governance);这里并没有WEGovernance(address)的构造方法但是，我们可以用 WEGovernance(WEGovernance实例地址)的形式来实现恢复实例这样就可以根据地址来调用方法。</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./Father.sol&quot;</span>;<br><br>contract Demo&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span>(<span class="hljs-params"><span class="hljs-built_in">string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br><br>contract Child is Father &#123;<br>    <span class="hljs-comment">// 0-none, 1- social vote;</span><br>    uint8 <span class="hljs-keyword">public</span> _statics;<br>    address <span class="hljs-keyword">public</span> _owner;<br>    <span class="hljs-title">constructor</span>(<span class="hljs-params">address accountManager</span>)<br>        <span class="hljs-title">public</span><br>        <span class="hljs-title">Father</span>(<span class="hljs-params">accountManager</span>)<br>    &#123;<br>        _statics = <span class="hljs-number">0</span>;<br>       <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAddress</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">returns</span>(<span class="hljs-params"><span class="hljs-built_in">string</span></span>)</span>&#123;<br>        address _demo = address(<span class="hljs-keyword">new</span> Demo());<br>        Demo demo = Demo(_demo);<br>        <span class="hljs-keyword">return</span> demo.getInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="VoteGovernBuilder-sol"><a href="#VoteGovernBuilder-sol" class="headerlink" title="VoteGovernBuilder.sol"></a>VoteGovernBuilder.sol</h3><p>治理委员会模式</p><h3 id="WeightVoteGovernBuilder-sol"><a href="#WeightVoteGovernBuilder-sol" class="headerlink" title="WeightVoteGovernBuilder.sol"></a>WeightVoteGovernBuilder.sol</h3><p>加权的治理委员会模式</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="1-部署超级管理员模式"><a href="#1-部署超级管理员模式" class="headerlink" title="1 部署超级管理员模式"></a>1 部署超级管理员模式</h3><pre><code>部署 AdminGovernBuilder 合约部署用户是 0x31845da234e0cfe6d3f6246691dfd4368bc2b379 g_admin(0) 合约地址 0x378840fbcf99841010f8edc7573c75115cb3b07c(1) _governance:   获得治理账户合约的地址    0x9dc88b94543a1fbd79f7fb535bc9e4ee785f21a6(2) getAccountManager():  获得账户管理合约的地址和账户管理控制器的地址    0xc30f5719d64bbd80d0ae54121e65b2b9cccd93f1(3) 调用WeGovernance.getAccountManager():    0xc30f5719d64bbd80d0ae54121e65b2b9cccd93f1</code></pre><h3 id="2-治理委员会模式-VoteGovernBuilder"><a href="#2-治理委员会模式-VoteGovernBuilder" class="headerlink" title="2 治理委员会模式 VoteGovernBuilder"></a>2 治理委员会模式 VoteGovernBuilder</h3><pre><code>部署g_03:0x5bfe66040398afd9439d2a41b01831ba9df3a09dg_02:0x2d575d41d8065818baaabdd8024d9c885ad94f8dg_01:0xe35a97dc0ef80f92ed211f1785e6526182aa34ed账户地址: [&quot;0x5bfe66040398afd9439d2a41b01831ba9df3a09d&quot;,&quot;0x2d575d41d8065818baaabdd8024d9c885ad94f8d&quot;,&quot;0xe35a97dc0ef80f92ed211f1785e6526182aa34ed&quot;](0) 合约地址: 0xb214a1b3237a15e32046892185498179b46b6ad0(1) _governance: 获取治理账户的地址    0x16d7ed5e6290db466edb47eb627e442b90e53781(2) AccountManager的地址: 0x728b709bb9f2f60a8118a2a21ed7e58e5efeb8b4</code></pre><p>上面展示了如何不是超级管理员模式和治理委员会模式(包括多签制和权重制)的治理合约的部署</p><p>在一个链上，可以基于不同的业务应用或者场景来采用不同的管理模式。 一般在一种独立的业务或者场景中，部署一个治理合约。 例如，在链的监管场景中，推荐使用超级管理员模式。 在区块链分布式商业中，推荐使用多签制。 在类似董事会的治理场景中，推荐采用可设置投票人不同权重的权重投票制</p><h3 id="4-调用治理合约。"><a href="#4-调用治理合约。" class="headerlink" title="4 调用治理合约。"></a>4 调用治理合约。</h3><h4 id="4-1-账户相关的操作-超级管理员模式"><a href="#4-1-账户相关的操作-超级管理员模式" class="headerlink" title="4.1 账户相关的操作(超级管理员模式)"></a>4.1 账户相关的操作(超级管理员模式)</h4><p>使用AccountManager,并在治理账户的参与下，开始创建账户。<br>AccountManaer的合约地址: 0xc30f5719d64bbd80d0ae54121e65b2b9cccd93f1<br>将账户admin_acc1: 0xb105fb81aace81e220e560e82d7cc9b20b1e5fd7 添加到账户管理器的普通账户中</p><p>LogSetOwner():<br>    owner: 0xB105fB81AACe81e220e560e82d7Cc9b20B1e5fD7<br>    contractAddress: 0x736d12e62a6988F42740b563EBFfe0dd0FA605e1</p><p>externalAccount: 0xB105fB81AACe81e220e560e82d7Cc9b20B1e5fD7<br>userAccount: 0x736d12e62a6988F42740b563EBFfe0dd0FA605e1</p><p>此时: 治理账户–&gt;AccountManager–&gt;通过newAccount，将一个外部账户和内部账户进行关联</p><p><strong>移交超级账户管理员</strong><br>治理合约地址: 0x9dc88b94543a1fbd79f7fb535bc9e4ee785f21a6<br>原来部署时创建合约的用户即  超级管理员 0x31845da234e0cfe6d3f6246691dfd4368bc2b379 g_admin<br>新建账户   g_admin_new: 0x0fb3a6c82c901f0a55ea586f37a72754cfed8ddb</p><pre><code>注意执行:     (1) 必须使用超级管理员执行    (2) 移交的目标账户必须是已经映射的账户    所以用前面newAccount 时的externalAccount</code></pre><p><strong>重置用户私钥</strong><br>此时的外部账户 admin_acc1 对应的内部账户地址是： 0x736d12e62a6988F42740b563EBFfe0dd0FA605e1,<br>重置用户私钥，也就是说更改内部账户0x7c对应的外部账户地址。<br>新建admin_acc02: 0x32118760878deb9ee0b7b2b02bbf24af844af083</p><p>0xc30f5719d64bbd80d0ae54121e65b2b9cccd93f1</p><pre><code>old------------&gt; useraccountAold--&gt;new------&gt; useraccountA</code></pre><h4 id="4-2-治理委员会模式"><a href="#4-2-治理委员会模式" class="headerlink" title="4.2 治理委员会模式"></a>4.2 治理委员会模式</h4><ul><li><p>register申请发起治理请求，包括 10-申请重新设置治理委员会投票阈值，11-申请重设治理委员会投票权重，2-申请重置账户，3-申请冻结账户，4-申请解冻账户，5-申请注销账户</p></li><li><p>vote 对申请项投票</p></li><li><p>setExternalAccount 重置用户私钥</p></li><li><p>doOper 投票通过后，发起治理操作，包括冻结，解冻，注销</p></li><li><p>setThreshold 设置投票的阈值</p></li><li><p>setWeight 设置投票者的权重</p></li><li><p>getRequestInfo 查看投票详情信息</p></li></ul><h4 id="普通账户的相关操作"><a href="#普通账户的相关操作" class="headerlink" title="普通账户的相关操作"></a>普通账户的相关操作</h4><p>普通账户可以通过accountManager来重置和注销账户</p><ul><li>setExternalAccountByUser 重置用户私钥   0x32118760878deb9ee0b7b2b02bbf24af844af083   —&gt;     0x23d54aceb34ba2ddcf18f2109c02eb1fb0033404</li><li>cancelByUser 注销账户</li></ul><h4 id="用户自主设置账户治理模式"><a href="#用户自主设置账户治理模式" class="headerlink" title="用户自主设置账户治理模式"></a>用户自主设置账户治理模式</h4><ul><li>setStatics 修改重置类型，0-不支持社交好友重置私钥，1-支持社交好友重置私钥</li><li>setWeight 设置关联社交好友普通账户的权重</li><li>register 发起投票</li><li>vote 投票</li><li>setExternalAccountBySocial 重置私钥</li></ul><h3 id="5-将合约引入到用户自身的业务合约中"><a href="#5-将合约引入到用户自身的业务合约中" class="headerlink" title="5 将合约引入到用户自身的业务合约中"></a>5 将合约引入到用户自身的业务合约中</h3><p>用户在具体的业务合约中，可以采用引入的方式来使用WeBankBlockchain-Governance-Account智能合约。</p><h4 id="5-1-在通用的场景中引入治理合约"><a href="#5-1-在通用的场景中引入治理合约" class="headerlink" title="5.1 在通用的场景中引入治理合约"></a>5.1 在通用的场景中引入治理合约</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">// 在业务合约中声明import账户管理合约。</span><br>import <span class="hljs-string">&quot;./AccountManager.sol&quot;</span><br><br>XXContract &#123;<br>  <span class="hljs-comment">// 创建AccountManager合约</span><br>  AccountManager _accountManager;<br>  <br>  construct(address accountManager) &#123;<br>    <span class="hljs-comment">// 传入已部署的AccountManager地址。此地址由上面的部署治理合约步骤获得。</span><br>        _accountManager = <span class="hljs-constructor">AccountManager(<span class="hljs-params">accountManager</span>)</span>;<br>  &#125; <br>  <br>    <span class="hljs-comment">// ……</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">do</span><span class="hljs-constructor">SomeBiz()</span> public &#123;<br>        <span class="hljs-comment">// 获得普通用户的地址</span><br>        address userAccountAddress = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_accountManager</span>.</span></span>get<span class="hljs-constructor">UserAccount(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span>;<br><span class="hljs-comment">// **特别注意**： 在具体的业务中，需使用此普通用户的地址来代替以往的外部地址。</span><br>        <span class="hljs-keyword">do</span><span class="hljs-constructor">Biz(<span class="hljs-params">userAccountAddress</span>)</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用说明: 将accountManager的sol引入，并将合约的管理账户设置为  合约调用者对应的内部UserAccount，此时一切的账户管理都移交到了账户治理合约中。</p><h4 id="5-2-在设计转账的场景中引入治理合约"><a href="#5-2-在设计转账的场景中引入治理合约" class="headerlink" title="5.2 在设计转账的场景中引入治理合约"></a>5.2 在设计转账的场景中引入治理合约</h4><p>在涉及到转账的场景中，引入合约的方式更为典型，本例来源于我们提供的使用demo，限于篇幅，此处略去了和示例非密切相关的部分，获取完整的demo代码可查找src/main/contracts/samples/TransferDemo/路径。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>import <span class="hljs-string">&quot;./AccountManager.sol&quot;</span>;<br>contract TransferDemo &#123;<br><span class="hljs-comment">// ……</span><br>    mapping(address =&gt; uint256) <span class="hljs-keyword">private</span> _balances;<br>    <span class="hljs-comment">// import AccountManager</span><br>    AccountManager _accountManager;<br><br>    constructor(address accountManager, uint256 initBalance) public &#123;<br>        <span class="hljs-comment">// 初始化accountManager，此地址由上面的部署治理合约步骤获得。</span><br>        _accountManager = <span class="hljs-constructor">AccountManager(<span class="hljs-params">accountManager</span>)</span>;<br><span class="hljs-comment">// 合约的owner设置为用户普通账户的地址</span><br>        address owner = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_accountManager</span>.</span></span>get<span class="hljs-constructor">UserAccount(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span>;<br>        _balances<span class="hljs-literal">[<span class="hljs-identifier">owner</span>]</span> = initBalance;<br>    &#125;<br><br>    modifier validate<span class="hljs-constructor">Account(<span class="hljs-params">address</span> <span class="hljs-params">addr</span>)</span> &#123;<br>        require(<br>            <span class="hljs-comment">// 调用accountManager来判断该外部账户的地址是否已被注册及账户状态是否正常等。</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_accountManager</span>.</span></span>is<span class="hljs-constructor">ExternalAccountNormal(<span class="hljs-params">addr</span>)</span>,<br>            <span class="hljs-string">&quot;Account is abnormal!&quot;</span><br>        );<br>        _;<br>    &#125;<br>   <span class="hljs-comment">// ……</span><br>    <span class="hljs-keyword">function</span> balance(address owner) public view returns (uint256) &#123;<br>        <span class="hljs-comment">// 1.先根据外部账户的地址查询普通账户的地址，然后仔查询余额</span><br>        return _balances<span class="hljs-literal">[<span class="hljs-identifier">_accountManager</span>.<span class="hljs-identifier">getUserAccount</span>(<span class="hljs-identifier">owner</span>)]</span>;<br>    &#125;<br>    <span class="hljs-keyword">function</span> transfer(address toAddress, uint256 value)<br>        public<br>        <span class="hljs-comment">// 检查转入方和转出方的外部账户地址是否合法。</span><br>        validate<span class="hljs-constructor">Account(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span><br>        validate<span class="hljs-constructor">Account(<span class="hljs-params">toAddress</span>)</span><br>        check<span class="hljs-constructor">TargetAccount(<span class="hljs-params">toAddress</span>)</span><br>        returns (<span class="hljs-built_in">bool</span>)<br>    &#123;<br>        <span class="hljs-comment">// 1. 查询转出方的普通账户地址</span><br>        address fromAccount = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_accountManager</span>.</span></span>get<span class="hljs-constructor">UserAccount(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span>;<br>        <span class="hljs-comment">// 2. 查询转出方普通账户余额</span><br>        uint256 balanceOfFrom = _balances<span class="hljs-literal">[<span class="hljs-identifier">fromAccount</span>]</span>.sub(value);<br>        <span class="hljs-comment">// 3. 转出方金额扣除</span><br>        _balances<span class="hljs-literal">[<span class="hljs-identifier">fromAccount</span>]</span> = balanceOfFrom;<br>        <span class="hljs-comment">// 4. 查询转入方的普通账户地址</span><br>        address toAccount = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_accountManager</span>.</span></span>get<span class="hljs-constructor">UserAccount(<span class="hljs-params">toAddress</span>)</span>;<br>        <span class="hljs-comment">// 5. 转入方余额增加</span><br>        uint256 balanceOfTo = _balances<span class="hljs-literal">[<span class="hljs-identifier">toAccount</span>]</span>.add(value);<br>        <span class="hljs-comment">// 设置转入方普通账户的余额</span><br>        _balances<span class="hljs-literal">[<span class="hljs-identifier">toAccount</span>]</span> = balanceOfTo;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>账户治理组件的代码就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Governance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>account</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-Governance-账户</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/08/FISCO-Governance-%E8%B4%A6%E6%88%B7/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/08/FISCO-Governance-%E8%B4%A6%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1-区块链常用术语"><a href="#1-区块链常用术语" class="headerlink" title="1 区块链常用术语"></a>1 区块链常用术语</h3><ul><li>外部账户: 私钥控制，没有代码关联，可以发起交易，外部账户的地址是由私钥生成的。</li><li>合约账户: 又称为用户账户。 合约部署生成，与代码关联，不可发起交易只能被外部账户调用。 合约账户的地址是在创建合约时确定的。</li></ul><h3 id="2-账户治理组件所引入的术语"><a href="#2-账户治理组件所引入的术语" class="headerlink" title="2 账户治理组件所引入的术语"></a>2 账户治理组件所引入的术语</h3><ul><li>区块链业务应用(Blockchain Business Application),基于区块链技术，实现和满足特定业务领域的需求。在一个区块链业务应用中，一般会依赖智能合约技术，其执行结果记录在分布式账本中。 在一个区块链网络中，可以发布多个区块链业务应用。 而在一个区块链业务应用中，最多只能定义一个治理账户。</li></ul><p><img src="1.png"></p><ul><li><p>治理账户(Governance Account)，区块链业务应用治理主体的管理账户。 该账户本身为合约账户，其账户关联了合约治理相关的代码，绑定了一个或一组外部账户。只有被绑定的外部账户才能操作此治理账户。</p><p>  治理账户是合约账户<br>  外部账户—–&gt; 绑定—-&gt;治理账户 —–&gt;关联——&gt; 合约治理相关的代码</p></li><li><p>普通账户(Normal Account), 区块链业务应用治理的对象。该账户本身为合约账户，该账户与另一个外部账户一一映射并被绑定，关联了状态、配置和操作的代码。 只有治理账户和被绑定的外部账户才能操作此普通账户。</p><p>  普通账户为合约账户<br>  外部账户—-&gt; 映射—-&gt; 普通账户(关联了状态、配置和操作的代码)</p></li><li><p>账户管理者(Account Governance Administer), 在一个区块链业务应用中，区块链账户治理者负责直接管理和操作治理账户，即所谓的【区块链业务应用管理员】。 根据是否由单一机构管理，又可以划分为带有传统中心化管理特征的超级管理员和去中心化多结构协作的账户治理委员两类。 治理者行使账户的管理职能，支持对普通账户重置私钥、冻结、解冻、销户等操作。</p></li><li><p>治理模式(Governance Mode): 账户治理者所采用的的账户治理的方式，主要有两种，分为  管理员模式  和  治理委员会模式 (投票模式)。 其中，投票模式又可以根据投票者权重是否相等，进一步细分为多签投票制和权重投票制。</p></li><li><p>管理员模式:在一个区块链业务应用中，可以指定超级管理员治理模式: 在该模式下，治理账户由一个唯一的治理者来控制</p></li><li><p>账户治理委员会(Account Governance Committee), 在一个区块链业务应用中，通常是参与区块链业务应用的业务多方共同选出的一个委员会，共同参与账户治理。委员会成员拥有对账户治理事务的投票权，通过投票的方式，来决策和管理相关操作。 如果赞成的选票超过预先定义的阈值，则投票决策通过。</p></li><li><p>多签投票模式（Multi-Vote Mode） 如果治理委员会所有机构的投票权重相等且为1，则称为多签投票模式。</p></li><li><p>权重投票模式（Weighted-Vote Mode） 如果治理委员会所有机构的投票权重可以任意定义，则称为权重投票模式。多签投票模式也可以理解为一种特殊的权重投票模式，即所有治理委员会的投票权重为1。</p></li><li><p>社交好友重置机制（Social Friends Reset Mechanism），是指用户为普通账户设置一组关联的其他普通账户的地址，这些普通账户一般是用户的社交好友们的普通账户。一旦用户需要重置私钥，可通过联系好友发起重置申请，经过多个社交好友同意后，可重置用户普通账户所绑定的私钥。</p></li></ul><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h3><h4 id="1-1-为什么需要引入账户治理？"><a href="#1-1-为什么需要引入账户治理？" class="headerlink" title="1.1 为什么需要引入账户治理？"></a>1.1 为什么需要引入账户治理？</h4><p>在现有的区块链网络中，是以私钥为控制的中心进行设计的： 每个区块链的参与者首先创建一个私钥，通过这个私钥生成公钥并进一步生成外部账户；随后，参与者使用这个私钥对发起的交易报文进行签名并上链。参与者之间也可以通过外部账户的地址来识别和标识身份，完成相关的业务交互。可以说，这个私钥至关重要，一旦泄露或丢失，后果极为严重：</p><ul><li>泄露以后，盗窃者可以任意控制该外部账户下所有的合约，发送任意的交易指令。</li><li>丢失以后，原有的用户会失去对该外部账户下所有的合约的控制，无法发送任何的交易指令。</li></ul><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/acct_lost.png"></p><h4 id="1-2-账户治理机制是如何解决上述痛点的？"><a href="#1-2-账户治理机制是如何解决上述痛点的？" class="headerlink" title="1.2 账户治理机制是如何解决上述痛点的？"></a>1.2 账户治理机制是如何解决上述痛点的？</h4><p>为了解决此问题，需要引入一种账户治理的机制，将原有的账户控制以私钥为中心，改为以普通账户为中心。<br>当用户发现泄露私钥后，可以自助发起重置普通账户所关联映射的私钥。当用户发现丢失私钥后，可以通过向账户治理委员会发起重置申请，更换私钥。 而且，当用户更换私钥后，普通账户的地址始终不变，保证了业务平滑运行。</p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/acct_reset.png"></p><p>除了解决这个核心痛点外，账户治理体系还额外引入了注册、冻结、解冻、销户等概念，使得在一个分布式协作的业务模式中，账户相关的操作形成了闭环和自洽的治理逻辑。这样，当一个基于区块链的业务系统涉及到链上的账户体系时，可以快速借助账户治理组件的功能，快速、灵活得实现账户体系的治理。</p><h4 id="1-3-治理者应该如何进行账户治理？"><a href="#1-3-治理者应该如何进行账户治理？" class="headerlink" title="1.3 治理者应该如何进行账户治理？"></a>1.3 治理者应该如何进行账户治理？</h4><p>在传统的中心化的解决方案中，存在一个超级管理员的角色，典型的如传统关系型数据库中的root超级管理员，拥有所有的权限。为了兼容这种需求，我们提供了超级管理员的账户治理模式。</p><p>但是，传统的中心化解决方案中，存在着权限独大、易被操纵、不利制衡的缺陷，无法满足日益蓬勃的多机构、分布式协作商业模式下的发展。如果链的运营是由一组对等的机构采用分布式协作的方式来管理，则推荐采用治理委员会模式。</p><p>治理委员会模式下的治理者通常是参与链的多方共同选出的一个委员会，由多个机构共同进行管理和决策。治理账户维护了一组投票帐号和每个账户对应的投票权重，投票通过的阈值。当某个操作的投票数量超过阈值时，才允许执行该操作。无论是平权还是不同权重，借助这种灵活的投票机制，可以满足大部分复杂场景的治理需求。</p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/acct_vote.png"></p><h3 id="2-概览"><a href="#2-概览" class="headerlink" title="2 概览"></a>2 概览</h3><p>WeBankBlockchain-Governance-Account是一套开源的区块链账户治理的中间件解决方案，提供了多种区块链账户治理模式、账户生命周期管理、用户自主管理区块链账户治理相关的整体解决方案，提供了包括</p><ul><li>治理账户创建</li><li>多种治理模式选择</li><li>治理权限授权</li><li>账户创建、冻结、解冻、更换私钥、销户<br>等账户生命周期的各类账户管理功能。</li></ul><h4 id="2-1-关键特性"><a href="#2-1-关键特性" class="headerlink" title="2.1 关键特性"></a>2.1 关键特性</h4><ul><li>支持多种治理方式</li><li>去中心化的分布式协作治理思想</li><li>账户全生命周期的治理</li><li>全面、灵活的集成方式</li><li>支持可插拔的设计，对业务侵入小</li><li>支持国密</li><li>支持社交好友重置私钥</li></ul><h4 id="2-2-组成部分"><a href="#2-2-组成部分" class="headerlink" title="2.2 组成部分"></a>2.2 组成部分</h4><p>WeBankBlockchain-Governance-Account包含了以下组成部分：</p><ul><li><p>合约代码， 最核心的账户治理实现部分。 基于Solidity语言实现，完全适配FISCO BCOS。 理论上可在任何支持EVM虚拟机的区块链系统上运行。</p></li><li><p>Java SDK。适配了合约代码。通过集成Java SDK以后，可以适配和调用账户治理的所有合约接口。此外，进一步对使用接口进行简化和封装，可符合Java程序员的使用习惯。</p></li><li><p>合约集成Demo。提供了基于存证和积分转账场景的两个demo。（详情可参考合约中samples目录）</p></li><li><p>SDK集成Demo。提供了SDK集成和使用的demo，展示了如何使用Java SDK。</p></li><li><p>TDD测试代码。包含了全套的合约测试代码，轻松支持CI/CD。(详情可参考Java SDK中src/test/java目录下的代码)</p></li><li><p>web管理台  直接通过可视化页面来进行操作，正在开发中……</p></li></ul><h4 id="2-3-集成方式"><a href="#2-3-集成方式" class="headerlink" title="2.3 集成方式"></a>2.3 集成方式</h4><p>在FISCO BCOS生态中，WeBankBlockchain-Governance-Account提供了以下使用和集成的方式：</p><ul><li>通过部署治理合约来发布合约到链上，获得账户治理的能力；</li><li>通过在自身业务的合约中引入或集成账户治理合约；</li><li>通过SDK引入Jar包，集成到自己的Java项目中来调用提供的接口；</li></ul><p>!()[<a href="https://governance-doc.readthedocs.io/zh_CN/latest/_images/acct_frame.png]">https://governance-doc.readthedocs.io/zh_CN/latest/_images/acct_frame.png]</a></p><p>业务合约+治理合约； 治理合约调用业务合约</p><h4 id="2-4-核心功能列表"><a href="#2-4-核心功能列表" class="headerlink" title="2.4 核心功能列表"></a>2.4 核心功能列表</h4><h5 id="2-4-1-治理者账户相关核心功能"><a href="#2-4-1-治理者账户相关核心功能" class="headerlink" title="2.4.1 治理者账户相关核心功能"></a>2.4.1 治理者账户相关核心功能</h5><ul><li>重置用户私钥</li><li>冻结普通账户</li><li>解冻普通账户</li><li>注销普通账户</li><li>移交管理员权限（超级管理员模式下）</li><li>添加或修改一个治理委员会的投票账户（治理委员会模式下）</li><li>删除一个治理委员会的投票账户（治理委员会模式下）</li><li>设置投票阈值 （治理委员会模式下）</li></ul><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/admin-mode.png"></p><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/governor-mode.png"></p><h5 id="2-4-2-普通账户相关核心功能"><a href="#2-4-2-普通账户相关核心功能" class="headerlink" title="2.4.2 普通账户相关核心功能"></a>2.4.2 普通账户相关核心功能</h5><ul><li>创建一个新账户</li><li>重置用户私钥</li><li>注销账户</li><li>添加社交好友来支持重置账户私钥</li><li>添加或删除关联的社交好友</li><li>查询普通账户状态</li><li>查询外部账户是否已注册</li></ul><p><img src="https://governance-doc.readthedocs.io/zh_CN/latest/_images/normal_user.png"></p><h4 id="2-5-业务流程介绍"><a href="#2-5-业务流程介绍" class="headerlink" title="2.5  业务流程介绍"></a>2.5  业务流程介绍</h4><ol><li>确定治理方式，确定是采用超级管理员模式还是治理委员会模式。所有的治理者需准备和生成机构的私钥。</li><li>部署治理合约。根据步骤1确定的治理方式，发布对应的治理合约。</li><li>用户普通账户开户。用户预先准备好自己的私钥，通过调用步骤2所部署的治理合约所生成的控制合约来开户。</li><li>普通账户地址、状态查询。通过调用步骤2所部署的治理合约所生成的控制合约来查询用户地址和状态。</li><li>账户治理常规操作。治理者可发起和操作普通账户。包括了冻结、解冻、销户、重置私钥等普通账户类操作，以及修改投票阈值，修改成员投票权重、修改治理成员等治理账户类的操作。</li><li>普通账户自助操作。普通账户可发起重置私钥，设置账户管理模式，添加关联社交好友普通账户等操作。</li><li>普通账户销户。普通账户销户完成后，该账户生命周期终结。</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>git clone <a href="https://gitee.com/WeBankBlockchain/Governance-Account.git">https://gitee.com/WeBankBlockchain/Governance-Account.git</a></p><ul><li>所有智能合约文件位于src/main/contracts路径下</li><li>合约demo位于src/main/contracts/samples路径下</li><li>合约测试代码位于src/test/java路径下</li><li>其余部分代码为Java SDK代码。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Governance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>account</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-7-证书管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/08/FISCO-7-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/08/FISCO-7-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="FISCO-BCOS-证书管理"><a href="#FISCO-BCOS-证书管理" class="headerlink" title="FISCO BCOS 证书管理"></a>FISCO BCOS 证书管理</h2><p>FISCO BCOS网络采用面向CA的准入机制，支持任意多级的证书结构，保障信息保密性、认证性、完整性、不可抵赖性。</p><p>FISCO BCOS 使用x509协议的证书格式，默认采用三级证书结构， 链证书，机构证书，节点证书。</p><p>机构的证书请求文件: agency.csr, 签发机构证书 agency.crt</p><p>机构私钥由机构管理员持有，可以对机构下属节点签发节点证书。</p><p>节点证书是节点身份的凭证，用于与其他持有合法证书的节点间 建立SSL连接，并进行加密通讯。</p><p>sdk证书是sdk与节点通讯的凭着，机构生成SDK证书，运行sdk与节点进行通讯。</p><p><img src="01.png"></p><pre><code>.key   私钥文件.crt   证书文件.csr   证书请求文件</code></pre><h2 id="角色定义"><a href="#角色定义" class="headerlink" title="角色定义"></a>角色定义</h2><p>FISCO BCOS的证书结构中，共有四种角色，分别是联盟链委员会管理员、机构、节点和SDK</p><h3 id="联盟链委员会"><a href="#联盟链委员会" class="headerlink" title="联盟链委员会"></a>联盟链委员会</h3><p>联盟链委员会管理链的私钥，并根据机构的证书请求文件 agency.csr 为机构颁发机构证书</p><pre><code>ca.crtca.key</code></pre><p>FISCO BCOS 进行ssl加密通信时，拥有相同链证书ca.crt 的节点才可以建立连接。<br>链证书ca.crt在节点，sdk 和机构中都是一样的。</p><h3 id="机构"><a href="#机构" class="headerlink" title="机构"></a>机构</h3><p>机构管理员管理机构的私钥，可以颁发节点证书和SDK证书</p><pre><code>ca.crt 链证书agency.crt 机构证书agency.csr 机构证书请求文件agency.key 机构密钥</code></pre><h3 id="节点-SDK"><a href="#节点-SDK" class="headerlink" title="节点/SDK"></a>节点/SDK</h3><ul><li>FISCO BCOS节点包括节点证书和私钥，用于建立节点间SSL加密连接</li><li>SDK包括SDK证书和私钥，用于与区块链节点建立SSL加密连接。</li></ul><pre><code>ca.crt 链证书node.crt 节点证书node.key 节点密钥sdk.crt  sdk证书sdk.key  sdk私钥</code></pre><h2 id="证书生成过程"><a href="#证书生成过程" class="headerlink" title="证书生成过程"></a>证书生成过程</h2><pre><code>./generator --generate_chain_certificate ./dir_chain_ca./generator --generate_agency_certificate ./dir_agency_ca ./dir_chain_ca SXCZ./generator --generate_node_certificate ./dir_node_ca ./dir_agency_ca/SXCZ/  20050./generator --generate_sdk_certificate ./dir_sdk_ca ./dir_agency_ca/SXCZ/</code></pre><h3 id="1-链文件"><a href="#1-链文件" class="headerlink" title="1 链文件"></a>1 链文件</h3><p>ca.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBvTCCAWKgAwIBAgIJAKqHVTSzAvyhMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyMzE0WhcNMzExMjA2MDYyMzE0WjA8MRUwEwYDVQQDDAxk</span><br><span class="hljs-comment">aXJfY2hhaW5fY2ExEzARBgNVBAoMCmZpc2NvLWJjb3MxDjAMBgNVBAsMBWNoYWlu</span><br><span class="hljs-comment">MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE6lC0Uymwo</span><span class="hljs-literal">+</span><span class="hljs-comment">333YT1io3Jg7</span><span class="hljs-literal">+</span><span class="hljs-comment">sfDbuMpEy</span><br><span class="hljs-comment">zBLon5Jqax1t7gJFzHJ5W5laejeQXDg12Dm6UwmSydcwd9Ceb63pBaNQME4wHQYD</span><br><span class="hljs-comment">VR0OBBYEFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw3KSCRVcFCsHwg0TDMB8GA1UdIwQYMBaAFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw</span><br><span class="hljs-comment">3KSCRVcFCsHwg0TDMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDSQAwRgIhAPIr</span><br><span class="hljs-comment">jnSV45mOdZupoNl8V4xF1aocmrzqrheb7F3yBl6JAiEA6RyZVnPOzlfUmEMwQRyU</span><br><span class="hljs-comment">V6jLwHbYnjgnqeJIPxTMg5E=</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>ca.key</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgt9mHXE4p0wRHauvPUW9g<br>NstV/sJXIcLzjJK80PYlLzOhRANCAATqULRTKbCj7ffdhPWKjcmDv6x8Nu4ykTLM<br>EuifkmprHW3uAkXMcnlbmVp6N5BcODXYObpTCZLJ1zB30J5vrekF<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><p>ca.srl</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">897414A4DC2677CF<br></code></pre></td></tr></table></figure><h3 id="2-机构"><a href="#2-机构" class="headerlink" title="2 机构"></a>2 机构</h3><p>ca.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBvTCCAWKgAwIBAgIJAKqHVTSzAvyhMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyMzE0WhcNMzExMjA2MDYyMzE0WjA8MRUwEwYDVQQDDAxk</span><br><span class="hljs-comment">aXJfY2hhaW5fY2ExEzARBgNVBAoMCmZpc2NvLWJjb3MxDjAMBgNVBAsMBWNoYWlu</span><br><span class="hljs-comment">MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE6lC0Uymwo</span><span class="hljs-literal">+</span><span class="hljs-comment">333YT1io3Jg7</span><span class="hljs-literal">+</span><span class="hljs-comment">sfDbuMpEy</span><br><span class="hljs-comment">zBLon5Jqax1t7gJFzHJ5W5laejeQXDg12Dm6UwmSydcwd9Ceb63pBaNQME4wHQYD</span><br><span class="hljs-comment">VR0OBBYEFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw3KSCRVcFCsHwg0TDMB8GA1UdIwQYMBaAFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw</span><br><span class="hljs-comment">3KSCRVcFCsHwg0TDMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDSQAwRgIhAPIr</span><br><span class="hljs-comment">jnSV45mOdZupoNl8V4xF1aocmrzqrheb7F3yBl6JAiEA6RyZVnPOzlfUmEMwQRyU</span><br><span class="hljs-comment">V6jLwHbYnjgnqeJIPxTMg5E=</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>agency.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBdjCCARugAwIBAgIJAIl0FKTcJnfPMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyNDEyWhcNMzExMjA2MDYyNDEyWjA1MQ0wCwYDVQQDDART</span><br><span class="hljs-comment">WENaMRMwEQYDVQQKDApmaXNjby1iY29zMQ8wDQYDVQQLDAZhZ2VuY3kwVjAQBgcq</span><br><span class="hljs-comment">hkjOPQIBBgUrgQQACgNCAARsfoTWF</span><span class="hljs-literal">+</span><span class="hljs-comment">pt4ku2v5N6nKac8dGLzAXtDO41xxwuUjmQ</span><br><span class="hljs-comment">6grfLtPdgGxNXwbVjAxiVQCqDloiRCoqoLJHWQBVGYN4oxAwDjAMBgNVHRMEBTAD</span><br><span class="hljs-comment">AQH/MAoGCCqGSM49BAMCA0kAMEYCIQDuesdsVVKZJ8sZSVFaTbyaBqxDZVUAZH7B</span><br><span class="hljs-comment">jDsrud3X7QIhAOtNBs2TbegkXQJt5q2gx8m9tQZmiYlTrWoq</span><span class="hljs-literal">+</span><span class="hljs-comment">NQaWUZT</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>agency.key</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgubrDtrPn7WQqm8T/wmsc<br>O+XVQ3LQZ6WyksxKckqur1mhRANCAARsfoTWF+pt4ku2v5N6nKac8dGLzAXtDO41<br>xxwuUjmQ6grfLtPdgGxNXwbVjAxiVQCqDloiRCoqoLJHWQBVGYN4<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><p>agency.srl</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">A7C2D5E020C18DBC<br></code></pre></td></tr></table></figure><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>ca.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBvTCCAWKgAwIBAgIJAKqHVTSzAvyhMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyMzE0WhcNMzExMjA2MDYyMzE0WjA8MRUwEwYDVQQDDAxk</span><br><span class="hljs-comment">aXJfY2hhaW5fY2ExEzARBgNVBAoMCmZpc2NvLWJjb3MxDjAMBgNVBAsMBWNoYWlu</span><br><span class="hljs-comment">MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE6lC0Uymwo</span><span class="hljs-literal">+</span><span class="hljs-comment">333YT1io3Jg7</span><span class="hljs-literal">+</span><span class="hljs-comment">sfDbuMpEy</span><br><span class="hljs-comment">zBLon5Jqax1t7gJFzHJ5W5laejeQXDg12Dm6UwmSydcwd9Ceb63pBaNQME4wHQYD</span><br><span class="hljs-comment">VR0OBBYEFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw3KSCRVcFCsHwg0TDMB8GA1UdIwQYMBaAFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw</span><br><span class="hljs-comment">3KSCRVcFCsHwg0TDMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDSQAwRgIhAPIr</span><br><span class="hljs-comment">jnSV45mOdZupoNl8V4xF1aocmrzqrheb7F3yBl6JAiEA6RyZVnPOzlfUmEMwQRyU</span><br><span class="hljs-comment">V6jLwHbYnjgnqeJIPxTMg5E=</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>node.crt</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-params">-----BEGIN</span> CERTIFICATE<span class="hljs-params">-----</span><br>MIIBdzCCAR2gAwIBAgIJAKfC1eAgwY27MAoGCCqGSM49BAMCMDUxDTALBgNVBAMM<br>BFNYQ1oxEzARBgNVBAoMCmZpc2NvLWJjb3MxDzANBgNVBAsMBmFnZW5jeTAeFw0y<br>MTEyMDgwNjI2MTRaFw0zMTEyMDYwNjI2MTRaMDQxDjAMBgNVBAMMBTIwMDUwMRMw<br>EQYDVQQKDApmaXNjby1iY29zMQ0wCwYDVQQLDARub2RlMFYwEAYHKoZIzj0CAQYF<br>K4EEAAoDQgAEALSYDNLLGCBu2gMl/AZ0u4A9F8Jh4ee469q5V97spDT+wvKTYTND<br>O8ebjHv1WlWVP6buf5Lv1<span class="hljs-keyword">ls</span>2ZcSzhtFARaMaMBgwCQYDVR0TBAIwADALBgNVHQ8E<br>BAMCBeAwCgYIKoZIzj0EAwIDSAAwRQIgL4iQpjXxHxK7P8wRpfT2IkMwHDjm0ZOL<br>7rm4c5h4ZDkCIQCHG6ReLamM8BXai/v90dOeffBEM3PWs+BrkrwEZkQRlQ==<br><span class="hljs-params">-----END</span> CERTIFICATE<span class="hljs-params">-----</span><br><span class="hljs-params">-----BEGIN</span> CERTIFICATE<span class="hljs-params">-----</span><br>MIIBdjCCARugAwIBAgIJAIl0FKTcJnfPMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM<br>DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh<br>aW4wHhcNMjExMjA4MDYyNDEyWhcNMzExMjA2MDYyNDEyWjA1MQ0wCwYDVQQDDART<br>WENaMRMwEQYDVQQKDApmaXNjby1iY29zMQ8wDQYDVQQLDAZhZ2VuY3kwVjAQBgcq<br>hkjOPQIBBgUrgQQACgNCAARsfoTWF+pt4ku2v5N6nKac8dGLzAXtDO41xxwuUjmQ<br>6grfLtPdgGxNXwbVjAxiVQCqDloiRCoqoLJHWQBVGYN4oxAwDjAMBgNVHRMEBTAD<br>AQH/MAoGCCqGSM49BAMCA0kAMEYCIQDuesdsVVKZJ8sZSVFaTbyaBqxDZVUAZH7B<br>jDsrud3X7QIhAOtNBs2TbegkXQJt5q2gx8m9tQZmiYlTrWoq+NQaWUZT<br><span class="hljs-params">-----END</span> CERTIFICATE<span class="hljs-params">-----</span><br><br></code></pre></td></tr></table></figure><p>node.key</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">-----<span class="hljs-keyword">BEGIN</span> PRIVATE KEY-----<br>MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgZrCWtQBPzFTXkXt1zvR8<br>TXhDIMRB5quzdvSdX8UfjrOhRANCAAQAtJgM0ssYIG7aAyX8BnS7gD0XwmHh57jr<br><span class="hljs-number">2</span>rlX3uykNP7C8pNhM0M7x5uMe<span class="hljs-regexp">/VaVZU/</span>pu5<span class="hljs-regexp">/ku/</span>WWzZlxLOG0UBF<br>-----<span class="hljs-keyword">END</span> PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>node.nodeid</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">00</span>b<span class="hljs-number">4980</span>cd<span class="hljs-number">2</span>cb<span class="hljs-number">18206</span>eda<span class="hljs-number">0325</span>fc<span class="hljs-number">0674</span>bb<span class="hljs-number">803</span>d<span class="hljs-number">17</span><span class="hljs-keyword">c</span><span class="hljs-number">261e1</span>e<span class="hljs-number">7</span>b<span class="hljs-number">8</span>ebdab<span class="hljs-number">957</span>deeca<span class="hljs-number">434</span>fec<span class="hljs-number">2</span>f<span class="hljs-number">2936133433</span>bc<span class="hljs-number">79</span>b<span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span>bf<span class="hljs-number">55</span>a<span class="hljs-number">55953</span>fa<span class="hljs-number">6</span>ee<span class="hljs-number">7</span>f<span class="hljs-number">92</span>efd<span class="hljs-number">65</span>b<span class="hljs-number">3665</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>b<span class="hljs-number">386</span>d<span class="hljs-number">14045</span><br></code></pre></td></tr></table></figure><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p>ca.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBvTCCAWKgAwIBAgIJAKqHVTSzAvyhMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyMzE0WhcNMzExMjA2MDYyMzE0WjA8MRUwEwYDVQQDDAxk</span><br><span class="hljs-comment">aXJfY2hhaW5fY2ExEzARBgNVBAoMCmZpc2NvLWJjb3MxDjAMBgNVBAsMBWNoYWlu</span><br><span class="hljs-comment">MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE6lC0Uymwo</span><span class="hljs-literal">+</span><span class="hljs-comment">333YT1io3Jg7</span><span class="hljs-literal">+</span><span class="hljs-comment">sfDbuMpEy</span><br><span class="hljs-comment">zBLon5Jqax1t7gJFzHJ5W5laejeQXDg12Dm6UwmSydcwd9Ceb63pBaNQME4wHQYD</span><br><span class="hljs-comment">VR0OBBYEFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw3KSCRVcFCsHwg0TDMB8GA1UdIwQYMBaAFG4ViSzmo</span><span class="hljs-literal">+</span><span class="hljs-comment">jw</span><br><span class="hljs-comment">3KSCRVcFCsHwg0TDMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDSQAwRgIhAPIr</span><br><span class="hljs-comment">jnSV45mOdZupoNl8V4xF1aocmrzqrheb7F3yBl6JAiEA6RyZVnPOzlfUmEMwQRyU</span><br><span class="hljs-comment">V6jLwHbYnjgnqeJIPxTMg5E=</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>node.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBdjCCARugAwIBAgIJAKfC1eAgwY28MAoGCCqGSM49BAMCMDUxDTALBgNVBAMM</span><br><span class="hljs-comment">BFNYQ1oxEzARBgNVBAoMCmZpc2NvLWJjb3MxDzANBgNVBAsMBmFnZW5jeTAeFw0y</span><br><span class="hljs-comment">MTEyMDgwNjI2MzhaFw0zMTEyMDYwNjI2MzhaMDIxDDAKBgNVBAMMA3NkazETMBEG</span><br><span class="hljs-comment">A1UECgwKZmlzY28tYmNvczENMAsGA1UECwwEbm9kZTBWMBAGByqGSM49AgEGBSuB</span><br><span class="hljs-comment">BAAKA0IABHyLP0</span><span class="hljs-literal">+</span><span class="hljs-comment">KKP8kinKSQG68DiufwmeNDiB</span><span class="hljs-literal">+</span><span class="hljs-comment">S2DVnqnA</span><span class="hljs-literal">+</span><span class="hljs-comment">5eXhFafSD3JZ61i</span><br><span class="hljs-comment">iQRuHtoV9TqQ7cEXhyG2vYYedXFgknijGjAYMAkGA1UdEwQCMAAwCwYDVR0PBAQD</span><br><span class="hljs-comment">AgXgMAoGCCqGSM49BAMCA0kAMEYCIQCmtb2BkLWRo3B/RLMJoMTB/2XZW9/GwUwR</span><br><span class="hljs-comment">hdJtjjnM8gIhAP3NqmuqTjrpoocma/ahLvBX2YQqUyHleuypNtoTBexo</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBdjCCARugAwIBAgIJAIl0FKTcJnfPMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyNDEyWhcNMzExMjA2MDYyNDEyWjA1MQ0wCwYDVQQDDART</span><br><span class="hljs-comment">WENaMRMwEQYDVQQKDApmaXNjby1iY29zMQ8wDQYDVQQLDAZhZ2VuY3kwVjAQBgcq</span><br><span class="hljs-comment">hkjOPQIBBgUrgQQACgNCAARsfoTWF</span><span class="hljs-literal">+</span><span class="hljs-comment">pt4ku2v5N6nKac8dGLzAXtDO41xxwuUjmQ</span><br><span class="hljs-comment">6grfLtPdgGxNXwbVjAxiVQCqDloiRCoqoLJHWQBVGYN4oxAwDjAMBgNVHRMEBTAD</span><br><span class="hljs-comment">AQH/MAoGCCqGSM49BAMCA0kAMEYCIQDuesdsVVKZJ8sZSVFaTbyaBqxDZVUAZH7B</span><br><span class="hljs-comment">jDsrud3X7QIhAOtNBs2TbegkXQJt5q2gx8m9tQZmiYlTrWoq</span><span class="hljs-literal">+</span><span class="hljs-comment">NQaWUZT</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>node.key</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgDEQULLcgRVnBfq0VZek6<br>Z5Ednc6Ojvh93yiwPpM3vwahRANCAAR8iz9Piij/JIpykkBuvA4rn8JnjQ4gfktg<br><span class="hljs-number">1</span>Z6pwPuXl4RWn0g9yWetYokEbh7aFfU6kO3BF4chtr2GHnVxYJJ4<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br><br></code></pre></td></tr></table></figure><p>sdk.crt</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBdjCCARugAwIBAgIJAKfC1eAgwY28MAoGCCqGSM49BAMCMDUxDTALBgNVBAMM</span><br><span class="hljs-comment">BFNYQ1oxEzARBgNVBAoMCmZpc2NvLWJjb3MxDzANBgNVBAsMBmFnZW5jeTAeFw0y</span><br><span class="hljs-comment">MTEyMDgwNjI2MzhaFw0zMTEyMDYwNjI2MzhaMDIxDDAKBgNVBAMMA3NkazETMBEG</span><br><span class="hljs-comment">A1UECgwKZmlzY28tYmNvczENMAsGA1UECwwEbm9kZTBWMBAGByqGSM49AgEGBSuB</span><br><span class="hljs-comment">BAAKA0IABHyLP0</span><span class="hljs-literal">+</span><span class="hljs-comment">KKP8kinKSQG68DiufwmeNDiB</span><span class="hljs-literal">+</span><span class="hljs-comment">S2DVnqnA</span><span class="hljs-literal">+</span><span class="hljs-comment">5eXhFafSD3JZ61i</span><br><span class="hljs-comment">iQRuHtoV9TqQ7cEXhyG2vYYedXFgknijGjAYMAkGA1UdEwQCMAAwCwYDVR0PBAQD</span><br><span class="hljs-comment">AgXgMAoGCCqGSM49BAMCA0kAMEYCIQCmtb2BkLWRo3B/RLMJoMTB/2XZW9/GwUwR</span><br><span class="hljs-comment">hdJtjjnM8gIhAP3NqmuqTjrpoocma/ahLvBX2YQqUyHleuypNtoTBexo</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">MIIBdjCCARugAwIBAgIJAIl0FKTcJnfPMAoGCCqGSM49BAMCMDwxFTATBgNVBAMM</span><br><span class="hljs-comment">DGRpcl9jaGFpbl9jYTETMBEGA1UECgwKZmlzY28tYmNvczEOMAwGA1UECwwFY2hh</span><br><span class="hljs-comment">aW4wHhcNMjExMjA4MDYyNDEyWhcNMzExMjA2MDYyNDEyWjA1MQ0wCwYDVQQDDART</span><br><span class="hljs-comment">WENaMRMwEQYDVQQKDApmaXNjby1iY29zMQ8wDQYDVQQLDAZhZ2VuY3kwVjAQBgcq</span><br><span class="hljs-comment">hkjOPQIBBgUrgQQACgNCAARsfoTWF</span><span class="hljs-literal">+</span><span class="hljs-comment">pt4ku2v5N6nKac8dGLzAXtDO41xxwuUjmQ</span><br><span class="hljs-comment">6grfLtPdgGxNXwbVjAxiVQCqDloiRCoqoLJHWQBVGYN4oxAwDjAMBgNVHRMEBTAD</span><br><span class="hljs-comment">AQH/MAoGCCqGSM49BAMCA0kAMEYCIQDuesdsVVKZJ8sZSVFaTbyaBqxDZVUAZH7B</span><br><span class="hljs-comment">jDsrud3X7QIhAOtNBs2TbegkXQJt5q2gx8m9tQZmiYlTrWoq</span><span class="hljs-literal">+</span><span class="hljs-comment">NQaWUZT</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">CERTIFICATE</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure><p>sdk.key</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgDEQULLcgRVnBfq0VZek6<br>Z5Ednc6Ojvh93yiwPpM3vwahRANCAAR8iz9Piij/JIpykkBuvA4rn8JnjQ4gfktg<br><span class="hljs-number">1</span>Z6pwPuXl4RWn0g9yWetYokEbh7aFfU6kO3BF4chtr2GHnVxYJJ4<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络搭建</tag>
      
      <tag>证书管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共识算法-raft</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/07/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95-raft/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/07/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95-raft/</url>
    
    <content type="html"><![CDATA[<h2 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h2><p><a href="https://raft.github.io/">https://raft.github.io/</a></p><p>Raft是一种易于理解的共识算法。在容错和性能方面，它相当于Paxos。不同之处在于它被分解成相对独立的子问题，并且它清楚地处理了实际系统所需的所有主要部分。我们希望Raft将为更广泛的受众提供共识，并且这些更广泛的受众将能够开发出比今天可用的各种更高质量的基于共识的系统。</p><p>共识通常出现在复制状态机的上下文中，这是构建容错系统的一般方法。每个服务器都有一个状态机和一个日志。状态机是我们希望实现容错的组件，例如散列表。即使集群中的少数服务器出现故障，客户端也会认为它们正在与单个可靠的状态机进行交互。每个状态机将其日志中的输入命令作为输入命令。在我们的哈希表示例中，日志将包括像将x设置为3这样的命令。共识算法用于对服务器日志中的命令达成一致。一致性算法必须确保，如果任何状态机应用set x到3作为第n个命令，其他状态机将永远不会应用不同的第n个命令。因此，每个状态机处理相同系列的命令，从而产生相同系列的结果，并到达相同系列的状态。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Raft通过选举领袖的方式做共识算法。<br>在Raft集群里，服务器可能会使三种身份其中一个: 领袖(leader)、 追随者(follower)、或者是候选人(candidate). 在正常情况下只会有一个领袖，其他都是追随者。 而领袖会负责所有外部的请求，如果不是领袖的机器收到时，请求会被导到领袖。</p><p>通常领袖会借由固定时间发送消息，也就是心跳(heartbeat), 让追随者知道集群的领袖还在运作。 而每个追随者都会设计超时机制，当超过一定时间没有收到心跳(150ms或者300ms)，集群就会进入选举状态。</p><p>Raft将问题拆分成数个子问题分开解决，让人更容易了解:</p><ul><li>领袖选举</li><li>记录复写</li><li>安全性</li></ul><h4 id="领袖选举"><a href="#领袖选举" class="headerlink" title="领袖选举"></a>领袖选举</h4><p>在起始算法或领袖死机、断线的时候，就需要选举出新的领袖。<br>此时集群进入新的任期（英语：term）并开始选举，如果选举成功则新的领袖开始执行工作，反之则视此任期终止，开始新的任期并开始下一场选举。<br>此时集群进入新的任期（英语：term）并开始选举，如果选举成功则新的领袖开始执行工作，反之则视此任期终止，开始新的任期并开始下一场选举。<br>如果候选人收到其他候选人的拉票、而且拉票的任期编号不小于自己的任期编号，就会自认落选，成为追随者，并认定来拉票的候选人为领袖。如果有候选人收到过半的选票就当选为新的领袖。如果超时仍没有选出新领袖，此任期自动终止，开始新的任期并开始下一场选举。</p><p>Raft每个服务器的超时期限是随机的，这降低伺服务同时竞选的几率，也降低因两个竞选人得票都不过半而选举失败的几率。</p><pre><code>也就是说A的超时是10msB的超时是20ms当领袖的心跳时间超时了，A先发现，A先任期编号加1，A先投票，A先拉票。B收到了A的拉票请求，A的编号为2，B为1，此时B自认落选，将成为追随者，将票给A。</code></pre><h4 id="记录复写"><a href="#记录复写" class="headerlink" title="记录复写"></a>记录复写</h4><p>记录复写的责任在领袖身上。<br>整个集群有个复写的状态机（英语：state machine），可执行外来的指令。领袖接收指令，将之写入自己记录中的新指令部分，然后把指令转发给追随者。如果有追随者没反应，领袖会不断重发指令、直到每个追随者都成功将新指令写入记录为止。</p><p>当领袖收到过半追随者确认写入的消息，就会把指令视为已存储（英语：committed）。当追随者发现指令状态变成已存储，就会在其状态机上执行该指令。</p><p>当领袖死机时，领袖的某些新指令可能还没复写到集群整体，造成集群的记录处于不一致的状态。新领袖会担起重返一致的责任，让每个追随者的记录都和它的一致，做法是：和每个追随者比对记录，找出两者一致的最后一笔指令，删除追随者之后的指令，把自己之后的指令拷贝给追随者。这个机制完成时，每个服务器的记录就会一致。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>Raft保证以下的安全性：</p><ul><li>选举安全性：每个任期最多只能选出一个领袖。</li><li>领袖附加性：领袖只会把新指令附加（英语：append）在记录尾端，不会改写或删除已有指令。</li><li>记录符合性：如果某个指令在两个记录中的任期和指令序号一样，则保证序号较小的指令也完全一样。</li><li>领袖完整性：如果某个指令在某个任期中存储成功，则保证存在于领袖该任期之后的记录中。</li><li>状态机安全性：如果某服务器在其状态机上执行了某个指令，其他服务器保证不会在同个状态上执行不同的指令。</li></ul>]]></content>
    
    
    <categories>
      
      <category>共识算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-7-核心模块设计解析-共识算法</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/07/FISCO-7-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E8%A7%A3%E6%9E%90-%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/07/FISCO-7-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E8%A7%A3%E6%9E%90-%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><p>区块链系统通过共识算法保障系统一致性。 理论上，共识是对某个提案(proposal)达成一致意见的过程，分布式系统中提案的含义十分宽泛，包括事件发生顺序、谁是leader等。区块链系统中，共识是各个共识节点对交易执行结果达成一致的过程。</p><h3 id="0-拜占庭将军问题"><a href="#0-拜占庭将军问题" class="headerlink" title="0 拜占庭将军问题"></a>0 拜占庭将军问题</h3><p>拜占庭将军为题(Byzantine Generals Problem)是由莱斯利.兰波特在其同名论文总提出的分布式对等网络 通信容错问题</p><p>在分布式计算中，不同的计算机通过通讯交换信息达成共识而按照同一套协作策略行动。但有时候，系统中的成员计算机可能出错而发送错误的消息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性。 </p><p>拜占庭将军问题被认为是容错性问题中最难的问题类型之一。</p><h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h4><pre><code>一组拜占庭将军分别各率领一支军队共同围困一座城市。为了简化问题，将各支军队的行动策略限定为进攻或撤离两种。因为部分军队进攻部分军队撤离可能会造成灾难性后果，因此各位将军必须通过投票来达成一致策略，即所有军队一起进攻或所有军队一起撤离。因为各位将军分处城市不同方向，他们只能通过信使互相联系。在投票过程中每位将军都将自己投票给进攻还是撤退的信息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以知道共同的投票结果而决定行动策略。系统的问题在于，可能将军中出现叛徒，他们不仅可能向较为糟糕的策略投票，还可能选择性地发送投票信息。假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。 而即使在保证所有将军忠诚的情况下，也不能排除信任被人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。假使那些忠诚（或是没有出错）的将军仍然能通过多数决定来决定他们的战略，便称达到了拜占庭容错（多数决定即拜占庭容错）。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。上述那些问题映射到计算机系统里，将军便成了计算机，而信差就是通信系统。 在分布式对等网络中需要按照共同一致策略协作的成员计算机即为问题中的将军，而各成员计算机赖以进行通讯的网络链路即为信使。拜占庭将军问题描述的就是某些成员计算机或网络链路出现错误、甚至被蓄意破坏者控制的情况。在点对点式数字货币系统比特币里，比特币网络的运作是平行的（parallel）。各节点与终端都运算著区块链来达成工作量证明（PoW）。工作量证明的链接是解决比特币系统中拜占庭问题的关键，避免有问题的节点（即前文提到的“反叛的将军”）破坏数字货币系统里交易帐的正确性，是对整个系统的运行状态有着重要的意义。</code></pre><h3 id="共识算法分类"><a href="#共识算法分类" class="headerlink" title="共识算法分类"></a>共识算法分类</h3><p>根据是否容忍拜占庭错误，共识算法可以分为容错(Crash Fault Tolerance, CFT)类算法和拜占庭容错(Byzantine Fault Tolerance,BFT)类算法:</p><ul><li><p>CFT类算法: 普通容错类算法，当系统出现网络、磁盘故障，服务器宕机等普通故障时，仍能针对某个提议达成共识，经典的算法包括Paxos、Raft等，这类算法性能较好、处理速度快、可以容忍不超过一半的故障节点。 <a href="https://raft.github.io/">https://raft.github.io/</a></p></li><li><p>BFT算法: 拜占庭容错类算法，除了容忍系统共识过程中出现的普通故障外，还可以容忍部分节点故意欺骗(如伪造交易执行结果)等拜占庭错误，经典算法包括PBFT算法，这类算法性能较差，能容忍不超过三分之一的故障节点。</p></li></ul><h3 id="FISCO-BCOS共识算法"><a href="#FISCO-BCOS共识算法" class="headerlink" title="FISCO BCOS共识算法"></a>FISCO BCOS共识算法</h3><p>FISCO BCOS基于多群组架构实现了插件化的共识算法，不同群组可以运行不同的共识算法，组与组之间的共识过程互不影响，FISCO BCOS目前支持PBFT和RAFT两种共识算法:</p><ul><li>PBFT共识算法: BFT类算法，可容忍不超过三分之一的故障节点和作恶节点，可达到最终一致性；</li><li>Raft共识算法: CFT类算法, 可容忍一半故障节点，不能防止节点作恶，可达到一致性。</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>FISCO BCOS实现了一套可以扩展的共识框架，可插件化扩展不同的共识算法，目前支持PBFT和Raft算法。</p><p><img src="1.png"></p><pre><code>TxPool交易池: 负责存储客户端提交的交易共识模块:    Sealer: 从TxPool取交易，基于最高节点打包交易，产生新区块，新区块交给Engine线程处理。PBFT和Raft的交易打包线程分别为PBFTSealer和RaftSealer    Engine: 共识线程，负责从本地或者网络接收新区块，并根据接收到的共识消息完成共识流程，最终将达成共识的新区块写入区块链，区块上链后，从TXxpool中删除已经上链的交易。</code></pre><h2 id="PBFT基础流程"><a href="#PBFT基础流程" class="headerlink" title="PBFT基础流程"></a>PBFT基础流程</h2><p>PBFT(Practical Byzantine Fault Tolerance)共识算法可以在少数节点作恶(如伪造消息)场景中达成共识，它采用签名、签名验证、哈希等密码学算法确保消息传递过程中的防篡改性、防伪造性、不可抵赖性，并优化了前人工作，将拜占庭容错算法复杂度从指数级降低到多项式级别，在一个由(3<em>f+1)个节点构成的系统中，只要有不少于(2</em>f+1)个非恶意节点正常工作，该系统就能达成一致性，如：7个节点的系统中允许2个节点出现拜占庭错误。</p><h3 id="1-重要概念"><a href="#1-重要概念" class="headerlink" title="1 重要概念"></a>1 重要概念</h3><p>节点类型，节点ID，节点索引和视图是PBFT共识算法的关键概念。</p><h4 id="1-1-节点类型"><a href="#1-1-节点类型" class="headerlink" title="1.1 节点类型"></a>1.1 节点类型</h4><ul><li>Leader/Primary: 共识节点，负责将交易打包成区块和区块共识，每轮共识过程中有且仅有一个leader，为了防止leader伪造区块，每轮PBFT共识后，均会切换leader；</li><li>Replica: 副本节点，负责区块共识，每轮共识过程中有多个Replica节点，每个Replica节点的处理过程类似；</li><li>Observer: 观察者节点，负责从共识节点或副本节点获取最新区块，执行并验证区块执行结果后，将产生的区块上链。</li></ul><p>其中Leader和Replica统称为共识节点。</p><h4 id="1-2-节点ID和节点索引"><a href="#1-2-节点ID和节点索引" class="headerlink" title="1.2 节点ID和节点索引"></a>1.2 节点ID和节点索引</h4><p>为了防止节点作恶，PBFT共识过程中每个共识节点均对其发送的消息进行签名，对收到的消息包进行验签名，因此每个节点均维护一份公私钥对，私钥用于对发送的消息进行签名，公钥作为节点ID，用于标识和验签。</p><pre><code>节点签名和验签节点ID: 共识节点签名公钥和共识节点唯一标识，一般是64字节二进制串，其他节点使用消息包发送者的节点ID对消息包进行验签</code></pre><p>考虑到节点ID很长，在共识消息中包含该字段会耗费部分网络带宽，FISCO BCOS引入了节点索引，每个共识节点维护一份公共的共识节点列表，节点索引记录了每个共识节点ID在这个列表中的位置，发送网络消息包时，只需要带上节点索引，其他节点即可以从公共的共识节点列表中索引出节点的ID，进而对消息进行验签:</p><pre><code>节点索引 : 每个共识节点ID在这个公共节点ID列表中的位置</code></pre><h4 id="1-3-视图View"><a href="#1-3-视图View" class="headerlink" title="1.3 视图View"></a>1.3 视图View</h4><p>PBFT共识算法使用视图view记录每个节点的共识状态，相同视图节点维护相同的Leader和Replicas节点列表。 当Leader出现故障时，会发生视图切换，若视图切换成功(至少2<em>f+1个相同节点达到相同视图)，则根据新的视图选出新的leader，新leader开始出块，否则继续进行视图切换，直至全网大部分节点(大于2</em>f+1)达到一致视图。</p><p>FISCO BCOS系统中，leader索引的计算公式如下：leader_idx = (view + block_number) % node_num</p><p>下图简单展示了4(3*f+1, f=1)节点FISCO BCOS系统中，第三个节点(node3)为拜占庭节点情况下，视图切换过程：</p><p><img src="2.png"></p><ul><li>前三轮共识： node0、node1、node2为leader，且非恶意节点数目等于2*f+1，节点正常出块共识；</li><li>第四轮共识：node3为leader，但node3为拜占庭节点，node0-node2在给定时间内未收到node3打包的区块，触发视图切换，试图切换到view_new=view+1的新视图，并相互间广播viewchange包，节点收集满在视图view_new上的(2*f+1)个viewchange包后，将自己的view切换为view_new，并计算出新leader；</li><li>为第五轮共识：node0为leader，继续打包出块。</li></ul><h4 id="1-4-共识消息"><a href="#1-4-共识消息" class="headerlink" title="1.4 共识消息"></a>1.4 共识消息</h4><p>PBFT模块主要包括PrepareReq、SignReq、CommitReq和ViewChangeReq四种共识消息：<br><img src="pbft.png"></p><ol><li>PrepareReqPacket: 包含区块的请求包，由leader产生并向所有的replica节点广播，replica节点收到prepare包后，验证PrepareReq签名，执行区块并缓存区块执行结果，达到防止拜占庭节点作恶，保证区块执行结果的最终确定性的目的。</li><li>SignReqPacket: 带有区块执行结果的签名请求，由收到Prepare包并执行完区块的共识节点产生，SignReq请求带有执行后区块的hash以及该hash的签名，分别记为SignReq.block_hash 和 SignReq.sig,节点将SignReq广播到所有其他共识节点后，其他节点对SignReq(即区块执行结果)进行共识；</li><li>CommitReqPacket: 用于确认区块执行结果的提交请求，由收集满(2<em>f+1)个block_hash相同且来自不同节点SignReq请求的节点产生，CommitReq被广播给所有其他共识节点，其他节点收集满(2</em>f+1)个block_hash相同、来自不同节点的CommitReq后，将本地节点缓存的最新区块上链。</li><li>ViewChangeReqPacket: 视图切换请求，当leader无法提供正常服务（如网络连接不正常，服务器宕机等）时，其他共识节点会主动触发视图切换，ViewChangeReq中带有该节点即将切换到的视图(记为toView，当前视图加1)，某节点收集满2*f+1个视图等于toView，来自不同节点的ViewChangeReq后，会将当前视图切换为toView.</li></ol><p><img src="3.png"></p><h3 id="2-系统架构"><a href="#2-系统架构" class="headerlink" title="2 系统架构"></a>2 系统架构</h3><p><img src="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/_images/pbft_architecture.png"></p><p>PBFT共识主要包括两个线程:</p><ul><li>PBFTSealer: PBFT打包线程，负责从交易池取交易，并将打包好的区块封装成PBFT Prepare包，交给PBFTEngine处理；</li><li>PBFTEngine: PBFT共识线程，从PBFTSealer或者P2P网络接收PBFT共识消息包，区块验证器(Blockverifier)负责开始执行区块，完成共识流程，将达成共识的区块写入区块链，区块上链后，从交易池中删除已经上链的交易。</li></ul><h3 id="3-核心流程"><a href="#3-核心流程" class="headerlink" title="3 核心流程"></a>3 核心流程</h3><p>PBFT共识主要包括Pre-prepare、Prepare和Commit三个阶段：</p><ul><li>Pre-prepare：负责执行区块，产生签名包，并将签名包广播给所有共识节点；</li><li>Prepare：负责收集签名包，某节点收集满2*f+1的签名包后，表明自身达到可以提交区块的状态，开始广播Commit包；</li><li>Commit：负责收集Commit包，某节点收集满2*f+1的Commit包后，直接将本地缓存的最新区块提交到数据库。<br><img src="4.png"></li></ul><p><img src="5.png"></p><h4 id="3-1-leader打包区块"><a href="#3-1-leader打包区块" class="headerlink" title="3.1 leader打包区块"></a>3.1 leader打包区块</h4><p>PBFT共识算法中，共识节点轮流出块，每一轮共识仅有一个leader打包区块，leader索引通过公式(block_number + current_view) % consensus_node_num计算得出。<br>block_number=10, current_view=2 ,共识节点3， (10+2)%3 =0,leader是节点0</p><p>节点计算当前leader索引与自己索引相同后，就开始打包区块。区块打包主要由PBFTSealer线程完成，Sealer线程的主要工作如下图所示：<br><img src="6.png"></p><ol><li>产生新的区块: 通过区块链获取当前最高块，并给予最高块产生新区块(将新区块父哈希设置为最高块哈希，时间戳为当前时间，交易清空)</li><li>从交易池打包交易: 产生新空块后，从交易池中获取交易，并将获取的交易插入到产生的新区块中</li><li>组装新区块: Sealer线程打包到交易后，将新区块的打包者(sealer字段)设置为自己的索引，并根据打包的交易计算出所有交易的transactionRoot；</li><li>产生Prepare包： 将组装的新区块编码到Prepare包内，通过PBFTEngine线程广播给组内所有共识节点，其他共识节点收到Prepare包后，开始进行三阶段共识。</li></ol><h4 id="3-2-pre-prepare阶段"><a href="#3-2-pre-prepare阶段" class="headerlink" title="3.2 pre-prepare阶段"></a>3.2 pre-prepare阶段</h4><p>共识节点收到Prepare包后，进入pre-prepare阶段，此阶段的主要工作流程包括:</p><ol><li>Prepare包合法性判断: 主要判断是否是重复的Prepare包、Prepare请求中包含的区块父哈希是否是当期节点的最高块哈希(防止分叉)，Prepare请求中包含区块的块高是否等于最高块高加1；</li><li>缓存合法的Prepare包: 若Prepare请求合法，则将其缓存到本地，用于过滤重复的Prepare请求、</li><li>空块判断: 若Prepare请求包含的区块中交易数目是0，则触发空块视图切换，将当前视图加1，并向所有其他节点广播视图切换请求</li><li>执行区块并缓存区块执行结果: 若Prepare请求包含的区块中交易数目大于0，则调用BlockVerifier区块执行器执行区块，并缓存执行后的区块</li><li>产生并广播签名包: 基于执行后的区块哈希，产生并广播签名包，表明本节点已经完成区块执行和验证。</li></ol><h4 id="3-3-Prepare阶段"><a href="#3-3-Prepare阶段" class="headerlink" title="3.3 Prepare阶段"></a>3.3 Prepare阶段</h4><p>共识节点收到签名包后，进入Prepare阶段，此阶段的主要工作流程包括：</p><ol><li><p>签名包合法性判断: 主要判断签名包的哈希与Pre-prepare阶段缓存的执行后的区块哈希相同，若不相同，则继续判断该请求是否属于未来块签名请求(产生未来块的原因是本节点处理性能低于其他节点，还在进行上一轮共识，判断未来块的条件是: 签名包的height字段大于本地块高最高快加1)，若请求也非未来块，则是非法的签名请求，节点直接拒绝该签名请求。</p></li><li><p>缓存合法的签名包：节点会缓存合法的签名包；</p></li><li><p>判断pre-prepare阶段缓存的区块对应的签名包缓存是否达到2<em>f+1，若收集满签名包，广播Commit包：若pre-prepare阶段缓存的区块哈希对应的签名包数目超过2</em>f+1，则说明大多数节点均执行了该区块，并且执行结果一致，说明本节点已经达到可以提交区块的状态，开始广播Commit包；</p></li><li><p>若收集满签名包，备份pre-prepare阶段缓存的Prepare包落盘：为了防止Commit阶段区块未提交到数据库之前超过2*f+1个节点宕机，这些节点启动后重新出块，导致区块链分叉(剩余的节点最新区块与这些节点最高区块不同)，还需要备份pre-prepare阶段缓存的Prepare包到数据库，节点重启后，优先处理备份的Prepare包。</p></li></ol><h4 id="3-4-Commit阶段"><a href="#3-4-Commit阶段" class="headerlink" title="3.4 Commit阶段"></a>3.4 Commit阶段</h4><p>共识节点收到Commit包后，进入Commit阶段，此阶段工作流程包括：</p><ol><li>Commit包合法性判断：主要判断Commit包的哈希与pre-prepare阶段缓存的执行后的区块哈希相同，若不相同，则继续判断该请求是否属于未来块Commit请求(产生未来块的原因是本节点处理性能低于其他节点，还在进行上一轮共识，判断未来块的条件是：Commit的height字段大于本地最高块高加一)，若请求也非未来块，则是非法的Commit请求，节点直接拒绝该请求；</li><li>缓存合法的Commit包：节点缓存合法的Commit包；</li><li>判断pre-prepare阶段缓存的区块对应的Commit包缓存是否达到2<em>f+1，若收集满Commit包，则将新区块落盘：若pre-prepare阶段缓存的区块哈希对应的Commit请求数目超过2</em>f+1，则说明大多数节点达到了可提交该区块状态，且执行结果一致，则调用BlockChain模块将pre-prepare阶段缓存的区块写入数据库；</li></ol><h4 id="3-5-视图切换处理流程"><a href="#3-5-视图切换处理流程" class="headerlink" title="3.5 视图切换处理流程"></a>3.5 视图切换处理流程</h4><p>当PBFT三阶段共识超时或节点收到空块时，PBFTEngine会试图切换到更高的视图(将要切换到的视图toView加一)，并触发ViewChange处理流程；节点收到ViewChange包时，也会触发ViewChange处理流程：</p><ol><li>判断ViewChange包是否有效: 有效的ViewChange请求中带有的块高值必须不小于当前节点最高块高，视图必须大于当前节点视图；</li><li>缓存有效ViewChange包： 防止相同的ViewChange请求被处理多次，也作为判断节点是否可以切换视图的统计依据；</li><li>收集ViewChange包：若收到的ViewChange包中附带的view等于本节点的即将切换到的视图toView且本节点收集满2*f+1来自不同节点view等于toView的ViewChange包，则说明超过三分之二的节点要切换到toView视图，切换当前视图到toView。</li></ol>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-7-数据结构与编码协议</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/07/FISCO-7-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A0%81%E5%8D%8F%E8%AE%AE/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/07/FISCO-7-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A0%81%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构与编码协议"><a href="#数据结构与编码协议" class="headerlink" title="数据结构与编码协议"></a>数据结构与编码协议</h2><h3 id="1-交易结构及其RLP编码概述"><a href="#1-交易结构及其RLP编码概述" class="headerlink" title="1 交易结构及其RLP编码概述"></a>1 交易结构及其RLP编码概述</h3><p>FISCO BCOS的交易结构在原以太坊的交易结构的基础上，有所增减字段。<br><img src="01.png"></p><p>hashWith字段: 交易结构所有字段（含签名信息）RLP编码后的哈希值<br><img src="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/_images/generate_hash_process.png"></p><p>RC2的生成流程也类似，只是在第一步rlp+hash的transaction结构体中增加chainId、groupId和extraData三个字段。</p><h3 id="2-区块结构及其RLP编码描述"><a href="#2-区块结构及其RLP编码描述" class="headerlink" title="2 区块结构及其RLP编码描述"></a>2 区块结构及其RLP编码描述</h3><p>FISCO BCOS的区块由以下五部分组成<br>RC1 版本<br><img src="2.png"></p><p>rc2,rc3,2.0及以上版本<br><img src="3.png"></p><p>FISCO BCOS的区块头中每个字段意义如下：<br><img src="4.png"></p><h3 id="3-交易收据"><a href="#3-交易收据" class="headerlink" title="3 交易收据"></a>3 交易收据</h3><p><img src="5.png"></p><h3 id="4-网络传输协议"><a href="#4-网络传输协议" class="headerlink" title="4 网络传输协议"></a>4 网络传输协议</h3><p>FISCO BCOS 目前有两类数据包格式，节点与节点间通信的数据包为P2PMessage格式，节点与SDK间通信的数据包为ChannelMessage格式。<br><img src="6.png"></p><h4 id="P2PMessage"><a href="#P2PMessage" class="headerlink" title="P2PMessage"></a>P2PMessage</h4><p><img src="7.png"></p><p>补充:</p><ol><li>P2PMessage不限制包大小，由上层调用模块(共识/同步/AMOP等)进行包大小管理；</li><li>群组ID和模块ID可唯一标识协议ID（protocolID），三者关系为protocolID = (groupID &lt;&lt; sizeof(groupID)*8) | ModuleID；</li><li>数据包通过protocolID所在的16位二进制数值来区分请求包和响应包，大于0为请求包，小于0为相应包。</li><li>目前AMOP使用的packetType有SendTopicSeq = 1，RequestTopics = 2，SendTopics = 3。</li></ol><h4 id="ChannelMessage"><a href="#ChannelMessage" class="headerlink" title="ChannelMessage"></a>ChannelMessage</h4><p><img src="8.png"></p><h4 id="AMOP消息包"><a href="#AMOP消息包" class="headerlink" title="AMOP消息包"></a>AMOP消息包</h4><p>AMOP消息包继承ChannelMessage包结构，在data字段添加了自定义内容。包括0x30,0x31,0x35,0x1001</p><p>消息包类型<br>数据包类型枚举值及其对应的含义如下：<br><img src="9.png"></p><p>错误码<br><img src="10.png"></p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase-合约管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/06/FISCO-WeBase-%E5%90%88%E7%BA%A6%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/06/FISCO-WeBase-%E5%90%88%E7%BA%A6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="合约仓库"><a href="#合约仓库" class="headerlink" title="合约仓库"></a>合约仓库</h2><h3 id="工具合约"><a href="#工具合约" class="headerlink" title="工具合约"></a>工具合约</h3><ol><li><p>Address:</p><ul><li>检查地址是否是一个合约</li><li>检查地址是否是0<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sol">pragma solidity ^0.4.24;<br><br>library Address &#123;<br><br>    function isContract(address addr) internal view returns(bool) &#123;<br>        uint256 size;<br>        assembly &#123; size := extcodesize(addr) &#125;  <br>        return size &gt; 0;<br>    &#125;<br><br>    function isEmptyAddress(address addr) internal pure returns(bool)&#123;<br>        return addr == address(0);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>String library<br> Provides common string-related operations, including copying, finding, replacing, and so on。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file: LibString</span><br><span class="hljs-comment"> * @author: fisco-dev</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @date: 2018</span><br><span class="hljs-comment"> */</span><br><br>pragma solidity &gt;=<span class="hljs-number">0.4</span><span class="hljs-number">.24</span> &lt;<span class="hljs-number">0.6</span><span class="hljs-number">.10</span>;<br><br>library LibString &#123;<br>    <br>    <span class="hljs-keyword">using</span> LibString <span class="hljs-keyword">for</span> *;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">bytesToString</span>(<span class="hljs-params">bytes memory _bytes</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory</span>)</span>&#123;<br>        bytes memory bytesArray = <span class="hljs-keyword">new</span> bytes(_bytes.length);<br>        <span class="hljs-keyword">for</span> (uint256 i; i &lt; _bytes.length; i++) &#123;<br>            bytesArray[i] = _bytes[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(_bytes);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">stringToBytes</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _string</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params">bytes memory</span>)</span>&#123;<br>        bytes memory _bytes = bytes(_string);<br>        <span class="hljs-keyword">return</span> _bytes;<br>    &#125;<br>    <br> <br>    <span class="hljs-function">function <span class="hljs-title">bytes32ToString</span>(<span class="hljs-params">bytes32 _bytes32</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory</span>)</span>&#123;<br>        bytes memory bytesString = <span class="hljs-keyword">new</span> bytes(<span class="hljs-number">32</span>);<br>        <span class="hljs-built_in">uint</span> charCount = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">uint</span> i = <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>            <span class="hljs-built_in">byte</span> <span class="hljs-built_in">char</span> = <span class="hljs-built_in">byte</span>(bytes32(<span class="hljs-built_in">uint</span>(_bytes32) *<span class="hljs-number">2</span> **(<span class="hljs-number">8</span>*i)));<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">char</span> !=<span class="hljs-number">0</span>)&#123;<br>                bytesString[charCount] = <span class="hljs-built_in">char</span>;<br>                charCount++;<br>            &#125;<br>        &#125;<br>        bytes memory bytesStringTrimmed = <span class="hljs-keyword">new</span> bytes(charCount);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">uint</span> j=<span class="hljs-number">0</span>;j&lt;charCount;j++)&#123;<br>            bytesStringTrimmed[j]=bytesString[j];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(bytesStringTrimmed);<br>    &#125;<br><br><br>    <span class="hljs-function">function <span class="hljs-title">stringToBytes32</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory source</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span>(<span class="hljs-params">bytes32 result</span>)</span>&#123;<br>        assembly&#123;<br>            result := mload(<span class="hljs-keyword">add</span>(source,<span class="hljs-number">32</span>))<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function">function <span class="hljs-title">memcpy</span>(<span class="hljs-params"><span class="hljs-built_in">uint</span> dest, <span class="hljs-built_in">uint</span> src, <span class="hljs-built_in">uint</span> len</span>) <span class="hljs-keyword">private</span></span> &#123;<br>        <span class="hljs-comment">// Copy word-length chunks while possible</span><br>        <span class="hljs-keyword">for</span>(; len &gt;= <span class="hljs-number">32</span>; len -= <span class="hljs-number">32</span>) &#123;<br>            assembly &#123;<br>                mstore(dest, mload(src))<br>            &#125;<br>            dest += <span class="hljs-number">32</span>;<br>            src += <span class="hljs-number">32</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Copy remaining bytes</span><br>        <span class="hljs-built_in">uint</span> mask = <span class="hljs-number">256</span> ** (<span class="hljs-number">32</span> - len) - <span class="hljs-number">1</span>;<br>        assembly &#123;<br>            <span class="hljs-keyword">let</span> srcpart := <span class="hljs-keyword">and</span>(mload(src), <span class="hljs-keyword">not</span>(mask))<br>            <span class="hljs-keyword">let</span> destpart := <span class="hljs-keyword">and</span>(mload(dest), mask)<br>            mstore(dest, <span class="hljs-keyword">or</span>(destpart, srcpart))<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-function">function <span class="hljs-title">compare</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params">int8 _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length &amp;&amp; i&lt;bytes(_str).length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (bytes(_self)[i] &gt; bytes(_str)[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bytes(_self)[i] &lt; bytes(_str)[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (bytes(_self).length &gt; bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">if</span> (bytes(_self).length &lt; bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">compareNoCase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params">int8 _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length &amp;&amp; i&lt;bytes(_str).length; ++i) &#123;<br>            <span class="hljs-built_in">byte</span> ch1 = bytes(_self)[i]|<span class="hljs-number">0x20</span>;<br>            <span class="hljs-built_in">byte</span> ch2 = bytes(_str)[i]|<span class="hljs-number">0x20</span>;<br>            <span class="hljs-keyword">if</span> (ch1 &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch1 &lt;=<span class="hljs-string">&#x27;z&#x27;</span> &amp;&amp; ch2 &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch2 &lt;=<span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ch1 &gt; ch2) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch1 &lt; ch2) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[i] &gt; bytes(_str)[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bytes(_self)[i] &lt; bytes(_str)[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (bytes(_self).length &gt; bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">if</span> (bytes(_self).length &lt; bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">equals</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span> _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (bytes(_self).length != bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (bytes(_self)[i] != bytes(_str)[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">equalsNoCase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span> _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (bytes(_self).length != bytes(_str).length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            <span class="hljs-built_in">byte</span> ch1 = bytes(_self)[i]|<span class="hljs-number">0x20</span>;<br>            <span class="hljs-built_in">byte</span> ch2 = bytes(_str)[i]|<span class="hljs-number">0x20</span>;<br>            <span class="hljs-keyword">if</span> (ch1 &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch1 &lt;=<span class="hljs-string">&#x27;z&#x27;</span> &amp;&amp; ch2 &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch2 &lt;=<span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ch1 != ch2) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[i] != bytes(_str)[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">substr</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">uint</span> _start, <span class="hljs-built_in">uint</span> _len</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (_len &gt; bytes(_self).length-_start) &#123;<br>            _len = bytes(_self).length-_start;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (_len &lt;= <span class="hljs-number">0</span>) &#123;<br>            _ret = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">return</span> _ret;<br>        &#125;<br>        <br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(_len);<br><br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        memcpy(retptr, selfptr+_start, _len);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(bytes(_self).length + bytes(_str).length);<br><br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> strptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            strptr := <span class="hljs-keyword">add</span>(_str, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        memcpy(retptr, selfptr, bytes(_self).length);<br>        memcpy(retptr+bytes(_self).length, strptr, bytes(_str).length);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str1, <span class="hljs-built_in">string</span> memory _str2</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(bytes(_self).length + bytes(_str1).length + bytes(_str2).length);<br><br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> str1ptr;<br>        <span class="hljs-built_in">uint</span> str2ptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            str1ptr := <span class="hljs-keyword">add</span>(_str1, <span class="hljs-number">0x20</span>)<br>            str2ptr := <span class="hljs-keyword">add</span>(_str2, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        <span class="hljs-built_in">uint</span> pos = <span class="hljs-number">0</span>;<br>        memcpy(retptr+pos, selfptr, bytes(_self).length);<br>        pos += bytes(_self).length;<br>        memcpy(retptr+pos, str1ptr, bytes(_str1).length);<br>        pos += bytes(_str1).length;<br>        memcpy(retptr+pos, str2ptr, bytes(_str2).length);<br>        pos += bytes(_str2).length;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _str1, <span class="hljs-built_in">string</span> memory _str2, <span class="hljs-built_in">string</span> memory _str3</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(bytes(_self).length + bytes(_str1).length + bytes(_str2).length<br>            + bytes(_str3).length);<br><br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> str1ptr;<br>        <span class="hljs-built_in">uint</span> str2ptr;<br>        <span class="hljs-built_in">uint</span> str3ptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            str1ptr := <span class="hljs-keyword">add</span>(_str1, <span class="hljs-number">0x20</span>)<br>            str2ptr := <span class="hljs-keyword">add</span>(_str2, <span class="hljs-number">0x20</span>)<br>            str3ptr := <span class="hljs-keyword">add</span>(_str3, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        <span class="hljs-built_in">uint</span> pos = <span class="hljs-number">0</span>;<br>        memcpy(retptr+pos, selfptr, bytes(_self).length);<br>        pos += bytes(_self).length;<br>        memcpy(retptr+pos, str1ptr, bytes(_str1).length);<br>        pos += bytes(_str1).length;<br>        memcpy(retptr+pos, str2ptr, bytes(_str2).length);<br>        pos += bytes(_str2).length;<br>        memcpy(retptr+pos, str3ptr, bytes(_str3).length);<br>        pos += bytes(_str3).length;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">trim</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        <span class="hljs-built_in">uint</span> i;<br>        uint8 ch;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            ch = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(ch == <span class="hljs-number">0x20</span> || ch == <span class="hljs-number">0x09</span> || ch == <span class="hljs-number">0x0D</span> || ch == <span class="hljs-number">0x0A</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">uint</span> start = i;<br>        <br>        <span class="hljs-keyword">for</span> (i=bytes(_self).length; i&gt;<span class="hljs-number">0</span>; --i) &#123;<br>            ch = uint8(bytes(_self)[i<span class="hljs-number">-1</span>]);<br>            <span class="hljs-keyword">if</span> (!(ch == <span class="hljs-number">0x20</span> || ch == <span class="hljs-number">0x09</span> || ch == <span class="hljs-number">0x0D</span> || ch == <span class="hljs-number">0x0A</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">uint</span> end = i;<br>        <br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(end-start);<br>        <br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        memcpy(retptr, selfptr+start, end-start);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">trim</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _chars</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        uint16 i;<br>        uint16 j;<br>        <span class="hljs-built_in">bool</span> matched;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            matched = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;bytes(_chars).length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[i] == bytes(_chars)[j]) &#123;<br>                    matched = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!matched) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        uint16 start = i;<br>        <br>        <span class="hljs-keyword">for</span> (i=uint16(bytes(_self).length); i&gt;<span class="hljs-number">0</span>; --i) &#123;<br>            matched = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;bytes(_chars).length; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[i<span class="hljs-number">-1</span>] == bytes(_chars)[j]) &#123;<br>                    matched = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!matched) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        uint16 end = i;<br><br>        <span class="hljs-keyword">if</span> (end &lt;= start) &#123;<br>    _ret = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">return</span> _ret;<br>        &#125;<br>        <br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(end-start);<br>        <br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        memcpy(retptr, selfptr+start, end-start);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">indexOf</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory src, <span class="hljs-built_in">string</span> memory <span class="hljs-keyword">value</span></span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">internal</span></span><br><span class="hljs-function">        pure</span><br><span class="hljs-function">        <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> indexOf(src, <span class="hljs-keyword">value</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">indexOf</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>  memory src, <span class="hljs-built_in">string</span> memory <span class="hljs-keyword">value</span>, <span class="hljs-built_in">uint</span> offset</span>)</span><br><span class="hljs-function">        <span class="hljs-keyword">internal</span></span><br><span class="hljs-function">        pure</span><br><span class="hljs-function">        <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span> &#123;<br>        bytes memory srcBytes = bytes(src);<br>        bytes memory valueBytes = bytes(<span class="hljs-keyword">value</span>);<br><br>        assert(valueBytes.length == <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i = offset; i &lt; srcBytes.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (srcBytes[i] == valueBytes[<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory src, <span class="hljs-built_in">string</span> memory separator</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span>[] memory splitArr</span>)</span> &#123;<br>        bytes memory srcBytes = bytes(src);<br><br>        <span class="hljs-built_in">uint</span> offset = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">uint</span> splitsCount = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> limit = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (offset &lt; srcBytes.length - <span class="hljs-number">1</span>) &#123;<br>            limit = indexOf(src, separator, offset);<br>            <span class="hljs-keyword">if</span> (limit == <span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                splitsCount++;<br>                offset = <span class="hljs-built_in">uint</span>(limit) + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        splitArr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[](splitsCount);<br><br>        offset = <span class="hljs-number">0</span>;<br>        splitsCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (offset &lt; srcBytes.length - <span class="hljs-number">1</span>) &#123;<br><br>            limit = indexOf(src, separator, offset);<br>            <span class="hljs-keyword">if</span> (limit == - <span class="hljs-number">1</span>) &#123;<br>                limit = <span class="hljs-built_in">int</span>(srcBytes.length);<br>            &#125;<br><br>            <span class="hljs-built_in">string</span> memory tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-built_in">uint</span>(limit) - offset);<br>            bytes memory tmpBytes = bytes(tmp);<br><br>            <span class="hljs-built_in">uint</span> j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i = offset; i &lt; <span class="hljs-built_in">uint</span>(limit); i++) &#123;<br>                tmpBytes[j++] = srcBytes[i];<br>            &#125;<br>            offset = <span class="hljs-built_in">uint</span>(limit) + <span class="hljs-number">1</span>;<br>            splitArr[splitsCount++] = <span class="hljs-built_in">string</span>(tmpBytes);<br>        &#125;<br>        <span class="hljs-keyword">return</span> splitArr;<br>    &#125;<br>    <br><br>    <br>    <span class="hljs-function">function <span class="hljs-title">toInt</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">int</span> _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (bytes(_self).length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> _ret;<br>        &#125;<br>        <br>        uint16 i;<br>        uint8 digit;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(digit == <span class="hljs-number">0x20</span> || digit == <span class="hljs-number">0x09</span> || digit == <span class="hljs-number">0x0D</span> || digit == <span class="hljs-number">0x0A</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-built_in">bool</span> positive = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (bytes(_self)[i] == <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br>            positive = <span class="hljs-literal">true</span>;<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bytes(_self)[i] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            positive = <span class="hljs-literal">false</span>;<br>            i++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(digit &gt;= <span class="hljs-number">0x30</span> &amp;&amp; digit &lt;= <span class="hljs-number">0x39</span>)) &#123;<br>                <span class="hljs-keyword">return</span> _ret;<br>            &#125;<br>            _ret = _ret*<span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(digit<span class="hljs-number">-0x30</span>);<br>        &#125;        <br>        <br>        <span class="hljs-keyword">if</span> (!positive) &#123;<br>            _ret = -_ret;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">toAddress</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params">address _ret</span>)</span> &#123;<br>        uint16 i;<br>        uint8 digit;<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(digit == <span class="hljs-number">0x20</span> || digit == <span class="hljs-number">0x09</span> || digit == <span class="hljs-number">0x0D</span> || digit == <span class="hljs-number">0x0A</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (bytes(_self).length-i &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> address(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//must start with 0x</span><br>        <span class="hljs-keyword">if</span> (!(bytes(_self)[i] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; bytes(_self)[i+<span class="hljs-number">1</span>]|<span class="hljs-number">0x20</span> == <span class="hljs-string">&#x27;x&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> address(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">uint</span> addr = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span> (i+=<span class="hljs-number">2</span>; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (digit &gt;= <span class="hljs-number">0x30</span> &amp;&amp; digit &lt;= <span class="hljs-number">0x39</span>) <span class="hljs-comment">//&#x27;0&#x27;-&#x27;9&#x27;</span><br>                digit -= <span class="hljs-number">0x30</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (digit|<span class="hljs-number">0x20</span> &gt;= <span class="hljs-number">0x61</span> &amp;&amp; digit|<span class="hljs-number">0x20</span> &lt;= <span class="hljs-number">0x66</span>) <span class="hljs-comment">//&#x27;a&#x27;-&#x27;f&#x27;</span><br>                digit = digit<span class="hljs-number">-0x61</span>+<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">else</span> <br>                <span class="hljs-keyword">return</span> address(<span class="hljs-number">0</span>); <br>            <br>            addr = addr*<span class="hljs-number">16</span>+digit;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> address(addr);<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">toKeyValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _key</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(bytes(_self).length + bytes(_key).length + <span class="hljs-number">5</span>);<br>        <br>        <span class="hljs-built_in">uint</span> selfptr;<br>        <span class="hljs-built_in">uint</span> keyptr;<br>        <span class="hljs-built_in">uint</span> retptr;<br>        assembly &#123;<br>            selfptr := <span class="hljs-keyword">add</span>(_self, <span class="hljs-number">0x20</span>)<br>            keyptr := <span class="hljs-keyword">add</span>(_key, <span class="hljs-number">0x20</span>)<br>            retptr := <span class="hljs-keyword">add</span>(_ret, <span class="hljs-number">0x20</span>)<br>        &#125;<br>        <br>        <span class="hljs-built_in">uint</span> pos = <span class="hljs-number">0</span>;<br><br>        bytes(_ret)[pos++] = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>        memcpy(retptr+pos, keyptr, bytes(_key).length);<br>        pos += bytes(_key).length;<br>        bytes(_ret)[pos++] = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>        <br>        bytes(_ret)[pos++] = <span class="hljs-string">&#x27;:&#x27;</span>;<br>        <br>        bytes(_ret)[pos++] = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>        memcpy(retptr+pos, selfptr, bytes(_self).length);<br>        pos += bytes(_self).length;<br>        bytes(_ret)[pos++] = <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">getStringValueByKey</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _key</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory _ret</span>)</span> &#123;<br>_ret = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-built_in">int</span> pos = <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">uint</span> searchStart = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            pos = _self.indexOf(<span class="hljs-string">&quot;\&quot;&quot;</span>.concat(_key, <span class="hljs-string">&quot;\&quot;&quot;</span>), searchStart);<br>            <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>                pos = _self.indexOf(<span class="hljs-string">&quot;&#x27;&quot;</span>.concat(_key, <span class="hljs-string">&quot;&#x27;&quot;</span>), searchStart);<br>                <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> _ret;<br>                &#125;<br>            &#125;<br><br>            pos += <span class="hljs-built_in">int</span>(bytes(_key).length+<span class="hljs-number">2</span>);<br><br>            <span class="hljs-built_in">bool</span> colon = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">uint</span>(pos) &lt; bytes(_self).length) &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27; &#x27;</span> || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\t&#x27;</span> <br>                    || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\r&#x27;</span> || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>                    pos++;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;:&#x27;</span>) &#123;<br>                    pos++;<br>                    colon = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">uint</span>(pos) == bytes(_self).length) &#123;<br>                <span class="hljs-keyword">return</span> _ret;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (colon) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                searchStart = <span class="hljs-built_in">uint</span>(pos);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-built_in">bool</span> doubleQuotes = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">int</span> start = _self.indexOf(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-built_in">uint</span>(pos));<br>        <span class="hljs-keyword">if</span> (start == <span class="hljs-number">-1</span>) &#123;<br>            doubleQuotes = <span class="hljs-literal">false</span>;<br>            start = _self.indexOf(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-built_in">uint</span>(pos));<br>            <span class="hljs-keyword">if</span> (start == <span class="hljs-number">-1</span>) &#123;<br>                <span class="hljs-keyword">return</span> _ret;<br>            &#125;<br>        &#125;<br>        start += <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-built_in">int</span> end;<br>        <span class="hljs-keyword">if</span> (doubleQuotes) &#123;<br>            end = _self.indexOf(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-built_in">uint</span>(start));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            end = _self.indexOf(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-built_in">uint</span>(start));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (end == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">return</span> _ret;<br>        &#125;<br>        <br>        _ret = _self.substr(<span class="hljs-built_in">uint</span>(start), <span class="hljs-built_in">uint</span>(end-start));<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">getIntValueByKey</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _key</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">int</span> _ret</span>)</span> &#123;<br>        _ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> pos = <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">uint</span> searchStart = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            pos = _self.indexOf(<span class="hljs-string">&quot;\&quot;&quot;</span>.concat(_key, <span class="hljs-string">&quot;\&quot;&quot;</span>), searchStart);<br>            <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>                pos = _self.indexOf(<span class="hljs-string">&quot;&#x27;&quot;</span>.concat(_key, <span class="hljs-string">&quot;&#x27;&quot;</span>), searchStart);<br>                <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> _ret;<br>                &#125;<br>            &#125;<br><br>            pos += <span class="hljs-built_in">int</span>(bytes(_key).length+<span class="hljs-number">2</span>);<br><br>            <span class="hljs-built_in">bool</span> colon = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">uint</span>(pos) &lt; bytes(_self).length) &#123;<br>                <span class="hljs-keyword">if</span> (bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27; &#x27;</span> || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\t&#x27;</span> <br>                    || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\r&#x27;</span> || bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>                    pos++;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bytes(_self)[<span class="hljs-built_in">uint</span>(pos)] == <span class="hljs-string">&#x27;:&#x27;</span>) &#123;<br>                    pos++;<br>                    colon = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">uint</span>(pos) == bytes(_self).length) &#123;<br>                <span class="hljs-keyword">return</span> _ret;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (colon) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                searchStart = <span class="hljs-built_in">uint</span>(pos);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">uint</span> i = <span class="hljs-built_in">uint</span>(pos);<br>        uint8 digit;<br>        <span class="hljs-keyword">for</span> (; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(digit == <span class="hljs-number">0x20</span> || digit == <span class="hljs-number">0x09</span> || digit == <span class="hljs-number">0x0D</span> || digit == <span class="hljs-number">0x0A</span> <br>            || digit == <span class="hljs-number">0x3A</span> <span class="hljs-comment">/*:*/</span> || digit == <span class="hljs-number">0x22</span> <span class="hljs-comment">/*&quot;*/</span> || digit == <span class="hljs-number">0x27</span> <span class="hljs-comment">/*&#x27;*/</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-built_in">bool</span> positive = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (bytes(_self)[i] == <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br>            positive = <span class="hljs-literal">true</span>;<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bytes(_self)[i] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            positive = <span class="hljs-literal">false</span>;<br>            i++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (; i&lt;bytes(_self).length; ++i) &#123;<br>            digit = uint8(bytes(_self)[i]);<br>            <span class="hljs-keyword">if</span> (!(digit &gt;= <span class="hljs-number">0x30</span> &amp;&amp; digit &lt;= <span class="hljs-number">0x39</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (!positive) &#123;<br>                    _ret = -_ret;<br>                &#125;<br>                <span class="hljs-keyword">return</span> _ret;<br>            &#125;<br>            _ret = _ret*<span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(digit<span class="hljs-number">-0x30</span>);<br>        &#125;        <br>        <br>        <span class="hljs-keyword">if</span> (!positive) &#123;<br>            _ret = -_ret;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">toUppercase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory src</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory</span>)</span>&#123;<br>        bytes memory srcb = bytes(src);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>;i&lt;srcb.length;i++)&#123;<br>            <span class="hljs-built_in">byte</span> b = srcb[i];<br>            <span class="hljs-keyword">if</span>(b &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; b &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>                b &amp;= <span class="hljs-built_in">byte</span>(<span class="hljs-number">0xDF</span>);<span class="hljs-comment">// -32</span><br>                srcb[i] = b ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br>    <br>    <span class="hljs-function">function <span class="hljs-title">toLowercase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory src</span>) <span class="hljs-keyword">internal</span> pure <span class="hljs-title">returns</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory</span>)</span>&#123;<br>        bytes memory srcb = bytes(src);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>;i&lt;srcb.length;i++)&#123;<br>            <span class="hljs-built_in">byte</span> b = srcb[i];<br>            <span class="hljs-keyword">if</span>(b &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; b &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)&#123;<br>                b |= <span class="hljs-number">0x20</span>;<br>                srcb[i] = b;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br><br><br>    <span class="hljs-function">function <span class="hljs-title">keyExists</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span> memory _key</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span> _ret</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> pos = _self.indexOf(<span class="hljs-string">&quot;\&quot;&quot;</span>.concat(_key, <span class="hljs-string">&quot;\&quot;&quot;</span>));<br>        <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>            pos = _self.indexOf(<span class="hljs-string">&quot;&#x27;&quot;</span>.concat(_key, <span class="hljs-string">&quot;&#x27;&quot;</span>));<br>            <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">inArray</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span>[] storage _array</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span> _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;_array.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (_self.<span class="hljs-keyword">equals</span>(_array[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br> <br>    <span class="hljs-function">function <span class="hljs-title">inArrayNoCase</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _self, <span class="hljs-built_in">string</span>[] storage _array</span>) <span class="hljs-keyword">internal</span> <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span> _ret</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">uint</span> i=<span class="hljs-number">0</span>; i&lt;_array.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (_self.equalsNoCase(_array[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>  &#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Roles<br>Role permissions control contracts</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;<br><br>library Roles &#123;<br>    struct <span class="hljs-keyword">Role</span> &#123;<br>        <span class="hljs-keyword">mapping</span> (address =&gt; <span class="hljs-type">bool</span>) bearer;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">add</span>(<span class="hljs-keyword">Role</span> <span class="hljs-keyword">storage</span> <span class="hljs-keyword">role</span>, address account) <span class="hljs-type">internal</span> &#123;<br>        require(!has(<span class="hljs-keyword">role</span>, account), &quot;Roles: account already has role&quot;);<br>        <span class="hljs-keyword">role</span>.bearer[account] = <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> remove(<span class="hljs-keyword">Role</span> <span class="hljs-keyword">storage</span> <span class="hljs-keyword">role</span>, address account) <span class="hljs-type">internal</span> &#123;<br>        require(has(<span class="hljs-keyword">role</span>, account), &quot;Roles: account does not have role&quot;);<br>        <span class="hljs-keyword">role</span>.bearer[account] = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> has(<span class="hljs-keyword">Role</span> <span class="hljs-keyword">storage</span> <span class="hljs-keyword">role</span>, address account) <span class="hljs-type">internal</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (<span class="hljs-type">bool</span>) &#123;<br>        require(account != address(<span class="hljs-number">0</span>), &quot;Roles: account is the zero address&quot;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">role</span>.bearer[account];<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>SafeMath<br>A secure mathematical library that provides a safe addition, subtract, and divide。The use of secure mathematical contracts can refer to the Points contract warehouse。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;<br><br><br>library SafeMath &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mul</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;<br>        <span class="hljs-comment">// Gas optimization: this is cheaper than requiring &#x27;a&#x27; not being zero, but the</span><br>        <span class="hljs-comment">// benefit is lost if &#x27;b&#x27; is also tested.</span><br>        <span class="hljs-comment">// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522</span><br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        uint256 c = a * b;<br>        <span class="hljs-built_in">require</span>(c / a == b, <span class="hljs-string">&quot;SafeMath: multiplication overflow&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">div</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;<br>        <span class="hljs-comment">// Solidity only automatically asserts when dividing by 0</span><br>        <span class="hljs-built_in">require</span>(b &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;SafeMath: division by zero&quot;</span>);<br>        uint256 c = a / b;<br>        <span class="hljs-comment">// assert(a == b * c + a % b); // There is no case in which this doesn&#x27;t hold</span><br><br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;<br>        <span class="hljs-built_in">require</span>(b &lt;= a, <span class="hljs-string">&quot;SafeMath: subtraction overflow&quot;</span>);<br>        uint256 c = a - b;<br><br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;<br>        uint256 c = a + b;<br>        <span class="hljs-built_in">require</span>(c &gt;= a, <span class="hljs-string">&quot;SafeMath: addition overflow&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mod</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;<br>        <span class="hljs-built_in">require</span>(b != <span class="hljs-number">0</span>, <span class="hljs-string">&quot;SafeMath: modulo by zero&quot;</span>);<br>        <span class="hljs-keyword">return</span> a % b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="5"><li>table<br>BCOS CRUD uses the base library, which you can reference by re-contract calling CRUD.Table contract usage methods can be described by referring to the assat example in the bcos document <a href="https://fisco-bcos-documentation.readthedocs.io/">https://fisco-bcos-documentation.readthedocs.io</a>.<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;<br><br>contract TableFactory &#123;<br>    <span class="hljs-keyword">function</span> openTable(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (<span class="hljs-keyword">Table</span>); //<span class="hljs-keyword">open</span> <span class="hljs-keyword">table</span><br>    <span class="hljs-keyword">function</span> createTable(string, string, string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256); //<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><br>&#125;<br><br>//<span class="hljs-keyword">select</span> condition<br>contract Condition &#123;<br>    <span class="hljs-keyword">function</span> EQ(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> EQ(string, string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> EQ(string, address) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br><br>    <span class="hljs-keyword">function</span> NE(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> NE(string, string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br><br>    <span class="hljs-keyword">function</span> GT(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> GE(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br><br>    <span class="hljs-keyword">function</span> LT(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> LE(string, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">limit</span>(int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">limit</span>(int256, int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span>;<br>&#125;<br><br>//one <span class="hljs-type">record</span><br>contract Entry &#123;<br>    <span class="hljs-keyword">function</span> getInt(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (int256);<br>    <span class="hljs-keyword">function</span> getUInt(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256);<br>    <span class="hljs-keyword">function</span> getAddress(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (address);<br>    <span class="hljs-keyword">function</span> getBytes64(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (bytes1[<span class="hljs-number">64</span>]);<br>    <span class="hljs-keyword">function</span> getBytes32(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (bytes32);<br>    <span class="hljs-keyword">function</span> getString(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (string);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">set</span>(string, int256) <span class="hljs-built_in">public</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">set</span>(string, uint256) <span class="hljs-built_in">public</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">set</span>(string, string) <span class="hljs-built_in">public</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">set</span>(string, address) <span class="hljs-built_in">public</span>;<br>&#125;<br><br>//<span class="hljs-type">record</span> sets<br>contract Entries &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">get</span>(int256) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (Entry);<br>    <span class="hljs-keyword">function</span> size() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (int256);<br>&#125;<br><br>//<span class="hljs-keyword">Table</span> main contract<br>contract <span class="hljs-keyword">Table</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">select</span>(string, Condition) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (Entries);<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">insert</span>(string, Entry) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">update</span>(string, Entry, Condition) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br>    <span class="hljs-keyword">function</span> remove(string, Condition) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br><br>    <span class="hljs-keyword">function</span> newEntry() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (Entry);<br>    <span class="hljs-keyword">function</span> newCondition() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (Condition);<br>&#125;<br><br>contract KVTableFactory &#123;<br>    <span class="hljs-keyword">function</span> openTable(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (KVTable);<br>    <span class="hljs-keyword">function</span> createTable(string, string, string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br>&#125;<br><br>//KVTable per permiary key has <span class="hljs-keyword">only</span> one Entry<br>contract KVTable &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">get</span>(string) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (<span class="hljs-type">bool</span>, Entry);<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">set</span>(string, Entry) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br>    <span class="hljs-keyword">function</span> newEntry() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (Entry);<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="存证合约模板"><a href="#存证合约模板" class="headerlink" title="存证合约模板"></a>存证合约模板</h3><p>简介:</p><pre><code>Evidence 示例合约，使用分层的智能合约结构:1. 工厂合约(EvidenceSignersData.sol),由存证各方面事前约定，存储存证生效条件，并管理存证的生成。2. 存证合约(Evidence.sol)，由工厂合约生成，存储存证Id，hash和各方签名(每张存证一个合约)</code></pre><p>使用步骤:</p><pre><code>1. 部署EvidenceSignersData.sol合约，并在构造函数中指定存证生效条件(需要哪些机构进行认证确认)2. 存证时通过newEvidence接口在区块链创建具体存证合约3. 解析newEvidence调用返回的receipt，将解析出来的存证合约地址保存在应用系统4. 仲裁等认证机构利用存证合约地址调用addSignatures来对存证进行确认5. 取证时利用存证合约地址调用getEvidence接口进行取证。</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">address<span class="hljs-literal">[]</span> signers;  <br>event <span class="hljs-keyword">new</span><span class="hljs-constructor">EvidenceEvent(<span class="hljs-params">address</span> <span class="hljs-params">addr</span>)</span>;<br><br><span class="hljs-number">1.</span> 构造函数: 需要哪些机构确认<br>    <span class="hljs-keyword">function</span> <span class="hljs-constructor">EvidenceSignersData(<span class="hljs-params">address</span>[] <span class="hljs-params">evidenceSigners</span>)</span>public&#123;<br>            <span class="hljs-keyword">for</span>(uint i=<span class="hljs-number">0</span>; i&lt;evidenceSigners.length; ++i) &#123;<br>            signers.push(evidenceSigners<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-number">2.</span> 创建新的存证<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span><span class="hljs-constructor">Evidence(<span class="hljs-params">string</span> <span class="hljs-params">evi</span>, <span class="hljs-params">string</span> <span class="hljs-params">info</span>,<span class="hljs-params">string</span> <span class="hljs-params">id</span>,<span class="hljs-params">uint8</span> <span class="hljs-params">v</span>, <span class="hljs-params">bytes32</span> <span class="hljs-params">r</span>,<span class="hljs-params">bytes32</span> <span class="hljs-params">s</span>)</span>public returns(address)<br>        &#123;<br>            Evidence evidence = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Evidence(<span class="hljs-params">evi</span>, <span class="hljs-params">info</span>, <span class="hljs-params">id</span>, <span class="hljs-params">v</span>, <span class="hljs-params">r</span>, <span class="hljs-params">s</span>, <span class="hljs-params">this</span>, <span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span>;<br>            <span class="hljs-keyword">new</span><span class="hljs-constructor">EvidenceEvent(<span class="hljs-params">evidence</span>)</span>;<br>            return evidence;<br>        &#125;<br><br><br></code></pre></td></tr></table></figure><p>Evidence存证</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">验证地址是否是机构，获取机构数目，获取机构<br>contract EvidenceSignersDataABI&#123; <span class="hljs-keyword">function</span> verify(address addr)public constant returns(<span class="hljs-built_in">bool</span>)&#123;&#125;<br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Signer(<span class="hljs-params">uint</span> <span class="hljs-params">index</span>)</span>public constant returns(address)&#123;&#125; <br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">SignersSize()</span> public constant returns(uint)&#123;&#125;<br>&#125;<br><br><br>Evidence&#123;<br><span class="hljs-keyword">function</span> <span class="hljs-constructor">Evidence(<span class="hljs-params">string</span> <span class="hljs-params">evi</span>, <span class="hljs-params">string</span> <span class="hljs-params">info</span>, <span class="hljs-params">string</span> <span class="hljs-params">id</span>, <span class="hljs-params">uint8</span> <span class="hljs-params">v</span>, <span class="hljs-params">bytes32</span> <span class="hljs-params">r</span>, <span class="hljs-params">bytes32</span> <span class="hljs-params">s</span>, <span class="hljs-params">address</span> <span class="hljs-params">addr</span>, <span class="hljs-params">address</span> <span class="hljs-params">sender</span>)</span> public &#123;<br>       signersAddr = addr;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-constructor">CallVerify(<span class="hljs-params">sender</span>)</span>)<br>       &#123;<br>           evidence = evi;<br>           evidenceInfo = info;<br>           evidenceId = id;<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_v</span>.</span></span>push(v);<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_r</span>.</span></span>push(r);<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_s</span>.</span></span>push(s);<br>           signers.push(sender);<br>           <span class="hljs-keyword">new</span><span class="hljs-constructor">SignaturesEvent(<span class="hljs-params">evi</span>,<span class="hljs-params">info</span>,<span class="hljs-params">id</span>,<span class="hljs-params">v</span>,<span class="hljs-params">r</span>,<span class="hljs-params">s</span>,<span class="hljs-params">addr</span>)</span>;<br>       &#125;<br>       <span class="hljs-keyword">else</span><br>       &#123;<br>           error<span class="hljs-constructor">NewSignaturesEvent(<span class="hljs-params">evi</span>,<span class="hljs-params">info</span>,<span class="hljs-params">id</span>,<span class="hljs-params">v</span>,<span class="hljs-params">r</span>,<span class="hljs-params">s</span>,<span class="hljs-params">addr</span>)</span>;<br>       &#125;<br>    &#125;<br><br><br>&#125;<br><br><br><br><br><br><br></code></pre></td></tr></table></figure><p>操作流程:</p><ol><li>部署EvidenceSignersData.sol<br><img src="01.png"><br>其中部署的时候给定的机构地址是:  [“0x1b4c1fe408615338e7c1deb388e10b3b91c99d80”,”0xed8d413325631545f53cbe8e48c18fcef85e42f4”]<br><img src="02.png"></li></ol><p>合约地址是:0x4da46fa7c81105131254ba459ada490c19f8f555</p><p>发交易:</p><pre><code>1. getSigners():  刚开始使用了一个机构地址    [     &quot;[ \&quot;0x1b4c1fe408615338e7c1deb388e10b3b91c99d80\&quot; ]&quot;    ]2. getSignersSize(): 13. newEvidence的时候报系统错误使用用户 g1u1![](04.png) 交易失败</code></pre><p>一直失败:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">&#123;<br><span class="hljs-symbol">transactionHash:</span> <span class="hljs-string">&quot;0x5524e6b37615de4cd160c58759165e48fa55bbe5f6a0f71deef22c009a82193e&quot;</span><br><span class="hljs-symbol">transactionIndex:</span> <span class="hljs-string">&quot;0x0&quot;</span><br><span class="hljs-symbol">root:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="hljs-symbol">blockNumber:</span> <span class="hljs-string">&quot;40&quot;</span><br><span class="hljs-symbol">blockHash:</span> <span class="hljs-string">&quot;0x40796a7e5ccfaf119b528b4eb2a84e4744b82af946ccef5f9079058a866239bc&quot;</span><br><span class="hljs-symbol">from:</span> <span class="hljs-string">&quot;0xe5e01304dad023fe16722b8000be19aaa69aa7c9&quot;</span><br><span class="hljs-symbol">to:</span> <span class="hljs-string">&quot;0x96d12ec2c088b01b176e874e49aeba7897bdd27f &quot;</span><br><span class="hljs-symbol">gasUsed:</span> <span class="hljs-string">&quot;11092964371&quot;</span><br><span class="hljs-symbol">contractAddress:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span><br><span class="hljs-symbol">logs:</span> []<br><span class="hljs-symbol">logsBloom:</span> <span class="hljs-string">&quot;0xquot;</span><br><span class="hljs-symbol">status:</span> <span class="hljs-number">0x16</span><br><span class="hljs-symbol">statusMsg:</span> <span class="hljs-string">&quot;RevertInstruction&quot;</span><br><span class="hljs-symbol">input:</span> <span class="hljs-string">&quot;0xa3aaada5000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000037373730000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="hljs-symbol">output:</span> <span class="hljs-string">&quot;0x&quot;</span><br><span class="hljs-symbol">txProof:</span> null<br><span class="hljs-symbol">receiptProof:</span> null<br><span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;Revert instruction&quot;</span><br><span class="hljs-symbol">statusOK:</span> false<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="积分合约模板"><a href="#积分合约模板" class="headerlink" title="积分合约模板"></a>积分合约模板</h3><h2 id="WeBASE实训插件方案"><a href="#WeBASE实训插件方案" class="headerlink" title="WeBASE实训插件方案"></a>WeBASE实训插件方案</h2>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WeBASE</tag>
      
      <tag>合约管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeIdentity</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeIdentity/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeIdentity/</url>
    
    <content type="html"><![CDATA[<h2 id="WeIdentity"><a href="#WeIdentity" class="headerlink" title="WeIdentity"></a>WeIdentity</h2><h3 id="1-部署"><a href="#1-部署" class="headerlink" title="1 部署"></a>1 部署</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/WeBank/</span>WeIdentity-Build-Tools<span class="hljs-regexp">/raw/m</span>aster<span class="hljs-regexp">/common/</span>script<span class="hljs-regexp">/install/</span>weid_install.sh<br><br>chmod u+x weid_install.sh<br>./weid_install.sh<br>cd weid-build-tools<br><br>./start.sh<br><br>the server start successfully.<br>the server url:  http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6021</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WeIdentity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-1-账户权限控制</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-1-%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-1-%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="账户权限控制"><a href="#账户权限控制" class="headerlink" title="账户权限控制"></a>账户权限控制</h2><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html</a></p><h3 id="1-基于角色的控制权限"><a href="#1-基于角色的控制权限" class="headerlink" title="1 基于角色的控制权限"></a>1 基于角色的控制权限</h3><h4 id="角色定义"><a href="#角色定义" class="headerlink" title="角色定义"></a>角色定义</h4><p>分为治理方，运维方，监管方和业务方。 考虑到权责分离，治理方、运维方和开发方权责分离，角色互斥。</p><ul><li><p>治理方: 拥有投票权，可以参与治理投票(AUTH_ASSIGN_AUTH),可以增删节点、修改链配置、添加撤销运维、冻结解冻合约、对用户表的写权限控制。链级别的可变配置的权限。</p></li><li><p>运维方: 由治理方添加运维账号，运维账号可以部署合约，创建表，管理合约版本，冻结解账本账号部署的合约。</p></li><li><p>业务方: 业务方账号由运维添加到某个合约，可以调用该合约的写接口</p></li><li><p>监管方: 监管方监管链的运行，能够获取链运行中权限变更的记录，能够获取需要审计的数据。</p></li></ul><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>简称治理账号为委员</p><ul><li><p>权限项命名符合动宾结构</p></li><li><p>增删委员、修改委员权重、修改生效阈值三个操作，需要   <strong>有效投票权重/总权重 &gt; 生效阈值</strong>  生效，其中 <strong>总权重=SUM(委员权重)</strong></p></li><li><p>治理账号可以添加运维账号，但是治理账号不拥有运维账号的权限</p></li><li><p>运维账号可以为某个合约添加业务账号，但是运维账号没有业务账号权限。</p></li></ul><p><img src="roles.png"></p><h4 id="权限项"><a href="#权限项" class="headerlink" title="权限项"></a>权限项</h4><p><img src="02.png"></p><h4 id="计票与生效"><a href="#计票与生效" class="headerlink" title="计票与生效"></a>计票与生效</h4><ul><li>所有治理操作需要有效投票数/委员数&gt;生效阈值才能生效</li><li>每次投票操作，如果是委员投票，则记录操作内容和投票委员，不重复计票</li><li>每次投票操作，计票结束后，计算有效投票数/委员数，如果大于此操作的生效阈值，则对应操作生效，写入</li><li>投票设置过期时间，根据块高，blockLimit的10倍，固定不可改</li></ul><h4 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h4><ol><li>增删委员计票与生效</li><li>修改委员权重计票与生效</li><li>修改生效阈值计票与生效</li><li>委员增删运维</li><li>委员解冻冻结合约</li><li>委员增删节点</li><li>委员修改系统配置</li><li>权限项默认阈值存储</li><li>运维部署合约的权限</li><li>运维管理合约版本的权限</li></ol><h4 id="委员相关"><a href="#委员相关" class="headerlink" title="委员相关"></a>委员相关</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> grant<span class="hljs-constructor">CommitteeMember(<span class="hljs-params">address</span> <span class="hljs-params">user</span>)</span> public returns (int256);<br><span class="hljs-keyword">function</span> update<span class="hljs-constructor">CommitteeMemberWeight(<span class="hljs-params">address</span> <span class="hljs-params">user</span>, <span class="hljs-params">int256</span> <span class="hljs-params">weight</span>)</span> public returns (int256);<br><span class="hljs-keyword">function</span> revoke<span class="hljs-constructor">CommitteeMember(<span class="hljs-params">address</span> <span class="hljs-params">user</span>)</span> public returns (int256);<br><span class="hljs-keyword">function</span> <span class="hljs-built_in">list</span><span class="hljs-constructor">CommitteeMembers()</span> public returns (<span class="hljs-built_in">string</span>);<br><span class="hljs-comment">// threshold取值范围[0,100]</span><br><span class="hljs-keyword">function</span> update<span class="hljs-constructor">Threshold(<span class="hljs-params">int256</span> <span class="hljs-params">threshold</span>)</span> public returns (int256);<br><br></code></pre></td></tr></table></figure><h4 id="运维相关"><a href="#运维相关" class="headerlink" title="运维相关"></a>运维相关</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> grantOperator(address <span class="hljs-keyword">user</span>) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br><span class="hljs-keyword">function</span> revokeOperator(address <span class="hljs-keyword">user</span>) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (int256);<br><span class="hljs-keyword">function</span> listOperator() <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (string);<br></code></pre></td></tr></table></figure><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>表: <em>sys_committee_votes</em></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-emphasis">_id_</span>   <span class="hljs-emphasis">_status_</span>   <span class="hljs-emphasis">_num_</span>   key    value   origin   enable_num<br></code></pre></td></tr></table></figure><p>key是账户，value记录grant/revoke，origin记录投票人<br>key是账户_update_weight，value记录目标权重，origin记录投票人<br>key是账户_weight，value记录权重<br>key是auth_threshold，value记录当前阈值<br>key是update_auth_threshold，value记录目标阈值，origin记录投票人</p><h3 id="2-账户权限控制"><a href="#2-账户权限控制" class="headerlink" title="2 账户权限控制"></a>2 账户权限控制</h3><p><img src="votes.png"></p><ol><li>创建group1user1，group1user2 两个用户</li><li>增加链委员: 此时没有链委员，可以直接增加成功 group1user1 为治理委员</li><li>用链委员group1user1 新增委员: group1user2, 此时  投票数1/委员数1 =1 &gt; 0.5 新增成功</li><li>去除委员group1user1, 需要用 链委员 user1,user2 分别撤销user1，都完成后，此时委员仅剩user2</li><li>user2增加委员user1，成功</li><li>user1和user2 都增加user3成功，单独执行一个不成功</li></ol><p>此时:<br><img src="3.png" alt="委员"><br><img src="4.png" alt="运维"></p><p>开始部署合约，委员没有权限<br><img src="5.png"><br><img src="6.png"></p><p>只能由运维部署，部署成功，开始调用，委员和运维都可以调用成功</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 配置管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FISCO基础</tag>
      
      <tag>账户权限</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase-群组创建与管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E7%BE%A4%E7%BB%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E7%BE%A4%E7%BB%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase-应用管理</title>
    <link href="/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/12/03/FISCO-WeBase-%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="WeBASE-应用管理"><a href="#WeBASE-应用管理" class="headerlink" title="WeBASE 应用管理"></a>WeBASE 应用管理</h2><p><a href="https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE-APP-SDK/desc.html">https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE-APP-SDK/desc.html</a></p><h2 id="使用WeBase开发区块链应用"><a href="#使用WeBase开发区块链应用" class="headerlink" title="使用WeBase开发区块链应用"></a>使用WeBase开发区块链应用</h2><p>合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sol">pragma solidity ^0.4.4;<br><br>contract HelloWorld&#123;<br>    string name;<br><br>    function HelloWorld()&#123;<br>       name = &quot;Hello, World!&quot;;<br>    &#125;<br><br>    function get()constant returns(string)&#123;<br>        return name;<br>    &#125;<br><br>    function set(string n)&#123;<br>     name = n;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应用开发</tag>
      
      <tag>WeBASE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-WeBase</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/FISCO-WeBase/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/FISCO-WeBase/</url>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>WeBASE(WeBank Blockchain Application Software Extension) 是在区块链应用和FISCO BCOS之间搭建的一套通用组件。 围绕<br>交易、合约、密钥管理、数据、数据可视化来设计各个模块，开发者可以根据业务所需，选择子系统进行部署。WeBASE屏蔽了区块链底层的复杂度，降低开发者的门槛，大幅提高区块链应用的开发效率，包括节点前置、节点管理、交易链路、数据导出、Web管理等子系统。</p><h3 id="建立区块链应用开发标准"><a href="#建立区块链应用开发标准" class="headerlink" title="建立区块链应用开发标准"></a>建立区块链应用开发标准</h3><p>WeBASE将区块链应用开发标准化，按照部署、配置、开发智能合约、开发应用层、在线运维管理五个步骤既可以完成一个区块链应用的开发。<a href="https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/quick-start.html">https://webasedoc.readthedocs.io/zh_CN/latest/docs/WeBASE/quick-start.html</a></p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>按需部署: WeBASE抽象应用开发的诸多共性模块，形成各类服务组件，开发者根据部署所需组件<br>微服务: WeBASE采用微服务架构，基于Spring Boot框架，提供RESTful风格接口<br>零耦合: WeBASE所有子系统独立存在，均可以独立部署，独立提供服务<br>可定制: 前端页面往往带有自身的业务属性，因此WeBASE采用前后端分离的技术，便于开发者基于后端定义自己的前端页面。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>完整的部署如下，其中WeBASE-front需要和区块链节点同机部署。<br><img src="01.png"></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>从可视化，智能合约，交易，数据四个维度合计各个中间件，各模块主要功能如下</p><p><img src="02.png"></p><h3 id="各子系统介绍"><a href="#各子系统介绍" class="headerlink" title="各子系统介绍"></a>各子系统介绍</h3><h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2 安装部署"></a>2 安装部署</h2><h3 id="2-1-快速入门搭建"><a href="#2-1-快速入门搭建" class="headerlink" title="2.1 快速入门搭建"></a>2.1 快速入门搭建</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>osp-<span class="hljs-number">1257653870</span>.cos.ap-guangzhou.myqcloud.com<span class="hljs-regexp">/WeBASE/</span>releases<span class="hljs-regexp">/download/</span>v1.<span class="hljs-number">5.3</span>/webase-front.zip<br><br>unzip webase-front.zip<br>cd webase-front<br><br></code></pre></td></tr></table></figure><p>拷贝sdk证书文件（build_chain的时候生成的）</p><p>将节点所在目录nodes/${ip}/sdk下的所有文件拷贝到当前conf目录，供SDK与节点建立连接时使用（SDK会自动判断是否为国密，且是否使用国密SSL）</p><ul><li>链的sdk目录包含了ca.crt, sdk.crt, sdk.key和gm文件夹，gm文件夹包含了国密SSL所需的证书</li><li>拷贝命令可使用cp -r nodes/${ip}/sdk/* ./conf/</li><li>注，只有在建链时手动指定了-G(大写)时节点才会使用国密SSL</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">启动： <span class="hljs-keyword">bash </span>start.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>停止： <span class="hljs-keyword">bash </span>stop.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>检查： <span class="hljs-keyword">bash </span>status.<span class="hljs-keyword">sh </span><br><br></code></pre></td></tr></table></figure><p>访问: <a href="http://localhost:5002/WeBASE-Front">http://localhost:5002/WeBASE-Front</a> </p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>一键部署可以在 同机 快速搭建WeBASE管理台环境，方便用户快速体验WeBASE管理平台。</p><p>​ 一键部署会搭建：节点（FISCO-BCOS 2.0+）、管理平台（WeBASE-Web）、节点管理子系统（WeBASE-Node-Manager）、节点前置子系统（WeBASE-Front）、签名服务（WeBASE-Sign）。其中，节点的搭建是可选的，可以通过配置来选择使用已有链或者搭建新链。一键部署架构如下：<br><img src="03.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>osp-<span class="hljs-number">1257653870</span>.cos.ap-guangzhou.myqcloud.com<span class="hljs-regexp">/WeBASE/</span>releases<span class="hljs-regexp">/download/</span>v1.<span class="hljs-number">5.3</span>/webase-deploy.zip<br>unzip webase-deploy.zip<br>cd webase-deploy<br></code></pre></td></tr></table></figure><p>修改后的配置文件common.properties</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs clean">[common]<br><br># Webase Subsystem Version (v1<span class="hljs-number">.1</span><span class="hljs-number">.0</span> or above)<br>webase.web.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.mgr.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.sign.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br>webase.front.version=v1<span class="hljs-number">.5</span><span class="hljs-number">.3</span><br><br>#####################################################################<br># <span class="hljs-keyword">if</span> use [installDockerAll] to install WeBASE by docker<br># <span class="hljs-keyword">if</span> use [installAll] or [installWeBASE], ignore configuration here<br><br># <span class="hljs-number">1</span>: enable mysql <span class="hljs-keyword">in</span> docker<br># <span class="hljs-number">0</span>: mysql run <span class="hljs-keyword">in</span> host, required fill <span class="hljs-keyword">in</span> the configuration <span class="hljs-keyword">of</span> webase-node-mgr and webase-sign<br>docker.mysql=<span class="hljs-number">0</span><br><br># <span class="hljs-keyword">if</span> [docker.mysql=<span class="hljs-number">1</span>], mysql run <span class="hljs-keyword">in</span> host (only works <span class="hljs-keyword">in</span> [installDockerAll])<br># run mysql <span class="hljs-number">5.6</span> by docker<br>docker.mysql.port=<span class="hljs-number">23306</span><br># default user [root]<br>docker.mysql.password=<span class="hljs-number">123456</span><br>#####################################################################<br><br># Mysql database configuration <span class="hljs-keyword">of</span> WeBASE-Node-Manager<br>mysql.ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>mysql.port=<span class="hljs-number">3306</span><br>mysql.user=xxxx<br>mysql.password=xxxx<br>mysql.database=webasenodemanager<br><br># Mysql database configuration <span class="hljs-keyword">of</span> WeBASE-Sign<br>sign.mysql.ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>sign.mysql.port=<span class="hljs-number">3306</span><br>sign.mysql.user=xxxx<br>sign.mysql.password=xxxx<br>sign.mysql.database=webasesign<br># <span class="hljs-keyword">if</span> docker mysql disabled[docker.mysql=<span class="hljs-number">0</span>] above<br><br># H2 database name <span class="hljs-keyword">of</span> WeBASE-Front (docker mode ignore this)<br>front.h2.name=webasefront<br>front.org=fisco<br><br># WeBASE-Web service port <br>web.port=<span class="hljs-number">5000</span><br># enable WeBASE-Web overview pages for mobile phone(docker mode not support h5 yet)<br># (<span class="hljs-number">0</span>: disable, <span class="hljs-number">1</span>: enable)<br>web.h5.enable=<span class="hljs-number">1</span><br><br># WeBASE-Node-Manager service port<br>mgr.port=<span class="hljs-number">5001</span><br><br># WeBASE-Front service port<br>front.port=<span class="hljs-number">5002</span><br><br># WeBASE-Sign service port<br>sign.port=<span class="hljs-number">5004</span><br><br># Node listening IP<br>node.listenIp=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br># Node p2p service port<br>node.p2pPort=<span class="hljs-number">30300</span><br># Node channel service port<br>node.channelPort=<span class="hljs-number">20200</span><br># Node rpc service port<br>node.rpcPort=<span class="hljs-number">8545</span><br><br># Encrypt type (<span class="hljs-number">0</span>: standard, <span class="hljs-number">1</span>: guomi)<br>encrypt.type=<span class="hljs-number">0</span><br># ssl encrypt type (<span class="hljs-number">0</span>: standard ssl, <span class="hljs-number">1</span>: guomi ssl)<br># only guomi type support guomi ssl<br>encrypt.sslType=<span class="hljs-number">0</span><br><br># Use existing chain or not (yes/no)<br><span class="hljs-keyword">if</span>.exist.fisco=no<br><br>### <span class="hljs-keyword">if</span> build new chain, [<span class="hljs-keyword">if</span>.exist.fisco=no]<br># Configuration required when building a new chain <br># Fisco-bcos version<br>fisco.version=<span class="hljs-number">2.8</span><span class="hljs-number">.0</span><br># Number <span class="hljs-keyword">of</span> building nodes (default value: <span class="hljs-number">2</span>)<br>node.counts=nodeCounts<br><br>### <span class="hljs-keyword">if</span> using exited chain, [<span class="hljs-keyword">if</span>.exist.fisco=yes]<br># The path <span class="hljs-keyword">of</span> the existing chain, the path <span class="hljs-keyword">of</span> the start_all.sh script<br># Under the path, there should be a <span class="hljs-string">&#x27;sdk&#x27;</span> directory <span class="hljs-keyword">where</span> the SDK certificates (ca.crt, sdk.crt, node.key and gm directory(gm ssl)) are stored<br>fisco.dir=/data/app/nodes/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br># Node directory <span class="hljs-keyword">in</span> [fisco.dir] for WeBASE-Front to connect <br># example: <span class="hljs-string">&#x27;node.dir=node0&#x27;</span> would auto change to <span class="hljs-string">&#x27;/data/app/nodes/127.0.0.1/node0&#x27;</span><br># Under the path, there is a conf directory <span class="hljs-keyword">where</span> node certificates (ca.crt, node.crt and node.key) are stored<br>node.dir=node0<br><br><br><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> deploy.<span class="hljs-keyword">py</span>  installAll<br></code></pre></td></tr></table></figure><p>访问:<br>http://{deployIP}:{webPort}<br>示例：<a href="http://localhost:5000/">http://localhost:5000</a></p><p>用户名: admin  密码: Sxw123</p><h2 id="WeBASE管理平台使用手册"><a href="#WeBASE管理平台使用手册" class="headerlink" title="WeBASE管理平台使用手册"></a>WeBASE管理平台使用手册</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>主要功能</p><ul><li>区块链数据概览</li><li>节点管理</li><li>合约管理</li><li>私钥管理</li><li>应用管理</li><li>系统管理</li><li>系统监控</li><li>交易审计</li><li>订阅事件</li><li>账号管理</li><li>群组管理</li><li>移动端管理台</li><li>数据监控大屏</li></ul><p><img src="4.png"></p><p>CNS查询：CNS（Contract Name Service）是通过提供链上合约名称与合约地址映射关系的记录及相应的查询功能，方便调用者通过记忆简单的合约名来实现对链上合约的调用。详情可查看FISCO-BCOS文档的 CNS方案</p><h4 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h4><p>系统管理目前支持权限管理、系统配置管理、证书管理的功能</p><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>基于FISCO BCOS 2.5.0 及以上版本的基于角色的权限管理: 支持链委员会管理和运维管理员管理</p><ul><li>链委员会管理: 链委员会的修改操作均需要通过多个委员会投票完成，链委员会拥有投票权，可以增删节点，修改链配置，添加撤销运维，冻结节约合约，对用户表的写权限控制；<ul><li>修改委员会成员(新增、撤销委员)、修改委员会投票阈值、修改委员会投票权重等操作均通过投票进行修改。</li><li>投票阈值为投票生效的阈值，有效投票权重数/委员总权重数&gt;生效阈值投票才能生效，阈值为开区间，即：投票权重比例必须大于阈值（不包含等于）；</li><li>每次投票操作，如果是委员投票，则记录操作内容和投票委员，不重复计票；</li><li>票设置过期时间，根据块高，blockLimit的10倍(即10000)，固定不可改；</li><li>用户不能同时成为链委员和运维管理员；</li></ul></li></ul><h4 id="运维管理"><a href="#运维管理" class="headerlink" title="运维管理:"></a>运维管理:</h4><p>维由链委员直接赋予（无需通过投票赋予），运维可以部署合约、创建表、管理合约版本、冻结解冻本账号部署的合约；</p><p>注：链委员会为空时，不作链委员会权限限制，所有用户拥有委员权限，可以自由给自身或其他用户添加链委员权限；设置了第一个链委员后，非链委员用户无权限；请妥善保管链委员的私钥！<br>运维管理员为空时，所有用户拥有运维权限；同理，设置了第一个运维管理员后，非运维用户无权限；</p><p>FISCO-BCOS基于角色的权限管理机制详情可以参考文档使用手册-基于角色的权限控制，具体的设计原理可以参考文档 系统设计-基于角色的权限控制</p><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html#id2">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/permission_control.html#id2</a></p><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/design/security_control/chain_governance.html</a></p><h4 id="证书说明："><a href="#证书说明：" class="headerlink" title="证书说明："></a>证书说明：</h4><p>FISCO-BCOS证书说明可以参考FISCO-BCOS使用手册的证书说明<br><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/certificates.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/certificates.html</a></p><h4 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h4><p>应用管理是WeBASE管理台提供的一种第三方应用接入功能。WeBASE作为底层运维平台，已经有了底层运维基础能力。各个应用可以利用这些基础能力来开发自己的运维管理台。这些可以利用的基础能力主要包括四个方面：1、链信息和链运维（权限，配置等）；2、合约；3、链的私钥账号；4、管理账号(登陆状态)</p><p><img src="5.png"></p><ol><li>各应用的进程管理还是自我管理，避免WeBASE过于笨重</li><li>WeBASE提供的是规范，方便其他应用参考打通应用与WeBASE的联系</li><li>如果有扩展，WeBASE也方便提供API来实现</li><li>不破坏各应用自身的完整性</li></ol><p><img src="6.png"></p><p><a href="https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html">https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html</a><br>WeIdentity目前主要包含两大模块：WeIdentity DID以及WeIdentity Credential。 WeIdentity DID模块在FISCO-BCOS区块链底层平台上实现了一套符合W3C DID规范的分布式多中心的身份标识协议，使实体（人或物）的现实身份实现了链上的身份标识；WeIdentity Credential提供了一整套基于W3C VC规范的解决方案，旨在对这一类数据进行标准化、电子化，生成可验证、可交换的「凭证」（Credential），支持对凭证的属性进行选择性披露，及生成链上存证（Evidence）。</p><p><a href="https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html">https://weidentity.readthedocs.io/zh_CN/latest/docs/deploy-via-web.html</a></p><h4 id="交易审计"><a href="#交易审计" class="headerlink" title="交易审计"></a>交易审计</h4><p>联盟链中各个机构按照联盟委员会制定的规章在链上共享和流转数据。这些规章往往是字面的，大家是否遵守缺乏监管和审计。因此为了规范大家的使用方式，避免链的计算资源和存储资源被某些机构滥用，急需一套服务来辅助监管和审计链上的行为。交易审计就是结合上面的区块链数据，私钥管理和合约管理三者的数据，以区块链数据为原材料，以私钥管理和合约管理为依据做的一个综合性的数据分析功能。 交易审计提供可视化的去中心合约部署和交易监控、审计功能，方便识别链资源被滥用的情况，为联盟链治理提供依据。</p><p>交易审计的主要目标:</p><ul><li>用户交易总量数量统计： 监控链上各个外部交易账号的每日交易量</li><li>用户子类交易数量共计: 监控链上各个外部交易账号的每种类型的每日交易量</li><li>异常交易用户监控: 监控链上出现的异常交易用户(没有在区块链中间件平台登记的交易用户)</li><li>异常合约部署监控: 监控链上合约的部署情况，非白名单合约(没有在区块链中间件平台登记的合约)记录。</li></ul><h4 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h4><p>订阅事件管理: 可以查看前置中已订阅的链上事件通知，包括出块事件列表和合约Event事件列表。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WeBASE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-8-案例</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/FISCO-8-%E6%A1%88%E4%BE%8B/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/FISCO-8-%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="案例1-郑州公积金区块链日志平台"><a href="#案例1-郑州公积金区块链日志平台" class="headerlink" title="案例1 郑州公积金区块链日志平台"></a>案例1 郑州公积金区块链日志平台</h2><p><img src="%E9%83%91%E5%B7%9E%E5%85%AC%E7%A7%AF%E9%87%91.png" alt="郑州公积金"></p><p>郑州公积金区块链日志平台</p><ul><li>公积金接口调用日志上链</li><li>各银行调用日志同步共享到其自身节点，数据隔离存储，保护数据隐私</li><li>各银行通过自身节点查询日志，无需通过公积金中心，减少公积金中心系统压力，提高银行获取调用接口日志效率</li></ul>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B-2-区块链应用-高级应用开发</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/30/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/30/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Go语言实现P2P网络"><a href="#1-Go语言实现P2P网络" class="headerlink" title="1 Go语言实现P2P网络"></a>1 Go语言实现P2P网络</h2><p><img src="01.png" alt="p2p"><br>A和B分别是处于两个局域网的主机，二者进行公网访问时都是通过路由器的NAT技术映射了一个公网地址，对于A和B来说，A和B默认情况下并不知道对方的公网地址。因此想要通信时，必须借助一个第三方服务器S(公网地址是公开的)。 当A和B分别请求与服务器s进行连接时，S同时获得了A和B映射后的公网地址，此时S再将A和B的公网地址分别传递给双方，A和B就知道彼此的地址了。</p><p>A和B可以直接通信了，但是由于路由器的安全策略，当有一个默认的地址想要发信息给内部主机时，路由器通常都是拒绝的，也就是说如果该地址没有在路由器内部登记注册，路由器会认为该地址存在风险，直接将网络包丢弃。<br>那么即便A和B知道对方公网地址，也还是无法通信吗？</p><p>不是的，，因为A和B主动发出消息时，会在路由器内部记录对应的公网地址，正因为如此，A和B想要建立P2P通信时，需要分别向对方发送一次请求，才可以建立P2P连接。</p><p><a href="https://www.zhihu.com/question/39382183">https://www.zhihu.com/question/39382183</a><br>使用UDP封装的最大好处是，可以使用不同的UDP端口来区分不同的用户隧道，那么一个NAT设备理论上可以支持65K个用户隧道连接。</p><pre><code>1、损耗问题。UDP比TCP损耗小，不但是网速损耗，还有控制损耗（即额外一次三次握手，两次窗口控制等）。2、网络设备支持度。虽然新的nat设备一般都支持“tcp同时打开”方式建立连接，但是网络上很多旧的网络设备（个人测试时，同样两个终端，还有随机失败问题！）；UDP由于是无连接协议，对打洞有天生优势，几乎所有nat设备都支持。3、关于数据完整性问题，上层的tcp协议会自己处理的。</code></pre><p>代码</p><ol><li>p2p.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//1 服务器启动侦听</span><br>listener, _ := net.ListenUDP(<span class="hljs-string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;Port: <span class="hljs-number">9527</span>&#125;)<br><span class="hljs-keyword">defer</span> listener.Close()<br>fmt.Println(<span class="hljs-string">&quot;begin server at &quot;</span>, listener.LocalAddr().String())<br><br><span class="hljs-comment">//定义切片存储 A和B的地址</span><br>peers := <span class="hljs-built_in">make</span>([]*net.UDPAddr, <span class="hljs-number">2</span>)<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br><br><span class="hljs-comment">//2 从2个UDP消息中分别获取地址A和B</span><br>n, addr, _ := listener.ReadFromUDP(buf)<br>fmt.Printf(<span class="hljs-string">&quot;read from &lt;%s&gt;: %s\n&quot;</span>, addr.String(), buf[:n])<br>peers[<span class="hljs-number">0</span>] = addr<br><br><span class="hljs-comment">//阻塞的  必须等到之后才能进行连接</span><br>n, addr, _ = listener.ReadFromUDP(buf)<br>fmt.Printf(<span class="hljs-string">&quot;read from &lt;%s&gt;: %s\n&quot;</span>, addr.String(), buf[:n])<br>peers[<span class="hljs-number">1</span>] = addr<br><br><span class="hljs-comment">//3 将A和B分别介绍给彼此，如果是多个 p2p 点呢？这里维护一个map 点即可。一对一的映射关系</span><br>listener.WriteToUDP([]<span class="hljs-keyword">byte</span>(peers[<span class="hljs-number">0</span>].String()), peers[<span class="hljs-number">1</span>])<br>listener.WriteToUDP([]<span class="hljs-keyword">byte</span>(peers[<span class="hljs-number">1</span>].String()), peers[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">// 4睡眠10s 确保消息发送完成</span><br>time.Sleep(time.Second * <span class="hljs-number">10</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>p2pclient.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//1 设定参数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &lt; <span class="hljs-number">5</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;./client tag remoteIp remotePort port&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//本地绑定端口</span><br>port, _ := strconv.Atoi(os.Args[<span class="hljs-number">4</span>])<br><span class="hljs-comment">//客户端标志</span><br>tag := os.Args[<span class="hljs-number">1</span>]<br><span class="hljs-comment">//服务器ip</span><br>remoteIP := os.Args[<span class="hljs-number">2</span>]<br>remotePort, _ := strconv.Atoi(os.Args[<span class="hljs-number">3</span>])<br><span class="hljs-comment">//绑定本地端口</span><br>localAddr := net.UDPAddr&#123;Port: port&#125;<br><br><span class="hljs-comment">//2 与服务器建立联系(UDP服务器)</span><br>conn, err := net.DialUDP(<span class="hljs-string">&quot;udp&quot;</span>, &amp;localAddr, &amp;net.UDPAddr&#123;<br>IP:   net.ParseIP(remoteIP),<br>Port: remotePort,<br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(<span class="hljs-string">&quot;Failed to DialUDP&quot;</span>, err)<br><br>&#125;<br><br><span class="hljs-comment">//2.1 自我介绍，表明身份</span><br>conn.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;我是: &quot;</span> + tag))<br><br><span class="hljs-comment">//3 从服务器获取另一个客户端地址</span><br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br>n, _, err := conn.ReadFromUDP(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Panic(<span class="hljs-string">&quot;Failed to readFromUdp&quot;</span>, err)<br>&#125;<br><br>conn.Close()<br><br>toAddr := parseAddr(<span class="hljs-keyword">string</span>(buf[:n]))<br>fmt.Println(<span class="hljs-string">&quot;目标地址: &quot;</span>, toAddr)<br><span class="hljs-comment">// 4 建立P2P连接通信</span><br>p2p(&amp;localAddr, &amp;toAddr)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseAddr</span><span class="hljs-params">(addr <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">net</span>.<span class="hljs-title">UDPAddr</span></span> &#123;<br>t := strings.Split(addr, <span class="hljs-string">&quot;:&quot;</span>)<br><br>port, _ := strconv.Atoi(t[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">return</span> net.UDPAddr&#123;<br>IP:   net.ParseIP(t[<span class="hljs-number">0</span>]),<br>Port: port,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">p2p</span><span class="hljs-params">(srcAddr *net.UDPAddr, dstAddr *net.UDPAddr)</span></span> &#123;<br><span class="hljs-comment">//1 请求与对方建立联系</span><br>conn, _ := net.DialUDP(<span class="hljs-string">&quot;udp&quot;</span>, srcAddr, dstAddr)<br><br><span class="hljs-comment">//2发送打洞消息</span><br>conn.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;打洞消息 \n&quot;</span>))<br><br><span class="hljs-comment">// 3 启动一个goroutine 监控标准输入</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">//接受UDP消息并打印</span><br>n, _, _ := conn.ReadFromUDP(buf)<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;收到消息: %sp2p&quot;</span>, buf[:n])<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-comment">//4 监控输入，发送给对方</span><br>reader := bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;p2p&gt;&quot;</span>)<br>data, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>conn.Write([]<span class="hljs-keyword">byte</span>(data))<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-Go语言实现POW共识算法"><a href="#2-Go语言实现POW共识算法" class="headerlink" title="2 Go语言实现POW共识算法"></a>2 Go语言实现POW共识算法</h2><p>1 定义区块和数据串行化</p><p>定义区块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Block <span class="hljs-keyword">struct</span> &#123;<br>   Timestamp  <span class="hljs-keyword">int64</span> <span class="hljs-comment">//</span><br>   Data  []<span class="hljs-keyword">byte</span><br>   PrevBlockHash  []<span class="hljs-keyword">byte</span><br>   Hash  []<span class="hljs-keyword">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义区块链</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BlockChain <span class="hljs-keyword">struct</span> &#123;<br>   blocks []*Block<br>&#125;<br></code></pre></td></tr></table></figure><p>定义POW: 工作量证明，需要工作难度参与</p><p>需要找到一个随机数nonce,使之和(data,timestamp,prevHash，nonce)等数据的hash结果，满足一定的条件(难度值)</p><p>首先初始化一个值为1 的big.Int.<br>将其左移256-targetBit位。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">target := big.NewInt(<span class="hljs-number">1</span>) <span class="hljs-comment">// New函数返回指针</span><br>fmt.Println(target)<br><span class="hljs-comment">//target为1 向左移动256-24（挖矿难度）</span><br>target.Lsh(target,<span class="hljs-keyword">uint</span>(<span class="hljs-number">256</span><span class="hljs-number">-24</span>))<br>fmt.Println(target)<br><br></code></pre></td></tr></table></figure><p>1：<br>左移1，=2<br>左移2，=4<br>左移10，=1024<br>左移256-24，即为最终难度值.</p><p>当找到的nonce对应的hash小于target(难度)则代表找到了.</p><p>挖矿逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//挖矿逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pow *ProofOfWork)</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">int64</span>, []<span class="hljs-keyword">byte</span>)</span></span> &#123;<br><span class="hljs-keyword">var</span> hashInt big.Int<br><span class="hljs-keyword">var</span> hash [<span class="hljs-number">32</span>]<span class="hljs-keyword">byte</span><br>nonce := <span class="hljs-number">0</span><br><br>fmt.Printf(<span class="hljs-string">&quot;Mining the block containing %s, maxNonce=%d\n&quot;</span>, pow.block.Data, maxNonce)<br><span class="hljs-keyword">for</span> nonce &lt; maxNonce &#123;<br>data := pow.prepareDara(<span class="hljs-keyword">int64</span>(nonce))<br><span class="hljs-comment">//计算hash</span><br>hash = sha256.Sum256(data)<br>fmt.Printf(<span class="hljs-string">&quot;\r%x&quot;</span>, hash)<br>hashInt.SetBytes(hash[:])<br><span class="hljs-comment">// 按字节比较，小于0则代表扎到目标Nonce</span><br><br><span class="hljs-keyword">if</span> hashInt.Cmp(pow.target) == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>nonce++<br>&#125;<br>&#125;<br>fmt.Print(<span class="hljs-string">&quot;\n\n&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">int64</span>(nonce), hash[:]<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共识算法介绍-1-POW</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D-1-POW/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D-1-POW/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>共识算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>共识算法</tag>
      
      <tag>POW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共识算法介绍</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.geeksforgeeks.org/consensus-algorithms-in-blockchain/?ref=lbp">https://www.geeksforgeeks.org/consensus-algorithms-in-blockchain/?ref=lbp</a></p><p>我们知道区块链是一个分布式的去中心化网络，它提供了不可变性、隐私性、安全性和透明性。目前没有中央机构来验证和验证事务，但是区块链中的每个事务都被认为是完全安全的和经过验证的。这是可能的，只是因为存在“共识协议”，它是任何区块链网络的核心部分。</p><p>共识算法是一个过程，通过它，区块链网络的所有对等体对分布式分类帐的当前状态达成一致意见。通过这种方式，共识算法在区块链网络中实现可靠性，并在分布式计算环境中的未知对等体之间建立信任。从本质上说，共识协议确保添加到区块链的每个新块都是区块链中所有节点一致同意的真相的唯一版本。</p><p>区块链共识协议包含了一些具体的目标，如达成协议、合作、合作、每个节点的平等权利，以及每个节点在共识过程中的强制性参与。因此，共识算法的目标是找到一个共同的协议，这是整个网络的胜利。</p><ul><li><p>1 Proof of Work (PoW):<br>该共识算法用于为下一个块生成选择一个矿工。比特币使用这种PoW共识算法。该算法的核心思想是解决一个复杂的数学难题，并轻松给出答案。这个数学难题需要大量的计算能力，因此，尽快解决这个难题的节点可以挖掘下一个块。</p></li><li><p>2 Practical Byzantine Fault Tolerance (PBFT)</p></li><li><p>3 Proof of Stake (PoS):<br>这是PoW最常见的替代方法。以太坊已经从PoW共识转向PoS共识。在这种类型的共识算法中，验证者不是投资昂贵的硬件来解决一个复杂的谜题，而是通过锁定他们的一些硬币作为股权来投资系统中的硬币。在那之后，所有的验证器将开始验证这些块。如果验证者发现了一个他们认为可以添加到链中的区块，他们就会在上面下赌注来验证区块。基于在区块链中添加的实际块，所有的验证者得到与他们的赌注成比例的奖励，他们的股份相应地增加。最后，根据他们在网络中的经济利益，选择一个验证器来生成一个新的区块。因此，PoS通过激励机制鼓励验证者达成协议。</p></li><li><p>4 Proof of Burn (PoB):</p></li><li><p>5 Proof of Capacity:</p></li><li><p>6 Proof of Elapsed Time:</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>共识算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>共识算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具-数据仓库</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/29/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/29/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>数据仓库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-3-开发应用-java</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/24/FISCO-3-%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8-java/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/24/FISCO-3-%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8-java/</url>
    
    <content type="html"><![CDATA[<p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/java_sdk/quick_start.html">https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/java_sdk/quick_start.html</a></p><p><a href="https://gitee.com/niuwenchen/fisco_bcos_project.git">https://gitee.com/niuwenchen/fisco_bcos_project.git</a></p><p><a href="https://gitee.com/FISCO-BCOS/java-sdk-demo.git">https://gitee.com/FISCO-BCOS/java-sdk-demo.git</a></p><h2 id="1-example"><a href="#1-example" class="headerlink" title="1 example"></a>1 example</h2><p>配置文件: config.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[cryptoMaterial]</span><br><br><span class="hljs-attr">certPath</span> = <span class="hljs-string">&quot;conf&quot;</span>                           <span class="hljs-comment"># The certification path</span><br><br><span class="hljs-comment"># The following configurations take the certPath by default if commented</span><br><span class="hljs-comment"># caCert = &quot;conf/ca.crt&quot;                    # CA cert file path</span><br><span class="hljs-comment"># If connect to the GM node, default CA cert path is $&#123;certPath&#125;/gm/gmca.crt</span><br><br><span class="hljs-comment"># sslCert = &quot;conf/sdk.crt&quot;                  # SSL cert file path</span><br><span class="hljs-comment"># If connect to the GM node, the default SDK cert path is $&#123;certPath&#125;/gm/gmsdk.crt</span><br><br><span class="hljs-comment"># sslKey = &quot;conf/sdk.key&quot;                   # SSL key file path</span><br><span class="hljs-comment"># If connect to the GM node, the default SDK privateKey path is $&#123;certPath&#125;/gm/gmsdk.key</span><br><br><span class="hljs-comment"># enSslCert = &quot;conf/gm/gmensdk.crt&quot;         # GM encryption cert file path</span><br><span class="hljs-comment"># default load the GM SSL encryption cert from $&#123;certPath&#125;/gm/gmensdk.crt</span><br><br><span class="hljs-comment"># enSslKey = &quot;conf/gm/gmensdk.key&quot;          # GM ssl cert file path</span><br><span class="hljs-comment"># default load the GM SSL encryption privateKey from $&#123;certPath&#125;/gm/gmensdk.key</span><br><br><span class="hljs-section">[network]</span><br><span class="hljs-attr">peers</span>=[<span class="hljs-string">&quot;172.16.0.89:20200&quot;</span>]   <span class="hljs-comment"># The peer list to connect</span><br><br><span class="hljs-comment"># Configure a private topic as a topic message sender.</span><br><span class="hljs-comment"># [[amop]]</span><br><span class="hljs-comment"># topicName = &quot;PrivateTopic1&quot;</span><br><span class="hljs-comment"># publicKeys = [ &quot;conf/amop/consumer_public_key_1.pem&quot; ]    # Public keys of the nodes that you want to send AMOP message of this topic to.</span><br><br><span class="hljs-comment"># Configure a private topic as a topic subscriber.</span><br><span class="hljs-comment"># [[amop]]</span><br><span class="hljs-comment"># topicName = &quot;PrivateTopic2&quot;</span><br><span class="hljs-comment"># privateKey = &quot;conf/amop/consumer_private_key.p12&quot;         # Your private key that used to subscriber verification.</span><br><span class="hljs-comment"># password = &quot;123456&quot;</span><br><br><span class="hljs-section">[account]</span><br><span class="hljs-attr">keyStoreDir</span> = <span class="hljs-string">&quot;account&quot;</span>         <span class="hljs-comment"># The directory to load/store the account file, default is &quot;account&quot;</span><br><span class="hljs-comment"># accountFilePath = &quot;&quot;          # The account file path (default load from the path specified by the keyStoreDir)</span><br><span class="hljs-attr">accountFileFormat</span> = <span class="hljs-string">&quot;pem&quot;</span>       <span class="hljs-comment"># The storage format of account file (Default is &quot;pem&quot;, &quot;p12&quot; as an option)</span><br><br><span class="hljs-comment"># accountAddress = &quot;&quot;           # The transactions sending account address</span><br><span class="hljs-comment"># Default is a randomly generated account</span><br><span class="hljs-comment"># The randomly generated account is stored in the path specified by the keyStoreDir</span><br><br><span class="hljs-comment"># password = &quot;&quot;                 # The password used to load the account file</span><br><br><span class="hljs-section">[threadPool]</span><br><span class="hljs-comment"># channelProcessorThreadSize = &quot;16&quot;         # The size of the thread pool to process channel callback</span><br><span class="hljs-comment"># Default is the number of cpu cores</span><br><br><span class="hljs-comment"># receiptProcessorThreadSize = &quot;16&quot;         # The size of the thread pool to process transaction receipt notification</span><br><span class="hljs-comment"># Default is the number of cpu cores</span><br><br><span class="hljs-attr">maxBlockingQueueSize</span> = <span class="hljs-string">&quot;102400&quot;</span>             <span class="hljs-comment"># The max blocking queue size of the thread pool</span><br><br></code></pre></td></tr></table></figure><p>加密材料: resources/conf/xxx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco;<br><br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.protocol.response.BlockNumber;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.ConfigOption;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.TransactionReceipt;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.exception.ContractException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosSDKTest</span> </span>&#123;<br>    <span class="hljs-comment">//获取配置文件路径</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> String configPath = BcosSDKTest.class.getClassLoader().getResource(<span class="hljs-string">&quot;config.toml&quot;</span>).getPath();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ContractException </span>&#123;<br>        System.out.println(configPath);<br><br>        String path=<span class="hljs-string">&quot;E:\\project\\fisco_project\\fisco_bcos_project\\2-sdk\\fisco-bcos-sdk\\src\\main\\resources&quot;</span><br>                + <span class="hljs-string">&quot;\\config.toml&quot;</span>;<br><br>        BcosSDK sdk = BcosSDK.build(path);<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">//获取群组1的块高</span><br>        BlockNumber blockNumber = client.getBlockNumber();<br>        System.out.println(blockNumber);<br><br>        <span class="hljs-comment">//向群组1部署HelloWorld合约</span><br>        CryptoKeyPair cryptoKeyPair =  client.getCryptoSuite().getCryptoKeyPair();<br>        HelloJack helloJack = HelloJack.deploy(client,cryptoKeyPair);<br><br>        String getValue = helloJack.get();<br><br>        System.out.println(getValue);<br>        TransactionReceipt receipt = helloJack.set(<span class="hljs-string">&quot;Hello, fisco&quot;</span>);<br><br>        String getValue1 = helloJack.get();<br><br>        System.out.println(getValue1);<br><br>    &#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="2-AMOP功能"><a href="#2-AMOP功能" class="headerlink" title="2 AMOP功能"></a>2 AMOP功能</h2><p>Java SDK支持链上信使协议AMOP(Advanced Messages Onchain Protocol),用户可以通过AMOP协议与其他机构互传信息。</p><h3 id="2-1-配置方法"><a href="#2-1-配置方法" class="headerlink" title="2.1 配置方法"></a>2.1 配置方法</h3><p>AMOP有两种话题模式: 普通话题和私有话题。任何一个订阅了某普通话题的订阅者都能收到该话题相关的推送消息。但是在某些情况下，发送者只希望特定的接收者能接收到消息，不希望无关的接收者能任意的监听此话题，就需要使用私有话题了。</p><p>AMOP私有话题的特殊之处在于，SDK之间需要身份验证，认证通过的订阅者才可以接收到该话题的信息。 </p><pre><code>身份验证的原理，首先由发送方生成一个随机数，订阅方用私钥对随机数签名，发送方用配置的公钥验证这个签名来确定对方是否是自己指定的订阅方。 因此，一个成功的私钥话题通道的建立需要(1) 消息发送者需要设置指定的订阅者的公钥(2) 订阅方也需要设置能证明自己身份的私钥</code></pre><p>当用户需要订阅私有话题，或者作为消息发布者配置一个私有话题时，可以用配置文件进行配置。 但AMOP的配置不是必须项，私有话题的订阅和设置，还可以通过调用AMOP的接口实现。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"># AMOP configuration<br># You can use following two methods <span class="hljs-keyword">to</span> configure <span class="hljs-keyword">as</span> a <span class="hljs-keyword">private</span> topic message sender <span class="hljs-built_in">or</span> subscriber.<br># Usually, the <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> <span class="hljs-built_in">is</span> generated <span class="hljs-keyword">by</span> subscriber.<br># Message sender receive <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">from</span> topic subscriber <span class="hljs-keyword">then</span> make configuration.<br># But, please <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> config <span class="hljs-keyword">as</span> both the message sender <span class="hljs-built_in">and</span> the subscriber <span class="hljs-keyword">of</span> one <span class="hljs-keyword">private</span> topic, <span class="hljs-built_in">or</span> you may send the message <span class="hljs-keyword">to</span> yourself.<br><br># Configure a <span class="hljs-keyword">private</span> topic <span class="hljs-keyword">as</span> a topic message sender.<br># [[amop]]<br># topicName = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br># publicKeys = [ <span class="hljs-string">&quot;conf/amop/consumer_public_key_1.pem&quot;</span> ]    # <span class="hljs-keyword">Public</span> keys <span class="hljs-keyword">of</span> the nodes that you want <span class="hljs-keyword">to</span> send AMOP message <span class="hljs-keyword">of</span> this topic <span class="hljs-keyword">to</span>.<br><br># Configure a <span class="hljs-keyword">private</span> topic <span class="hljs-keyword">as</span> a topic subscriber.<br># [[amop]]<br># topicName = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br># privateKey = <span class="hljs-string">&quot;conf/amop/consumer_private_key.p12&quot;</span>         # Your <span class="hljs-keyword">private</span> <span class="hljs-keyword">key</span> that used <span class="hljs-keyword">to</span> subscriber verification.<br># password = <span class="hljs-string">&quot;123456&quot;</span><br><br></code></pre></td></tr></table></figure><p>配置详解:</p><ol><li>配置一个私有话题(作为消息发布者)</li></ol><ul><li>需要在配置文件中新建一个[[amop]]节点</li><li>配置话题 topicName=”xxxx”</li><li>消息订阅方的公钥列表 publicKeys=[“conf/amop/consumer_public_key_1.pem”]，即指定的接收对象的公钥，这个公钥必须与某个订阅方的私钥匹配</li></ul><ol start="2"><li>订阅一个私有话题(作为订阅者)</li></ol><ul><li>amop</li><li>topicName=”xxx”</li><li>证明订阅方身份的私钥</li><li>密码<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[[amop]]</span><br><span class="hljs-attr">topicName</span> = <span class="hljs-string">&quot;PrivateTopic&quot;</span><br><span class="hljs-attr">privateKey</span> = <span class="hljs-string">&quot;conf/amop/consumer_private_key.p12&quot;</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-接口说明"><a href="#2-2-接口说明" class="headerlink" title="2.2 接口说明"></a>2.2 接口说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2014-2020  [fisco-dev]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment"> * in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment"> * is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment"> * or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment"> * the License.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.amop;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.topic.TopicManager;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.channel.Channel;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.ConfigOption;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keystore.KeyTool;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AMOP module interface.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Maggie</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Amop</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a Amop object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel the channel to send/receive message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config the config object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Amop instance</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Amop <span class="hljs-title">build</span><span class="hljs-params">(Channel channel, ConfigOption config)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AmopImp(channel, config);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Subscribe a normal topic.</span><br><span class="hljs-comment">     * 订阅一个普通话题</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback callback is called when receive a msg relate to this topic</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribeTopic</span><span class="hljs-params">(String topicName, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Subscribe a private topic which need verify.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKeyTool the private key you used to prove your identity.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback callback is called when receive a msg relate to this topic</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribePrivateTopics</span><span class="hljs-params">(String topicName, KeyTool privateKeyTool, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subscribePrivateTopics</span><span class="hljs-params">(String topicName, String hexPrivateKey, AmopCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Config a topic which is need verification, after that user can send message to verified</span><br><span class="hljs-comment">     * subscriber.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKeyTools the public keys of the target organizations that you want to</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">publishPrivateTopic</span><span class="hljs-params">(String topicName, List&lt;KeyTool&gt; publicKeyTools)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">publishPrivateTopicWithHexPublicKeyList</span><span class="hljs-params">(String topicName, List&lt;String&gt; publicKeyList)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Unsubscribe a topic.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topicName the topic name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unsubscribeTopic</span><span class="hljs-params">(String topicName)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Send amop msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content the sent message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callback the callback that will be called when receive the AMOP response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendAmopMsg</span><span class="hljs-params">(AmopMsgOut content, AmopResponseCallback callback)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Send amop msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content the broadcasted AMOP message</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">broadcastAmopMsg</span><span class="hljs-params">(AmopMsgOut content)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get all subscribe topics.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> topic name list</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Set&lt;String&gt; <span class="hljs-title">getSubTopics</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * set amop default callback</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cb the amop callback</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCallback</span><span class="hljs-params">(AmopCallback cb)</span></span>;<br><br>    <span class="hljs-comment">/** Start. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/** Stop. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * generate message sequence string</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Sequence string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">newSeq</span><span class="hljs-params">()</span> </span>&#123;<br>        String seq = UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> seq;<br>    &#125;<br><br>    <span class="hljs-function">TopicManager <span class="hljs-title">getTopicManager</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendSubscribe</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-demo"><a href="#2-3-demo" class="headerlink" title="2.3 demo"></a>2.3 demo</h3><p>广播 发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.amop.tool;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.Amop;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.AmopMsgOut;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.topic.TopicType;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.protocol.response.Peers;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmopPublisher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> parameterNum = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String publisherFile =<br>            AmopPublisher.class<br>                    .getClassLoader()<br>                    .getResource(<span class="hljs-string">&quot;amop/config-publisher-for-test.toml&quot;</span>)<br>                    .getPath();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args topicName, isBroadcast, Content(Content you want to send out), Count(how many msg</span><br><span class="hljs-comment">     *     you want to send out)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception AMOP publish exceptioned</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (args.length &lt; parameterNum) &#123;<br>            System.out.println(<span class="hljs-string">&quot;param: target topic total number of request&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String topicName = args[<span class="hljs-number">0</span>];<br>        Boolean isBroadcast = Boolean.valueOf(args[<span class="hljs-number">1</span>]);<br>        String content = args[<span class="hljs-number">2</span>];<br>        Integer count = Integer.parseInt(args[<span class="hljs-number">3</span>]);<br>        BcosSDK sdk = BcosSDK.build(publisherFile);<br>        Amop amop = sdk.getAmop();<br><br>        System.out.println(<span class="hljs-string">&quot;3s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;2s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;1s ...&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-keyword">if</span> (!subscribed(sdk, topicName)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;No subscriber, exist.&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;start test&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===================================================================&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Integer i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            AmopMsgOut out = <span class="hljs-keyword">new</span> AmopMsgOut();<br>            out.setType(TopicType.NORMAL_TOPIC);<br>            out.setContent(content.getBytes());<br>            out.setTimeout(<span class="hljs-number">6000</span>);<br>            out.setTopic(topicName);<br>            DemoAmopResponseCallback cb = <span class="hljs-keyword">new</span> DemoAmopResponseCallback();<br>            DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-keyword">if</span> (isBroadcast) &#123;<br>                amop.broadcastAmopMsg(out);<br>                System.out.println(<br>                        <span class="hljs-string">&quot;Step 1: Send out msg by broadcast,  time: &quot;</span><br>                                + df.format(LocalDateTime.now())<br>                                + <span class="hljs-string">&quot; topic:&quot;</span><br>                                + out.getTopic()<br>                                + <span class="hljs-string">&quot; content:&quot;</span><br>                                + <span class="hljs-keyword">new</span> String(out.getContent()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                amop.sendAmopMsg(out, cb);<br>                System.out.println(<br>                        <span class="hljs-string">&quot;Step 1: Send out msg,  time: &quot;</span><br>                                + df.format(LocalDateTime.now())<br>                                + <span class="hljs-string">&quot; topic:&quot;</span><br>                                + out.getTopic()<br>                                + <span class="hljs-string">&quot; content:&quot;</span><br>                                + <span class="hljs-keyword">new</span> String(out.getContent()));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">subscribed</span><span class="hljs-params">(BcosSDK sdk, String topicName)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br>        Boolean hasSubscriber = <span class="hljs-keyword">false</span>;<br>        Peers peers = client.getPeers();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (Peers.PeerInfo info : peers.getPeers()) &#123;<br>                <span class="hljs-keyword">for</span> (String tp : info.getTopic()) &#123;<br>                    <span class="hljs-keyword">if</span> (tp.equals(topicName)) &#123;<br>                        hasSubscriber = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-keyword">return</span> hasSubscriber;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!hasSubscriber) &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接收者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.amop.tool;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.Amop;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.amop.AmopCallback;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmopSubscriber</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        URL configUrl =<br>                AmopSubscriber.class<br>                        .getClassLoader()<br>                        .getResource(<span class="hljs-string">&quot;amop/config-subscriber-for-test.toml&quot;</span>);<br>        <span class="hljs-keyword">if</span> (args.length &lt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Param: topic&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String topic = args[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// Construct a BcosSDK instance</span><br>        BcosSDK sdk = BcosSDK.build(configUrl.getPath());<br><br>        <span class="hljs-comment">// Get the amop module instance</span><br>        Amop amop = sdk.getAmop();<br><br>        <span class="hljs-comment">// Set callback</span><br>        AmopCallback cb = <span class="hljs-keyword">new</span> DemoAmopCallback();<br>        <span class="hljs-comment">// Set a default callback</span><br>        amop.setCallback(cb);<br>        <span class="hljs-comment">// Subscriber a normal topic</span><br>        amop.subscribeTopic(topic, cb);<br>        System.out.println(<span class="hljs-string">&quot;Start test&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>还可以发送文件，具体看:  <a href="https://github.com/FISCO-BCOS/java-sdk-demo.git">https://github.com/FISCO-BCOS/java-sdk-demo.git</a></p><h2 id="3-合约事件推送"><a href="#3-合约事件推送" class="headerlink" title="3 合约事件推送"></a>3 合约事件推送</h2><p>合约事件推送功能提供了合约事件的异步推送机制，客户端向节点发送注册请求，在请求中携带客户端关注的合约事件的参数，节点根据请求参数对区块范围内的Event Log进行过滤，将结果分次推送给客户端。</p><h3 id="3-1-交互协议"><a href="#3-1-交互协议" class="headerlink" title="3.1 交互协议"></a>3.1 交互协议</h3><p>客户端与节点的交互基于Channel协议。 交互分为三个阶段： 注册请求，节点回复，Event Log数据推送</p><p><strong>注册请求</strong><br>客户端向节点发送事件推送的注册请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// request sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;fromBlock&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>  <span class="hljs-attr">&quot;toBlock&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<br>  <span class="hljs-attr">&quot;addresses&quot;</span>: [<br>    <span class="hljs-string">&quot;0xca5ed56862869c25da0bdf186e634aac6c6361ee&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;topics&quot;</span>: [<br>    <span class="hljs-string">&quot;0x91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;groupID&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filerID：字符串类型，每次请求唯一，标记一次注册任务</li><li>groupID：字符串类型，群组ID</li><li>fromBlock：整形字符串，初始区块。“latest” 当前块高</li><li>toBlock：整形字符串，最终区块。“latest” 处理至当前块高时，继续等待新区块</li><li>addresses：字符串或者字符串数组：字符串表示单个合约地址，数组为多个合约地址，数组可以为空</li><li>topics：字符串类型或者数组类型：字符串表示单个topic，数组为多个topic，数组可以为空</li></ul><p><strong>节点回复</strong><br>节点接受客户端注册请求时，会对请求参数进行校验，将是否成功接受该注册请求结果回复给客户端。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// response sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filterID：字符串类型，每次请求唯一，标记一次注册任务</li><li>result：整形，返回结果。0成功，其余为失败状态码</li></ul><p><strong>Event Log数据推送</strong><br>节点验证客户端注册请求成功之后，根据客户端请求参数条件，向客户端推送Event Log数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// event log push sample:</span><br>&#123;<br>  <span class="hljs-attr">&quot;filterID&quot;</span>: <span class="hljs-string">&quot;bb31e4ec086c48e18f21cb994e2e5967&quot;</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;logs&quot;</span>: [<br>    <br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filterID：字符串类型，每次请求唯一，标记一次注册任务</li><li>result：整形 0：Event Log数据推送 1：推送完成。客户端一次注册请求对应节点的数据推送会有多次（请求区块范围比较大或者等待新的区块），result字段为1时说明节点推送已经结束</li><li>logs：Log对象数组，result为0时有效</li></ul><h3 id="3-2-JavaSDK"><a href="#3-2-JavaSDK" class="headerlink" title="3.2 JavaSDK"></a>3.2 JavaSDK</h3><p>Java SDK中org.fisco.bcos.sdk.eventsub类提供合约事件的注册接口，用户可以调用subscribeEvent向节点发送注册请求，并设置回调函数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">subscribeEvent</span><span class="hljs-params">(EventLogParams params, EventCallback callback)</span></span>;<br></code></pre></td></tr></table></figure><p>事件回调请求注册的参数：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventLogParams</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> fromBlock;   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> toBlock;<br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-keyword">String</span>&gt; addresses;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; topics;<br>&#125;<br></code></pre></td></tr></table></figure><p>callback回调对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EventCallback</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status, List&lt;EventLog&gt; logs)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>status 回调返回状态：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">0</span>       : 正常推送，此时<span class="hljs-type">logs</span>为节点推送的事件日志<br><span class="hljs-number">1</span>       : 推送完成，执行区间的区块都已经处理<br>-<span class="hljs-number">41000</span>  : 参数无效，客户端验证参数错误返回<br>-<span class="hljs-number">41001</span>  : 参数错误，节点验证参数错误返回<br>-<span class="hljs-number">41002</span>  : 群组不存在<br>-<span class="hljs-number">41003</span>  : 请求错误的区块区间<br>-<span class="hljs-number">41004</span>  : 节点推送数据格式错误<br>-<span class="hljs-number">41005</span>  : 请求发送超时<br>-<span class="hljs-number">41006</span>  : 客户端无订阅权限<br>-<span class="hljs-number">41007</span>  : 事件尚未注册，取消订阅失败<br><span class="hljs-number">42000</span>   : 其他错误 <br><br></code></pre></td></tr></table></figure><p>logs表示回调的Event Log对象列表，status为0有效。默认值null，可以在子类中通过org.fisco.bcos.sdk.abi.ABICodec解析以下EventLog对象的data字段。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// EventLog 对象</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventLog</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> logIndex;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> transactionIndex;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> transactionHash;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> blockHash;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> blockNumber;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> address;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> data;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> type;<br>   <span class="hljs-keyword">private</span> List&lt;<span class="hljs-keyword">String</span>&gt; topics;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>实现回调对象</strong><br>Java SDK对回调类EventCallback无默认实现，用户可以通过继承EventCallback类，重写onReceiveLog接口，实现自己的回调逻辑处理。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">SubscribeCallback</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">EventCallback</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> onReceiveLog(<span class="hljs-built_in">int</span> status, List&lt;EventLog&gt; logs) &#123;<br>        <span class="hljs-comment">// ADD CODE</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>topic工具</strong></p><p>org.fisco.bcos.sdk.abi.TopicTools提供将各种类型参数转换为对应topic的工具，用户设置EventLogParams的topics参数可以使用。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs processing">class TopicTools &#123;<br>    <span class="hljs-comment">// int1/uint1~uint1/uint256 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> integerToTopic(BigInteger i)<br>    <span class="hljs-comment">// bool</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> boolToTopic(<span class="hljs-built_in">boolean</span> b)<br>    <span class="hljs-comment">// address</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> addressToTopic(<span class="hljs-keyword">String</span> s)<br>    <span class="hljs-comment">// string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> stringToTopic(<span class="hljs-keyword">String</span> s)<br>    <span class="hljs-comment">// bytes</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> bytesToTopic(<span class="hljs-built_in">byte</span>[] b)<br>    <span class="hljs-comment">// byte1~byte32</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> byteNToTopic(<span class="hljs-built_in">byte</span>[] b)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-实例"><a href="#3-3-实例" class="headerlink" title="3.3 实例"></a>3.3 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.fisco.bcos.sdk.demo.event;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.BcosSDK;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventCallback;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventLogParams;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.eventsub.EventSubscribe;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.ConstantConfig;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.EventLog;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Listen</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(Listen.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allEventLog</span><span class="hljs-params">()</span> </span>&#123;<br>        String configFileName = ConstantConfig.CONFIG_FILE_NAME;<br>        URL configUrl = Listen.class.getClassLoader().getResource(configFileName);<br>        <span class="hljs-keyword">if</span> (configUrl == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The configFile &quot;</span> + configFileName + <span class="hljs-string">&quot; doesn&#x27;t exist!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String configFile = configUrl.getPath();<br>        BcosSDK sdk = BcosSDK.build(configFile);<br>        Client client = sdk.getClient(Integer.valueOf(<span class="hljs-number">1</span>));<br>        EventSubscribe eventSubscribe = sdk.getEventSubscribe(client.getGroupId());<br>        eventSubscribe.start();<br><br>        EventLogParams eventLogParams = <span class="hljs-keyword">new</span> EventLogParams();<br>        eventLogParams.setFromBlock(<span class="hljs-string">&quot;latest&quot;</span>);<br>        eventLogParams.setToBlock(<span class="hljs-string">&quot;latest&quot;</span>);<br>        eventLogParams.setAddresses(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        eventLogParams.setTopics(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubscribeCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EventCallback</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>, <span class="hljs-keyword">true</span>);<br><br>            SubscribeCallback() &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    logger.error(<span class="hljs-string">&quot;error :&quot;</span>, e);<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status, List&lt;EventLog&gt; logs)</span> </span>&#123;<br>                String str = <span class="hljs-string">&quot;status in onReceiveLog : &quot;</span> + status;<br>                logger.debug(str);<br>                semaphore.release();<br>                <span class="hljs-keyword">if</span> (logs != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (EventLog log : logs) &#123;<br>                        logger.debug(<br>                                <span class="hljs-string">&quot; blockNumber:&quot;</span><br>                                        + log.getBlockNumber()<br>                                        + <span class="hljs-string">&quot;,txIndex:&quot;</span><br>                                        + log.getTransactionIndex()<br>                                        + <span class="hljs-string">&quot; data:&quot;</span><br>                                        + log.getData());<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        SubscribeCallback subscribeEventCallback = <span class="hljs-keyword">new</span> SubscribeCallback();<br>        String registerId = eventSubscribe.subscribeEvent(eventLogParams, subscribeEventCallback);<br>        System.out.print(<span class="hljs-string">&quot;subscribe event, registerId is &quot;</span> + registerId);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        allEventLog();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是实测有点问题</p><h2 id="4-账户管理"><a href="#4-账户管理" class="headerlink" title="4 账户管理"></a>4 账户管理</h2><p>Java SDK提供账户管理接口，支持以下功能：</p><ul><li>账户加载: 从指定路径加载账户，同时支持pem和p12格式的账户文件加载，也支持加载十六进制的私钥字符串</li><li>账户生成: 随机生成账户公私钥对</li><li>账户保存: 保存账户信息</li><li>提供加载p12和pem文件解析的接口</li></ul><h3 id="4-1-账户加载"><a href="#4-1-账户加载" class="headerlink" title="4.1 账户加载"></a>4.1 账户加载</h3><p>Java SDK的org.fisco.bcos.sdk.crypto.CryptoSuite提供账户加载功能，默认从配置文件的[account]配置项加载交易发送账户，具体请参考这里.</p><p><strong>从十六进制私钥字符串加载账户</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco.account;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.CryptoSuite;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.keypair.ECDSAKeyPair;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountExample</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建cryptoSuite,通过cryptoSuite加载私钥字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cryptoType 用于需要指定加载的私钥类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hexPrivateKey 十六进制的私钥字符串,但是这里的十六进制私钥字符串怎么获取？？？</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadAccountFromHexPrivateKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cryptoType, String hexPrivateKey)</span></span>&#123;<br>        <span class="hljs-comment">// 根据cryotoType创建cryptoSuite，cryotoType目前支持</span><br>        <span class="hljs-comment">//1. CryptoType.ECDSA_TYPE: 用于创建非国密类型的CryptoSuite</span><br>        <span class="hljs-comment">//2. CryptoType.SM_TYPE:    用于创建国密类型的CryptoSuite</span><br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(cryptoType);<br>        <span class="hljs-keyword">return</span> cryptoSuite.getKeyPairFactory().createKeyPair(hexPrivateKey);<br>    &#125;<br><br>    <span class="hljs-comment">/* 示例二：直接加载非国密私钥 ****/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadECDSAAccountFromHexPrivateKey</span><span class="hljs-params">(BigInteger privateKey)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 创建国密类型的KeyFactory</span><br>        ECDSAKeyPair keyFacotry = <span class="hljs-keyword">new</span> ECDSAKeyPair();<br>        <span class="hljs-comment">// 从十六进制字符串加载hexPrivateKey</span><br>        <span class="hljs-keyword">return</span> keyFacotry.createKeyPair(privateKey);<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoKeyPair cryptoKeyPair = loadAccountFromHexPrivateKey(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;e94b6355d3c4a000000000000000000000000000000000000000000000000000&quot;</span>);<br>        System.out.println(cryptoKeyPair.getAddress());<br>        System.out.println(cryptoKeyPair.getAddress(<span class="hljs-string">&quot;04ac80e2d354de2634de7adbf89a5dfeb20eae0c31aa4f0db65aa43700be830048baddc08e336a33e121ae88633c084a5de821a11e1f6296a7ec8e6198fc6df740&quot;</span>));<br><br><br><span class="hljs-comment">//        CryptoKeyPair cp = loadECDSAAccountFromHexPrivateKey();</span><br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>现在的问题是不知道十六进制的私钥字符串。</p><p><img src="%E8%B4%A6%E6%88%B7.png" alt="account"><br>变形的过程，用公钥获取地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CryptoKeyPair <span class="hljs-title">loadAccountFromHexPrivateKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cryptoType)</span></span>&#123;<br>        <span class="hljs-comment">// 根据cryotoType创建cryptoSuite，cryotoType目前支持</span><br>        <span class="hljs-comment">//1. CryptoType.ECDSA_TYPE: 用于创建非国密类型的CryptoSuite</span><br>        <span class="hljs-comment">//2. CryptoType.SM_TYPE:    用于创建国密类型的CryptoSuite</span><br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(cryptoType);<br>        <span class="hljs-keyword">return</span> cryptoSuite.getKeyPairFactory().generateKeyPair();<br>    &#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoKeyPair cryptoKeyPair = loadAccountFromHexPrivateKey(<span class="hljs-number">0</span>);<br>        System.out.println(cryptoKeyPair.getAddress(<span class="hljs-string">&quot;04ac80e2d354de2634de7adbf89a5dfeb20eae0c31aa4f0db65aa43700be830048baddc08e336a33e121ae88633c084a5de821a11e1f6296a7ec8e6198fc6df740&quot;</span>));<br>    &#125;<br><br>&gt;&gt;&gt;&gt;&gt;&gt;输出<br><span class="hljs-number">0xf9c75f92388cf87a65281155a0afe913b09ca2f6</span><br><br></code></pre></td></tr></table></figure><p>可以直接从公钥获取地址。</p><p>通过loadAccount的方式加载外部账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">client.getCryptoSuite().loadAccount(<span class="hljs-string">&quot;pem&quot;</span>,systemConfig.getAccountPath(),<span class="hljs-keyword">null</span>);<br><br></code></pre></td></tr></table></figure><h2 id="5-密码学模块"><a href="#5-密码学模块" class="headerlink" title="5 密码学模块"></a>5 密码学模块</h2><p>Java SDK提供了可访问所有密码学相关接口的CryptoSuite，CryptoSuite会根据传入的cryptoType(目前支持CryptoType.ECDSA_TYPE和CryptoType.SM_TYPE，前者用在非国密链中，后者用于国密链中)初始化密码学相关的套件。</p><p>Java SDK目前支持以下功能:</p><ul><li>计算哈希: 支持sm3和keccak256两种哈希算法，一般国密采用前者，非国密采用后者；</li><li>签名/验签 : 支持sm2和secp256k1两种签名和验签方法，一半国密采用前者，非国密采用后者。</li></ul><p>hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fisco.crypto;<br><br><span class="hljs-keyword">import</span> org.bouncycastle.jcajce.provider.digest.SHA256;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.CryptoSuite;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.crypto.hash.Keccak256;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.model.CryptoType;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CryptoExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br><br>        System.out.println(cryptoSuite.hash(<span class="hljs-string">&quot;JackNiu&quot;</span>));<br>        System.out.println(calculateHashWithkeccak256(<span class="hljs-string">&quot;JackNiu&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-comment">/// 调用keccak256哈希算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">calculateHashWithkeccak256</span><span class="hljs-params">(String data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 创建keccak256对应的对象</span><br>        Keccak256 hasher = <span class="hljs-keyword">new</span> Keccak256();<br><span class="hljs-comment">//        SHA256 hasher = new SHA256();</span><br>        <span class="hljs-comment">// 返回十六进制哈希字符串</span><br>        <span class="hljs-keyword">return</span> hasher.hash(data);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用CryptoSuite调用签名/验证签名接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// 生成secp256k1签名</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ECDSASignatureResult  <span class="hljs-title">generateSigantureWithSecp256k1</span><span class="hljs-params">(String data)</span></span><br><span class="hljs-function">   </span>&#123;<br>       CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br>       <span class="hljs-comment">// 生成CryptoKeyPair</span><br>       CryptoKeyPair cryptoKeyPair = cryptoSuite.createKeyPair();<br>       <span class="hljs-comment">// 计算传入数据的哈希(keccak256哈希算法)</span><br>       String hashData = cryptoSuite.hash(data);<br>       <span class="hljs-comment">// 生成签名</span><br>       <span class="hljs-keyword">return</span> (ECDSASignatureResult)(cryptoSuite.sign(hashData, cryptoKeyPair));<br>   &#125;<br><br><br><br>   <span class="hljs-comment">/// 验证签名</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifySignature</span><span class="hljs-params">(SignatureResult signatureResult, CryptoKeyPair keyPair, String data)</span></span><br><span class="hljs-function">   </span>&#123;<br>       CryptoSuite cryptoSuite = <span class="hljs-keyword">new</span> CryptoSuite(CryptoType.ECDSA_TYPE);<br>       <span class="hljs-comment">// 计算data的哈希(keccak256k1哈希算法)</span><br>       String hashData = cryptoSuite.hash(data);<br>       <span class="hljs-comment">// 验证签名</span><br>       <span class="hljs-keyword">return</span> cryptoSuite.verify(keyPair.getHexPublicKey(), hashData, signatureResult.convertToString());<br>   &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 开发应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>sdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具-区块链应用开发组件</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-脚手架开发应用"><a href="#1-脚手架开发应用" class="headerlink" title="1 脚手架开发应用"></a>1 脚手架开发应用</h2><h3 id="1-1-下载脚手架"><a href="#1-1-下载脚手架" class="headerlink" title="1.1 下载脚手架"></a>1.1 下载脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://github.com/WeBankBlockchain/SmartDev-Scaffold/releases/download/V1.0.1/SmartDev-Scaffold-V1_0_1.zip<br><br>unzip SmartDev-Scaffold*.zip<br><br><span class="hljs-built_in">cd</span> SmartDev-Scaffold/tools<br><br><span class="hljs-comment"># tools目录包含了执行环境</span><br>├── tools<br>│   ├── contracts<br>│   ├──|── HelloWorld.sol<br>│   ├── config.ini<br>│   ├── run.sh<br>│   ├── run.bat<br><br><br></code></pre></td></tr></table></figure><p>contracts目录用于存放solidity合约文件，脚手架后续会读取该目录下的合约以生成对应的业务工程。请删除该目录下的默认合约，并将自己的业务合约拷贝到该目录下。<br>config.ini是启动相关配置。<br>run.sh和run.bat分别是unix和windows下的启动脚本。</p><h3 id="1-2-配置脚手架"><a href="#1-2-配置脚手架" class="headerlink" title="1.2 配置脚手架"></a>1.2 配置脚手架</h3><p>合约配置： 在contracts目录下删除默认合约，拷贝自己的合约</p><p>生成配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[general]<br>artifact=fiscodemo<br>group=com.jackniu<br>selector=<br><span class="hljs-comment"># 0.4.25.1 0.5.2.0 0.6.10.0</span><br>compiler=0.4.25.1<br><span class="hljs-built_in">type</span>=gradle<br>gradleVersion=6.3<br><br><br></code></pre></td></tr></table></figure><h3 id="1-3-运行脚手架"><a href="#1-3-运行脚手架" class="headerlink" title="1.3 运行脚手架"></a>1.3 运行脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>bash run.sh<br><br><span class="hljs-comment"># 运行完成后,生成工作目录</span><br>├─contracts<br>├─run.sh<br>├─run.bat<br>└─demo<br></code></pre></td></tr></table></figure><p>脚手架目录</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<br>├── build.gradle<br>├── gradle<br>│   └── <span class="hljs-keyword">wrapper</span><br>│       ├── gradle-<span class="hljs-keyword">wrapper</span>.jar<br>│       └── gradle-<span class="hljs-keyword">wrapper</span>.properties<br>├── settings.gradle<br>└── src<br>    ├── main<br>    │   ├── contracts<br>    │   │   └── HelloWorld.sol<br>    │   ├── java<br>    │   │   └── org<br>    │   │       └── example<br>    │   │           └── demo<br>    │   │               ├── Application.java<br>    │   │               ├── config<br>    │   │               │   ├── BcosConfig.java<br>    │   │               │   ├── ContractConfig.java<br>    │   │               │   ├── SdkBeanConfig.java<br>    │   │               │   └── SystemConfig.java<br>    │   │               ├── constants<br>    │   │               │   ├── ContractConstants.java<br>    │   │               ├── model<br>    │   │               │   ├── CommonResponse.java<br>    │   │               │   └── bo<br>    │   │               │       └── HelloWorldSetInputBO.java<br>    │   │               ├── service<br>    │   │               │   └── HelloWorldService.java<br>    │   └── resources<br>    │       ├── abi<br>    │       │   └── HelloWorld.abi<br>    │       ├── application.properties<br>    │       ├── bin<br>    │       │   ├── ecc<br>    │       │   │   └── HelloWorld.bin<br>    │       │   └── sm<br>    │       │       └── HelloWorld.bin<br>    │       └── conf<br>    └── test<br>        └── java<br>            ├── org<br>            │   └── example<br>            │       └── demo<br>            │           └── Demos.java<br>            └── org.example.demo<br><br><br></code></pre></td></tr></table></figure><p>其中:</p><ul><li>config目录包含Bean配置类</li><li>service目录中包含了智能合约访问的Service类，一个类对应一个合约。</li><li>bo目录包含了合约函数输入参数的封装POJO类。</li><li>src/main/resource/conf目录用于存放证书信息</li><li>Demos.java包含了私钥生成、部署合约等示例代码</li></ul><h2 id="2-DAPP开发"><a href="#2-DAPP开发" class="headerlink" title="2 DAPP开发"></a>2 DAPP开发</h2><h3 id="2-1-在FISCO-BCOS联盟链上部署合约"><a href="#2-1-在FISCO-BCOS联盟链上部署合约" class="headerlink" title="2.1 在FISCO BCOS联盟链上部署合约"></a>2.1 在FISCO BCOS联盟链上部署合约</h3><p>可以使用控制台部署HelloWorld</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif">[group:1]&gt; deploy HelloWorld<br><span class="hljs-attribute">transaction hash</span>: 0xaf10275220a45ec5f913876d4b8f69c313907b2b3aa8100642b68fe83c045129<br><span class="hljs-attribute">contract address</span>: 0xe6a6140ae78fd31056acdee9fb0472be3213c5ef<br><span class="hljs-attribute">currentAccount</span>: 0xe45059851df184dd36e069d4671522052c8988a9<br></code></pre></td></tr></table></figure><h3 id="2-2-将联盟链的证书拷贝"><a href="#2-2-将联盟链的证书拷贝" class="headerlink" title="2.2 将联盟链的证书拷贝"></a>2.2 将联盟链的证书拷贝</h3><p>cp -r nodes/127.0.0.1/sdk/*   src/main/resources/conf下</p><p><img src="02.png" alt="证书"></p><h3 id="2-3-修改配置文件-application-properties"><a href="#2-3-修改配置文件-application-properties" class="headerlink" title="2.3 修改配置文件 application.properties"></a>2.3 修改配置文件 application.properties</h3><p>注意，原配置文件有误，用修改后的，前缀为bcos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs config">### Java sdk configuration<br>bcos.cryptoMaterial.certPath=conf<br>bcos.network.peers=172.16.0.89:20200,172.16.0.89:20201<br>#network.peers[1]=<br><br>### System configuration<br>system.groupId=1<br>system.privateKey=<br><br>### Contract configuration<br>contract.helloWorldAddress=0xe6a6140ae78fd31056acdee9fb0472be3213c5ef<br><br>### Springboot configuration<br>server.port=8080<br>server.session.timeout=60<br>banner.charset=UTF-8<br>spring.jackson.date-format=yyyy-MM-dd HH:mm:ss<br>spring.jackson.time-zone=GMT+8<br><br><br><br></code></pre></td></tr></table></figure><p>修改config/BcosConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.config.model.AmopTopic;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties</span><br>        (<br>                prefix = <span class="hljs-string">&quot;bcos&quot;</span><br>        )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; cryptoMaterial;<br>    <span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; network;<br>    <span class="hljs-keyword">public</span> List&lt;AmopTopic&gt; amop;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; account;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; threadPool;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-补全业务"><a href="#3-补全业务" class="headerlink" title="3 补全业务"></a>3 补全业务</h2><p>新建controller包，新建HelloWorldController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.controller;<br><br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.service.HelloWorldService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldService helloWorldService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;set&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;n&quot;)</span> String n)</span> <span class="hljs-keyword">throws</span>  Exception</span>&#123;<br>        HelloWorldSetInputBO input = <span class="hljs-keyword">new</span> HelloWorldSetInputBO(n);<br>        <span class="hljs-keyword">return</span> helloWorldService.set(input).getTransactionReceipt().getTransactionHash();<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> helloWorldService.get().getValues();<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>编译jar包并运行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">gradle <span class="hljs-keyword">bootJar</span><br><span class="hljs-keyword"></span><br>cd <span class="hljs-keyword">dist</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxxx.<span class="hljs-keyword">jar</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4 验证"></a>4 验证</h2><p>在浏览器输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/hello/</span>set?n=hello<br></code></pre></td></tr></table></figure><p>获得交易TxHash: 0x659feaddf3fac785a0273966417dca09302fee98c608802a82b2a59891b22527</p><p>在webase-front中查询具体交易详情:<br><img src="03.png" alt="交易信息"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/hello/g</span>et<br><br>返回 hello<br></code></pre></td></tr></table></figure><p>Tips:如果有新的合约，还是建议重新按照脚手架的步骤生成一份，然后合并到一起。</p><h2 id="5-Java代码分析"><a href="#5-Java代码分析" class="headerlink" title="5 Java代码分析"></a>5 Java代码分析</h2><p>build.gradle</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        mavenCentral()<br>        maven &#123; url <span class="hljs-string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span>&#125;<br>        maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span> &#125;<br>        mavenLocal()<br><br>    &#125;<br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        <span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.webank:solc-gradle-plugin:1.0.1&#x27;</span><br>        <span class="hljs-keyword">classpath</span>(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE&quot;</span>)<br>    &#125;<br>&#125;<br>plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.1.1.RELEASE&#x27;</span><br>&#125;<br>apply plugin: <span class="hljs-string">&#x27;java&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;eclipse&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;idea&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;maven&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;solc-gradle-plugin&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span><br><br><span class="hljs-keyword">sourceCompatibility</span> = <span class="hljs-number">1.8</span><br><span class="hljs-keyword">targetCompatibility</span> = <span class="hljs-number">1.8</span><br><span class="hljs-keyword">group</span> = <span class="hljs-string">&#x27;com.jackniu&#x27;</span><br>version = <span class="hljs-string">&#x27;1.0.0-SNAPSHOT&#x27;</span><br><br>solc&#123;<br>    output = <span class="hljs-string">&#x27;src/main/resources&#x27;</span><br>    onlyAbiBin = <span class="hljs-keyword">true</span><br>&#125;<br><br><br><span class="hljs-keyword">repositories</span> &#123;<br>    mavenLocal()<br>    mavenCentral()<br>    maven &#123; url <span class="hljs-string">&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;</span>&#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span> &#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://dl.bintray.com/ethereum/maven/&quot;</span> &#125;<br>    maven &#123; url <span class="hljs-string">&quot;https://oss.sonatype.org/service/local/staging/deploy/maven2&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-keyword">configurations</span> &#123;<br>    compileOnly &#123;<br>        extendsFrom annotationProcessor<br>    &#125;<br>    all &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">dependencies</span> &#123;<br><br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;org.slf4j:slf4j-api:1.7.5&#x27;</span><br>    compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    annotationProcessor <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    testCompile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;<br>        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;org.junit.vintage&#x27;</span>, module: <span class="hljs-string">&#x27;junit-vintage-engine&#x27;</span><br>    &#125;<br>    testImplementation <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-api:5.6.1&#x27;</span><br>    testRuntimeOnly <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.6.1&#x27;</span><br>    <span class="hljs-keyword">compile</span> (<span class="hljs-string">&#x27;org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:2.7.2&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;org.slf4j&#x27;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">sourceSets</span> &#123;<br>    main &#123;<br>        java &#123;<br>            srcDir <span class="hljs-string">&#x27;src/main/java&#x27;</span><br>        &#125;<br>        resources  &#123;<br>            srcDir <span class="hljs-string">&#x27;src/main/resources&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>test &#123;<br>    useJUnitPlatform()<br>&#125;<br><br>bootJar &#123;<br>    <span class="hljs-keyword">destinationDir</span> <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;dist&#x27;</span>)<br>    archiveName <span class="hljs-keyword">project</span>.name + <span class="hljs-string">&#x27;-exec.jar&#x27;</span><br>    <span class="hljs-keyword">doLast</span> &#123;<br>        <span class="hljs-keyword">copy</span> &#123;<br>            <span class="hljs-keyword">from</span> <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;src/main/resources&#x27;</span>)<br>            <span class="hljs-keyword">into</span> <span class="hljs-string">&#x27;dist&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>clean &#123;<br>    <span class="hljs-keyword">println</span> <span class="hljs-string">&quot;delete $&#123;projectDir&#125;/dist&quot;</span><br>    <span class="hljs-keyword">delete</span> <span class="hljs-string">&quot;$&#123;projectDir&#125;/dist&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="04.png" alt="java代码结构"></p><h3 id="5-1-config目录"><a href="#5-1-config目录" class="headerlink" title="5.1 config目录"></a>5.1 config目录</h3><p>config目录主要解析application.properties文档中的配置内容。<br>SystemConfig.java,读取群组Id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemConfig</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> groupId = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">private</span> String hexPrivateKey;<br>&#125;<br><br><span class="hljs-comment">//对应的配置文件</span><br>### System configuration<br>system.groupId=<span class="hljs-number">1</span><br>system.privateKey=<br></code></pre></td></tr></table></figure><p>ContractConfig.java 读取合约部署在FISCO BCOS上的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractConfig</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String helloWorldAddress;<br>&#125;<br><br>### Contract configuration<br>contract.helloWorldAddress=<span class="hljs-number">0xe6a6140ae78fd31056acdee9fb0472be3213c5ef</span><br><br><br><br></code></pre></td></tr></table></figure><p>BcosConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BcosConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; cryptoMaterial;<br>    <span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; network;<br>    <span class="hljs-keyword">public</span> List&lt;AmopTopic&gt; amop;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; account;<br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; threadPool;<br>&#125;<br><br><span class="hljs-comment">//加密材料的目录,网络的rpc通讯节点</span><br>### Java sdk configuration<br>bcos.cryptoMaterial.certPath=conf<br>bcos.network.peers=<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span>:<span class="hljs-number">20200</span>,<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span>:<span class="hljs-number">20201</span><br></code></pre></td></tr></table></figure><h3 id="5-2-constants目录"><a href="#5-2-constants目录" class="headerlink" title="5.2 constants目录"></a>5.2 constants目录</h3><p>ContractConstants.java  合约常量,读取abi地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.constants;<br><br><span class="hljs-keyword">import</span> java.lang.Exception;<br><span class="hljs-keyword">import</span> java.lang.RuntimeException;<br><span class="hljs-keyword">import</span> java.lang.String;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContractConstants</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldAbi;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldBinary;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String HelloWorldGmBinary;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      HelloWorldAbi = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;abi/HelloWorld.abi&quot;</span>));<br>      HelloWorldBinary = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;bin/ecc/HelloWorld.bin&quot;</span>));<br>      HelloWorldGmBinary = org.apache.commons.io.IOUtils.toString(Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;bin/sm/HelloWorld.bin&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>    &#125;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>如果有新的合约，可以在这里调用</p><h3 id="5-3-model包"><a href="#5-3-model包" class="headerlink" title="5.3 model包"></a>5.3 model包</h3><p>CommonResponse.java 通用响应,接口返回结果封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.model;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResponse</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OK = <span class="hljs-string">&quot;0&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResponse <span class="hljs-title">ok</span><span class="hljs-params">(Object data)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResponse(OK, <span class="hljs-string">&quot;&quot;</span>,data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResponse <span class="hljs-title">fail</span><span class="hljs-params">(String code, Exception ex)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResponse(code, ex.getMessage(), <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>HelloWorldSetInputBO.java   因为有一个set方法需要传入参数，因此封装传入参数的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.model.bo;<br><br><span class="hljs-keyword">import</span> java.lang.Object;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldSetInputBO</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String n;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">toArgs</span><span class="hljs-params">()</span> </span>&#123;<br>    List args = <span class="hljs-keyword">new</span> ArrayList();<br>    args.add(n);<br>    <span class="hljs-keyword">return</span> args;<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="5-4-service包"><a href="#5-4-service包" class="headerlink" title="5.4 service包"></a>5.4 service包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.service;<br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.constants.ContractConstants;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> java.lang.Exception;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.client.Client;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.manager.AssembleTransactionProcessor;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.manager.TransactionProcessorFactory;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.dto.CallResponse;<br><span class="hljs-keyword">import</span> org.fisco.bcos.sdk.transaction.model.dto.TransactionResponse;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldService</span> </span>&#123;<br>  <span class="hljs-meta">@Value(&quot;$&#123;contract.helloWorldAddress&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String address;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> Client client;<br><br>  AssembleTransactionProcessor txProcessor;<br><br>  <span class="hljs-meta">@PostConstruct</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">this</span>.txProcessor = TransactionProcessorFactory.createAssembleTransactionProcessor(<span class="hljs-keyword">this</span>.client, <span class="hljs-keyword">this</span>.client.getCryptoSuite().getCryptoKeyPair());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> TransactionResponse <span class="hljs-title">set</span><span class="hljs-params">(HelloWorldSetInputBO input)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.txProcessor.sendTransactionAndGetResponse(<span class="hljs-keyword">this</span>.address, ContractConstants.HelloWorldAbi, <span class="hljs-string">&quot;set&quot;</span>, input.toArgs());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> CallResponse <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.txProcessor.sendCall(<span class="hljs-keyword">this</span>.client.getCryptoSuite().getCryptoKeyPair().getAddress(), <span class="hljs-keyword">this</span>.address, ContractConstants.HelloWorldAbi, <span class="hljs-string">&quot;get&quot;</span>, Arrays.asList());<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-5-controller包"><a href="#5-5-controller包" class="headerlink" title="5.5 controller包"></a>5.5 controller包</h3><p>业务逻辑: 调用service中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jackniu.fiscodemo.controller;<br><br><br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.model.bo.HelloWorldSetInputBO;<br><span class="hljs-keyword">import</span> com.jackniu.fiscodemo.service.HelloWorldService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldService helloWorldService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;set&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;n&quot;)</span> String n)</span> <span class="hljs-keyword">throws</span>  Exception</span>&#123;<br>        HelloWorldSetInputBO input = <span class="hljs-keyword">new</span> HelloWorldSetInputBO(n);<br>        <span class="hljs-keyword">return</span> helloWorldService.set(input).getTransactionReceipt().getTransactionHash();<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;get&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> helloWorldService.get().getValues();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>基本逻辑完成</p><h2 id="6-Asset合约，涉及msg-sender的合约"><a href="#6-Asset合约，涉及msg-sender的合约" class="headerlink" title="6 Asset合约，涉及msg.sender的合约"></a>6 Asset合约，涉及msg.sender的合约</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs s">pragma solidity ^0.4.25;<br><br>contract Asset &#123;<br>    address public issuer;<br>    mapping (address =&gt; uint) public balances;<br><br>    event Sent(address from, address to, uint amount);<br><br>    constructor() &#123;<br>        issuer = msg.sender;<br>    &#125;<br><br>    function issue(address receiver, uint amount) public &#123;<br>        if (msg.sender != issuer) return;<br>        balances[receiver] += amount;<br>    &#125;<br><br>    function send(address receiver, uint amount) public &#123;<br>        if (balances[msg.sender] &lt; amount) return;<br>        balances[msg.sender] -= amount;<br>        balances[receiver] += amount;<br>        emit Sent(msg.sender, receiver, amount);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>TODO:</p><ul><li>1 部署之后，在FISCO BCOS中获取了合约地址，使用java sdk，编译成java代码，在调用的时候回检查 已部署合约的调用者的地址,<br>  这里要求的都是msg.sender == issuer,<br>  <img src="05.png" alt="合约部署"><br>  如何在java工程中配置工作账户？</li></ul><p>解决方案:</p><ul><li><p>1 在application.properties中增加账户文件地址:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">### System configuration</span><br><span class="hljs-attribute">system</span>.groupId=<span class="hljs-number">1</span><br><span class="hljs-attribute">system</span>.privateKey=<br><span class="hljs-attribute">system</span>.hexPrivateKey=<span class="hljs-number">0</span>xe<span class="hljs-number">45059851</span>df<span class="hljs-number">184</span>dd<span class="hljs-number">36</span>e<span class="hljs-number">069</span>d<span class="hljs-number">4671522052</span>c<span class="hljs-number">8988</span>a<span class="hljs-number">9</span> # 这个配置属性无效，或者说没有找到合适的使用方式<br><span class="hljs-attribute">system</span>.accountPath=E:\\project\\fisco_project\\fiscodemoasset\\src\\main\\resources\\conf\\<span class="hljs-number">0</span>xe<span class="hljs-number">45059851</span>df<span class="hljs-number">184</span>dd<span class="hljs-number">36</span>e<span class="hljs-number">069</span>d<span class="hljs-number">4671522052</span>c<span class="hljs-number">8988</span>a<span class="hljs-number">9</span>.pem<br><br><br></code></pre></td></tr></table></figure></li><li><p>2 修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configCryptoKeyPair</span><span class="hljs-params">(Client client)</span> <span class="hljs-keyword">throws</span> ConfigException </span>&#123;<br><span class="hljs-comment">//        if(systemConfig.getHexPrivateKey() == null || systemConfig.getHexPrivateKey().isEmpty())&#123;</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        if(systemConfig.getHexPrivateKey().startsWith(&quot;0x&quot;) || systemConfig.getHexPrivateKey().startsWith(&quot;0X&quot;))&#123;</span><br><span class="hljs-comment">//            systemConfig.setHexPrivateKey(systemConfig.getHexPrivateKey().substring(2));</span><br><span class="hljs-comment">//        &#125;</span><br><br><br>        client.getCryptoSuite().loadAccount(<span class="hljs-string">&quot;pem&quot;</span>,systemConfig.getAccountPath(),<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">//        client.getCryptoSuite().setCryptoKeyPair(client.getCryptoSuite().createKeyPair(systemConfig.getHexPrivateKey()));</span><br>    &#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>3 测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1:8080/asset/issue?receiver=0xf9c75f92388cf87a65281155a0afe913b09ca2f6&amp;amount=10000<br><br>返回: 0x6d2e5b3d867ea80bda5f2af260689866bd3519c21fd366c6bab3bf8b2ce8783c<br><br>http://127.0.0.1:8080/asset/balance?address=0xf9c75f92388cf87a65281155a0afe913b09ca2f6<br><br>返回: [10000]<br><br><br><br></code></pre></td></tr></table></figure><p><img src="%E4%BA%A4%E6%98%93%E8%B4%A6%E6%88%B7.png" alt="交易账户"></p></li></ul><p>基本完成了。。。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>应用开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-4-使用工具</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-4-%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-运维部署工具"><a href="#1-运维部署工具" class="headerlink" title="1 运维部署工具"></a>1 运维部署工具</h2><h3 id="1-1-一键部署"><a href="#1-1-一键部署" class="headerlink" title="1.1 一键部署"></a>1.1 一键部署</h3><p>one_click_generator.sh脚本为根据用户填写的节点配置，一键部署联盟链的脚本。脚本会根据用户指定文件夹下配置的node_deployment.ini，在文件夹下生成相应的节点。</p><p>构建3个机构，2个群组，6个节点的组网模式，了解机构一键部署运维工具的使用方法。</p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p><strong>下载</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~/ <br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/FISCO-BCOS/g</span>enerator.git<br><br><span class="hljs-comment"># 若因为网络问题导致长时间无法下载，请尝试以下命令：</span><br>git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/FISCO-BCOS/g</span>enerator.git<br><br><br>cd ~<span class="hljs-regexp">/generator &amp;&amp; bash ./</span>scripts/install.sh<br><br><span class="hljs-comment">## 检查是否安装成功，若成功，输出 usage: generator xxx</span><br>./generator -h<br></code></pre></td></tr></table></figure><p><strong>获取节点二进制</strong><br>下载fisco-bcos最新二进制文件到meta中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/generator --download_fisco ./m</span>eta<br><br>.<span class="hljs-regexp">/meta/</span>fisco-bcos -v  <span class="hljs-comment"># 输出版本即成功</span><br></code></pre></td></tr></table></figure><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>部署3机构2群组6节点的组网模式。</p><p><strong>节点组网拓扑结构</strong><br><img src="%E6%8B%93%E6%89%91.png" alt="节点拓扑"></p><p><strong>机器环境</strong></p><table><thead><tr><th>机构</th><th>节点</th><th>所属群组</th><th>P2P地址</th><th>RPC</th><th>Channel监听地址</th></tr></thead><tbody><tr><td>机构A</td><td>节点0</td><td>群组1,2</td><td>127.0.0.1:30300</td><td>127.0.0.1:8545</td><td>0.0.0.:20200</td></tr><tr><td>机构A</td><td>节点1</td><td>群组1,2</td><td>127.0.0.1:30301</td><td>127.0.0.1:8546</td><td>0.0.0.:20201</td></tr><tr><td>机构A</td><td>节点4</td><td>群组1,2</td><td>127.0.0.1:30304</td><td>127.0.0.1:8549</td><td>0.0.0.:20202</td></tr><tr><td>机构B</td><td>节点2</td><td>群组1</td><td>127.0.0.1:30302</td><td>127.0.0.1:8547</td><td>0.0.0.:20203</td></tr><tr><td>机构B</td><td>节点3</td><td>群组1</td><td>127.0.0.1:30303</td><td>127.0.0.1:8548</td><td>0.0.0.:20204</td></tr><tr><td>机构C</td><td>节点5</td><td>群组1,2</td><td>127.0.0.1:30305</td><td>127.0.0.1:8550</td><td>0.0.0.:20205</td></tr></tbody></table><h4 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h4><p>在tmp_one_click文件夹下是机构的配置位置，每个机构目录下需要有对应的配置文件node_deployment.ini. 使用前需要保证generator的meta文件夹没有进行过任何操作。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 参数解释</span><br><span class="hljs-comment"># 如需多个机构，需要手动创建该文件夹</span><br>tmp_one_click <span class="hljs-comment"># 用户指定进行一键部署操作的文件夹</span><br>├── agencyA <span class="hljs-comment"># 机构A目录，命令执行后会在该目录下生成机构A的节点及相关文件</span><br>│   └── node_deployment.ini <span class="hljs-comment"># 机构A节点配置文件，一键部署命令会根据该文件生成相应节点</span><br>└── agencyB <span class="hljs-comment"># 机构B目录，命令执行后会在该目录下生成机构B的节点及相关文件</span><br>    └── node_deployment.ini <span class="hljs-comment"># 机构B节点配置文件，一键部署命令会根据该文件生成相应节点</span><br><br></code></pre></td></tr></table></figure><p> cat node_deployment.ini<br> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[group]</span><br><span class="hljs-attr">group_id</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment">; Owned nodes</span><br><span class="hljs-section">[node0]</span><br><span class="hljs-comment">; host ip for the communication among peers.</span><br><span class="hljs-comment">; Please use your ssh login ip.</span><br><span class="hljs-attr">p2p_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-comment">; listen ip for the communication between sdk clients.</span><br><span class="hljs-comment">; This ip is the same as p2p_ip for physical host.</span><br><span class="hljs-comment">; But for virtual host e.g. vps servers, it is usually different from p2p_ip.</span><br><span class="hljs-comment">; You can check accessible addresses of your network card.</span><br><span class="hljs-comment">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-comment">; for more instructions.</span><br><span class="hljs-attr">rpc_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">channel_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">p2p_listen_port</span>=<span class="hljs-number">30300</span><br><span class="hljs-attr">channel_listen_port</span>=<span class="hljs-number">20200</span><br><span class="hljs-attr">jsonrpc_listen_port</span>=<span class="hljs-number">8545</span><br><br><span class="hljs-section">[node1]</span><br><span class="hljs-attr">p2p_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">rpc_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">channel_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">p2p_listen_port</span>=<span class="hljs-number">30301</span><br><span class="hljs-attr">channel_listen_port</span>=<span class="hljs-number">20201</span><br><span class="hljs-attr">jsonrpc_listen_port</span>=<span class="hljs-number">8546</span><br></code></pre></td></tr></table></figure></p><h5 id="生成节点"><a href="#生成节点" class="headerlink" title="生成节点"></a>生成节点</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">bash ./one_click_generator.sh -b ./tmp_one_click<br><br>ls ./tmp_one_click<br><br>├── agencyA <span class="hljs-comment"># A机构文件夹</span><br>│   ├── agency_cert <span class="hljs-comment"># A机构证书及私钥</span><br>│   ├── generator-agency <span class="hljs-comment"># 自动代替A机构进行操作的generator文件夹</span><br>│   ├── <span class="hljs-keyword">node</span> <span class="hljs-title"># A</span>机构生成的节点，多机部署时推送至对应服务器即可<br>│   ├── node_deployment.ini <span class="hljs-comment"># A机构的节点配置信息</span><br>│   └── sdk <span class="hljs-comment"># A机构的sdk或控制台配置文件</span><br>├── agencyB<br>|   ├── agency_cert<br>|   ├── generator-agency<br>|   ├── <span class="hljs-keyword">node</span><br><span class="hljs-title">|   ├── node_deployment</span>.ini<br>|   └── sdk<br>|── ca.crt <span class="hljs-comment"># 链证书</span><br>|── ca.key <span class="hljs-comment"># 链私钥</span><br>|── group.<span class="hljs-number">1</span>.genesis <span class="hljs-comment"># 群组1创世区块</span><br>|── peers.txt <span class="hljs-comment"># 节点的peers.txt信息</span><br><br></code></pre></td></tr></table></figure><h5 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> ./tmp_one_click/agencyA/node/start_all.sh<br><span class="hljs-attribute">bash</span> ./tmp_one_click/agencyB/node/start_all.sh<br><br><br><span class="hljs-attribute">root</span>     <span class="hljs-number">18650</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30301</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18651</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30300</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18911</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30302</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18913</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30303</span>/fisco-bcos -c config.ini<br></code></pre></td></tr></table></figure><p>目前已经完成了机构A-节点0，机构A-节点1，机构B-节点2，机构B-节点3的创建，全部属于群组1，还需要节点4，节点5 的扩容</p><h4 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h4><p><strong>初始化扩容配置</strong><br>创建扩容文件夹，任意名称  tmp_one_click_expand，每次扩容都使用新的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 创建文件</span><br>mkdir ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(2) 拷贝链证书及私钥至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/ca.* ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(3) 拷贝群组1创世区块group.1.genesis至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/group.1.genesis ~/generator/tmp_one_click_expand/<br><br><span class="hljs-comment">#(4) 拷贝群组1节点P2P连接文件peers.txt至扩容文件夹</span><br>cp  ~/generator/tmp_one_click/peers.txt ~/generator/tmp_one_click_expand/<br><br></code></pre></td></tr></table></figure><p><strong>机构A配置节点信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (1) 创建机构A扩容节点所在目录</span><br>mkdir ~/generator/tmp_one_click_expand/agencyA<br><br><span class="hljs-comment">#(2) 此时机构A已经存在联盟链中，因此需拷贝机构A证书、私钥至对应文件夹</span><br>cp -r ~/generator/tmp_one_click/agencyA/agency_cert ~/generator/tmp_one_click_expand/agencyA<br><br><span class="hljs-comment">#(3) 机构A填写节点配置信息</span><br>cat &gt; ./tmp_one_click_expand/agencyA/node_deployment.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[node0]</span><br><span class="hljs-string">; Host IP for the communication among peers.</span><br><span class="hljs-string">; Please use your ssh login IP.</span><br><span class="hljs-string">p2p_ip=127.0.0.1</span><br><span class="hljs-string">; listening IP for the communication between SDK clients.</span><br><span class="hljs-string">; This IP is the same as p2p_ip for the physical host.</span><br><span class="hljs-string">; But for virtual host e.g., VPS servers, it is usually different from p2p_ip.</span><br><span class="hljs-string">; You can check accessible addresses of your network card.</span><br><span class="hljs-string">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-string">; for more instructions.</span><br><span class="hljs-string">rpc_ip=127.0.0.1</span><br><span class="hljs-string">channel_ip=0.0.0.0</span><br><span class="hljs-string">p2p_listen_port=30304</span><br><span class="hljs-string">channel_listen_port=20204</span><br><span class="hljs-string">jsonrpc_listen_port=8549</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h5 id="机构C配置节点信息"><a href="#机构C配置节点信息" class="headerlink" title="机构C配置节点信息"></a>机构C配置节点信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 创建机构C扩容节点所在目录</span><br>mkdir ~/generator/tmp_one_click_expand/agencyC<br><br><br><span class="hljs-comment">#(2) 机构C填写节点配置信息</span><br>cat &gt; ./tmp_one_click_expand/agencyC/node_deployment.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">[node0]</span><br><span class="hljs-string">; Host IP for the communication among peers.</span><br><span class="hljs-string">; Please use your ssh login IP.</span><br><span class="hljs-string">p2p_ip=127.0.0.1</span><br><span class="hljs-string">; listening IP for the communication between SDK clients.</span><br><span class="hljs-string">; This IP is the same as p2p_ip for the physical host.</span><br><span class="hljs-string">; But for virtual host e.g., VPS servers, it is usually different from p2p_ip.</span><br><span class="hljs-string">; You can check accessible addresses of your network card.</span><br><span class="hljs-string">; Please see https://tecadmin.net/check-ip-address-ubuntu-18-04-desktop/</span><br><span class="hljs-string">; for more instructions.</span><br><span class="hljs-string">rpc_ip=127.0.0.1</span><br><span class="hljs-string">channel_ip=0.0.0.0</span><br><span class="hljs-string">p2p_listen_port=30305</span><br><span class="hljs-string">channel_listen_port=20205</span><br><span class="hljs-string">jsonrpc_listen_port=8550</span><br><span class="hljs-string">EOF</span><br><br><br><br><br></code></pre></td></tr></table></figure><h5 id="生成扩容节点"><a href="#生成扩容节点" class="headerlink" title="生成扩容节点"></a>生成扩容节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>bash ./one_click_generator.sh   -e ./tmp_one_click_expand<br><br><br>[root@cz-ambari-slave-0003 tmp_one_click_expand]<span class="hljs-comment"># tree -L 3</span><br>.<br>├── agencyA<br>│   ├── agency_cert<br>│   │   ├── agency.crt<br>│   │   ├── agency.key<br>│   │   └── ca.crt<br>│   ├── generator-agency<br>│   │   ├── Changelog.md<br>│   │   ├── conf<br>│   │   ├── CONTRIBUTING.md<br>│   │   ├── doc<br>│   │   ├── generator<br>│   │   ├── LICENSE<br>│   │   ├── <span class="hljs-built_in">log</span><br>│   │   ├── meta<br>│   │   ├── node_send<br>│   │   ├── one_click_generator.sh<br>│   │   ├── pys<br>│   │   ├── README.md<br>│   │   ├── release_note.txt<br>│   │   ├── requirements.txt<br>│   │   ├── scripts<br>│   │   ├── tmp_one_click<br>│   │   └── tpl<br>│   ├── node<br>│   │   ├── monitor<br>│   │   ├── node_127.0.0.1_30304<br>│   │   ├── scripts<br>│   │   ├── start_all.sh<br>│   │   └── stop_all.sh<br>│   ├── node_deployment.ini<br>│   └── sdk<br>│       ├── applicationContext.xml<br>│       ├── ca.crt<br>│       ├── node.crt<br>│       ├── node.key<br>│       ├── sdk.crt<br>│       └── sdk.key<br>├── agencyC<br>│   ├── agency_cert<br>│   │   ├── agency.crt<br>│   │   ├── agency.key<br>│   │   └── ca.crt<br>│   ├── generator-agency<br>│   │   ├── Changelog.md<br>│   │   ├── conf<br>│   │   ├── CONTRIBUTING.md<br>│   │   ├── doc<br>│   │   ├── generator<br>│   │   ├── LICENSE<br>│   │   ├── <span class="hljs-built_in">log</span><br>│   │   ├── meta<br>│   │   ├── node_send<br>│   │   ├── one_click_generator.sh<br>│   │   ├── pys<br>│   │   ├── README.md<br>│   │   ├── release_note.txt<br>│   │   ├── requirements.txt<br>│   │   ├── scripts<br>│   │   ├── tmp_one_click<br>│   │   └── tpl<br>│   ├── node<br>│   │   ├── monitor<br>│   │   ├── node_127.0.0.1_30305<br>│   │   ├── scripts<br>│   │   ├── start_all.sh<br>│   │   └── stop_all.sh<br>│   ├── node_deployment.ini<br>│   └── sdk<br>│       ├── applicationContext.xml<br>│       ├── ca.crt<br>│       ├── node.crt<br>│       ├── node.key<br>│       ├── sdk.crt<br>│       └── sdk.key<br>├── ca.crt<br>├── ca.key<br>├── ca.srl<br>├── group.1.genesis<br>└── peers.txt<br></code></pre></td></tr></table></figure><h5 id="启动新节点"><a href="#启动新节点" class="headerlink" title="启动新节点"></a>启动新节点</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash .<span class="hljs-regexp">/tmp_one_click_expand/</span>agencyA<span class="hljs-regexp">/node/</span>start_all.sh<br>bash .<span class="hljs-regexp">/tmp_one_click_expand/</span>agencyC<span class="hljs-regexp">/node/</span>start_all.sh<br></code></pre></td></tr></table></figure><p>查看节点进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>     <span class="hljs-number">18650</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30301</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18651</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30300</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18911</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30302</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">18913</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">42</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> /opt/fisco/generator/tmp_one_click/agencyB/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30303</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">27860</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click_expand/agencyC/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30305</span>/fisco-bcos -c config.ini<br><span class="hljs-attribute">root</span>     <span class="hljs-number">27995</span>     <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /opt/fisco/generator/tmp_one_click_expand/agencyA/node/node_<span class="hljs-number">127.0.0.1</span>_<span class="hljs-number">30304</span>/fisco-bcos -c config.ini<br><br></code></pre></td></tr></table></figure><p>Tips: 为群组1扩容的新节点需要使用sdk或控制台加入到群组中。</p><h4 id="使用控制台注册节点"><a href="#使用控制台注册节点" class="headerlink" title="使用控制台注册节点"></a>使用控制台注册节点</h4><p>以机构A使用控制台为例，此步需要切换到机构A对应的generator-agency文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/generator/tmp_one_click/agencyA/generator-agency<br>./generator --download_console ./ --cdn<br><br></code></pre></td></tr></table></figure><h5 id="查看机构A节点4"><a href="#查看机构A节点4" class="headerlink" title="查看机构A节点4"></a>查看机构A节点4</h5><p>机构A使用控制台加入架构A节点4为共识节点，其中参数第二项需要在conf的node.nodeid中找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat ~/generator/tmp_one_click_expand/agencyA/node/node_127.0.0.1_30304/conf/node.nodeid<br>&gt;&gt;&gt;  4b784ca0c48ba62ded1875c7560ca6ece5643e4114620d5c2c3c5d3353c89ffbc60b02203b5a528ef2da6acbf9be96170e16b1ee94bc6c416f2b2d56362311a7<br><br><span class="hljs-comment"># 启动控制台</span><br><span class="hljs-built_in">cd</span> ~/generator/tmp_one_click/agencyA/generator-agency/console &amp;&amp; bash ./start.sh 1<br><br>addSealer nodeid<br><br><span class="hljs-comment"># 执行成功显示success</span><br><br></code></pre></td></tr></table></figure><h5 id="查看机构C节点5"><a href="#查看机构C节点5" class="headerlink" title="查看机构C节点5"></a>查看机构C节点5</h5><p>机构A使用控制台加入机构C的节点5为观察节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#(1) 节点5的nodeid</span><br>fc0e7b59508b3fb9a1be5325052a1f339e0b432285997b08679f7c51280e6de06ab4b40bd2ac37334d9371f69d7d64a4258bd60337a6fd4becf8770b59c9f920<br><br><span class="hljs-comment">#(2) 在agencyA的控制台中将节点注册为观察节点</span><br>addObserver nodeid<br><br></code></pre></td></tr></table></figure><p>至此，我们完成了新增节点至现有群组的操作。</p><h4 id="新增群组-扩容新群组"><a href="#新增群组-扩容新群组" class="headerlink" title="新增群组(扩容新群组)"></a>新增群组(扩容新群组)</h4><p>新增群组的操作在one_click_generator.sh脚本的目录下，修改./conf/group_genesis.ini文件，并执行–create_group_genesis命令。<br>为如图4个节点生成群组2</p><p><img src="%E6%8B%93%E6%89%91.png" alt="群组2"></p><h5 id="配置群组2创世区块"><a href="#配置群组2创世区块" class="headerlink" title="配置群组2创世区块"></a>配置群组2创世区块</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; ./conf/group_genesis.ini &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[group]</span><br><span class="hljs-string">group_id=2</span><br><span class="hljs-string"></span><br><span class="hljs-string">[nodes]</span><br><span class="hljs-string">node0=127.0.0.1:30300</span><br><span class="hljs-string">node1=127.0.0.1:30301</span><br><span class="hljs-string">node2=127.0.0.1:30304</span><br><span class="hljs-string">node3=127.0.0.1:30305</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment">## (1) 获取对应节点证书  结构A-节点0证书 (node0=127.0.0.1:30300)  pwd=meta</span><br>cp ../tmp_one_click/agencyA/generator-agency/meta/cert_127.0.0.1_30300.crt .<br><br><span class="hljs-comment">## (2) 机构A-节点1（node1=127.0.0.1:30301）</span><br><span class="hljs-comment">## 机构A-节点4（node2=127.0.0.1:30304）</span><br><span class="hljs-comment">## 机构C-节点5（node3=127.0.0.1:30305）</span><br><br><span class="hljs-comment">## (3) 生成创世区块</span><br>./generator --create_group_genesis ./group2<br><br><br><span class="hljs-comment">## (4) 将群组创世区块加入现有节点：</span><br>./generator --add_group ./group2/group.2.genesis ./tmp_one_click/agencyA/node/node_127.0.0.1_30300<br><span class="hljs-comment">## 其他的3个都加入</span><br></code></pre></td></tr></table></figure><h5 id="加载、启动新群组"><a href="#加载、启动新群组" class="headerlink" title="加载、启动新群组"></a>加载、启动新群组</h5><p>节点在运行时，可直接用脚本load_new_groups.sh加载新群组配置，并调用startGroupRPC接口启动新群组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#(1) 机构A-节点0</span><br>bash ./tmp_one_click/agencyA/node/node_127.0.0.1_30300/scripts/load_new_groups.sh<br>curl -X POST --data <span class="hljs-string">&#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27;</span> http://127.0.0.1:8545<br><br><br><br><span class="hljs-comment">## 整体</span><br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click/agencyA/node/node_127.0.0.1_30301/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30301 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8546</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click_expand/agencyA/node/node_127.0.0.1_30304/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30304 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8549</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># bash ./tmp_one_click_expand/agencyC/node/node_127.0.0.1_30305/scripts/load_new_groups.sh</span><br>node_127.0.0.1_30305 is trying to load new groups. Check <span class="hljs-built_in">log</span> <span class="hljs-keyword">for</span> more information.<br>[root@cz-ambari-slave-0003 generator]<span class="hljs-comment"># curl -X POST --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;startGroup&quot;,&quot;params&quot;:[2],&quot;id&quot;:1&#125;&#x27; http://127.0.0.1:8550</span><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;result&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;0x0&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Group 2 started successfully&quot;</span>&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>查看节点</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">tail -f ~<span class="hljs-regexp">/generator/</span>tmp_one_click<span class="hljs-regexp">/agency*/</span>node<span class="hljs-regexp">/node*/</span>log/log* | <span class="hljs-keyword">grep</span> g:<span class="hljs-number">2</span> | <span class="hljs-keyword">grep</span> +++<br></code></pre></td></tr></table></figure><p>至此 我们完成了所示构建教程中的所有操作。</p>]]></content>
    
    
    <categories>
      
      <category>FISCO BCOS 使用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FISCO-1-基础认知及操作</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/FISCO-1-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/FISCO-1-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>B-2-区块链应用-应用开发</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/B-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="区块链初级应用开发"><a href="#区块链初级应用开发" class="headerlink" title="区块链初级应用开发"></a>区块链初级应用开发</h2><h3 id="智能合约的重点"><a href="#智能合约的重点" class="headerlink" title="智能合约的重点"></a>智能合约的重点</h3><p><strong>01 函数</strong><br>函数中的参数必须明确指定为memory类型</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Equal(<span class="hljs-params">string</span> <span class="hljs-params">memory</span> <span class="hljs-params">a</span>, <span class="hljs-params">string</span> <span class="hljs-params">memory</span> <span class="hljs-params">b</span>)</span> public view returns (<span class="hljs-built_in">bool</span>)<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>02 付款</strong><br>操作：向智能合约内充钱</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deposit</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>代码这样就可以了，good<br>唯一强调的是payable，凡是涉及ether转移的，函数或地址都需要增加payable修饰符，代表可以支付，行为可以发生。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">address payable <span class="hljs-keyword">public</span> tuhao ;<span class="hljs-comment">//这里是地址增加payable，代表可以操作eth</span><br></code></pre></td></tr></table></figure><p>合约部署之后会形成一个地址，这个地址和账户地址的格式是一样的，在以太坊网络中，合约地址是一种特殊的账户地址，可以像普通账户一样节后转账交易。<br>对于deposit函数，我们没有在函数内部实现任何逻辑，但是调用的时候，msg（在合约调用时传递过来的信息），msg.value（所携带信息中wei的数量）已经被合约地址给接收了，就是合约是给钱就收到。</p><p><img src="01.png" alt="payable"></p><p>查询余额</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> <span class="hljs-params">(uint256)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> address(<span class="hljs-keyword">this</span>).balance;<span class="hljs-comment">//this是合约,address(this)获取合约地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>03 函数修饰符<br>public 权限最大，private权限最小。<br>蓝色：只读函数，使用view关键字，该类函数不允许修改状态变量，调用时不会消耗gas<br>橘红色: 写函数，该类函数会修改状态变量的值，调用时会消耗gas<br>红色: 可支付函数，该类函数涉及资产转移，必须加payable关键字，调用时会消耗gas<br><img src="02.png" alt="修饰符"></p><p>复合类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mapping</span><span class="hljs-params">(address=&gt;string)</span></span> public addr_names<br></code></pre></td></tr></table></figure><p>断言处理与自定义修饰符</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-built_in">function</span> <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">bool</span> cool_expr)<br><span class="hljs-built_in">function</span> require(<span class="hljs-built_in">bool</span> cond_expr,<span class="hljs-built_in">string</span> msg)<br></code></pre></td></tr></table></figure><p>assert 和 require 都是断言函数，断定某件事情一定成立，否则智能合约就会发生回退。 区别： 第一，原型函数不同，assert只需要传入一个条件表达式，而require则需要传入条件表达式和异常信息(也可以不用传递)两个参数； 第二，当condexpr为假时，虽然二者都会回退，但是assert处理的方式较为过激，他会通过扣光剩余gas的方式惩罚调用者(gas limit是多少，就会扣掉多少)，require则会把剩余的gas返回给调用者。</p><p>require相对温和。因此推荐大多数时候使用require，不过也并不代表assert完全无用。 assert的场景多事作内部判断，尤其是与状态变量无关的判断多使用assert，另外assert还有一个很好的作用是测试，在商用前可以使用assert尽可能的测试合约错误， 一旦assert扣光gas了，代表我们认为的不会发生的事情发生了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">//充值功能</span><br>function deposit(uint256 <span class="hljs-variable">_amount</span>)  public payable &#123;<br>    require(msg.value == <span class="hljs-variable">_amount</span>, <span class="hljs-string">&quot;msg value must equal _amount&quot;</span>);<br><br>    <span class="hljs-built_in">assert</span>(<span class="hljs-variable">_amount</span> &gt;<span class="hljs-number">0</span>);<br>    amount += <span class="hljs-variable">_amount</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>modifier 可以将一些断言判断封装、组合为我们的业务需求，方便在其他函数中使用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//自定义修饰符</span><br>modifier <span class="hljs-function"><span class="hljs-title">onlyadmin</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">require</span>(admin == msg.sender,<span class="hljs-string">&quot;only admin can do this&quot;</span>);<br>    _; <span class="hljs-comment">// 占位符号，标志modifier的结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>传递方式：<br>值传递时，使用memory修饰变量，引用传递时用storage修饰变量</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br><br>//值传递和引用传递<br>contract storage_demo&#123;<br>    //自定义结构<br>    struct <span class="hljs-keyword">User</span>&#123;<br>        string <span class="hljs-type">name</span>;<br>        uint256 age;<br>    &#125;<br><br>    <span class="hljs-keyword">User</span> <span class="hljs-built_in">public</span> adminUser;<br><br>    constructor() <span class="hljs-built_in">public</span>&#123;<br>        adminUser.name = &quot;jackniu&quot;;<br>        adminUser.age = <span class="hljs-number">40</span>;<br>    &#125;<br><br>    //值传递,adminUser的age不会被修改<br>    <span class="hljs-keyword">function</span> setAge(uint256 _age) <span class="hljs-built_in">public</span> &#123;<br>        //值传递，<span class="hljs-keyword">user</span>是adminUser的拷贝<br>        <span class="hljs-keyword">User</span> memory <span class="hljs-keyword">user</span> = adminUser;<br>        <span class="hljs-keyword">user</span>.age = _age;<br>    &#125;<br><br>    //引用传递，adminUser的age会被修改<br>    <span class="hljs-keyword">function</span> setAge2(uint256 _age) <span class="hljs-built_in">public</span> &#123;<br>        //引用传递，<span class="hljs-keyword">user</span>就是adminUser<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">storage</span> <span class="hljs-keyword">user</span> = adminUser;<br>        <span class="hljs-keyword">user</span>.age = _age;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="抢红包"><a href="#抢红包" class="headerlink" title="抢红包"></a>抢红包</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs zephir">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br>contract redpacket&#123;<br>    address payable <span class="hljs-keyword">public</span> tuhao;<br>    <span class="hljs-keyword">uint</span> <span class="hljs-keyword">public</span> number; <span class="hljs-comment">//红包数量</span><br><br>    <span class="hljs-comment">//构造函数，携带msg.values</span><br>    constructor(<span class="hljs-keyword">uint</span> _number) payable <span class="hljs-keyword">public</span> &#123;<br>        tuhao = payable(msg.sender);<br>        number = _number;<br>    &#125;<br><br><br>    <span class="hljs-comment">//获取余额</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> <span class="hljs-params">(<span class="hljs-keyword">uint</span>)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> address(this).balance;<br>    &#125;<br><br>    <span class="hljs-comment">//抢红包</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stakeMoney</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span> <span class="hljs-title">returns</span> <span class="hljs-params">(<span class="hljs-keyword">bool</span>)</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(number &gt;<span class="hljs-number">0</span> );<br>        <span class="hljs-keyword">require</span>(getBalance() &gt;<span class="hljs-number">0</span>);  <span class="hljs-comment">//还有红包，余额不为0</span><br><br>        number--;<br><br>        <span class="hljs-comment">//抢到的红包金额采用随机的方式，获取一个随机数</span><br>        <span class="hljs-keyword">uint</span> random = <span class="hljs-keyword">uint</span>(keccak256(abi.encode(block.timestamp,msg.sender,<span class="hljs-string">&quot;tuhao&quot;</span>))) %<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">uint</span> balance = getBalance();<br><br>        <span class="hljs-comment">//将钱打给抢到红包的人 , transfer==get</span><br>        payable (msg.sender).transfer(balance * random /<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br><br>    &#125;<br>    <span class="hljs-comment">// function selfdestruct(address user) 销毁合约，user代表销毁合约的受益人，如果合约内存在资产，将他们打给user</span><br><br>    <span class="hljs-comment">//销毁合约</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kill</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> </span>&#123;<br>        <span class="hljs-keyword">require</span>(msg.sender == tuhao );<br>        selfdestruct(tuhao);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一: address 转换为address payable</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tuhao</span> = payable(msg.sender)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>第二： 谁在抢红包，抢谁的钱<br>合约部署者，在部署合约的时候，同时传递了msg.values<br><img src="03.png"></p><p>剩余90，10ether 给了合约地址，0xd9145CCE52D386f254917e481eB44e9943F39138</p><p>开始抢红包，就需要别的账户使用部署的这个合约，并且调用里面的sakeMoney方法。<br><img src="04.png"><br><img src="05.png"></p><p>点击红色按钮抢红包，抢到了<br><img src="06.png"><br>还剩2个了<br><img src="07.png"></p><p>那么怎么给调用者给钱呢？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">payable</span> (msg.sender).<span class="hljs-built_in">transfer</span>(balance * random /<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><img src="08.png"></p><p>A.transfer()的类似于  “合约，给A多少钱”</p><p>10 智能合约开发技巧<br>技巧1： 使用event调试<br>event函数接口可以像日志那样显示智能合约运行时的数据问题，开发者可以将关注的数据通过event接口调用的方式显示在调用返回信息中。</p><pre><code>event eventname(paramlists)event只是接口，不需要实现，调用的时候和普通函数类似，在前面多加一个emit就行了。</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">event age<span class="hljs-constructor">Info(<span class="hljs-params">address</span> <span class="hljs-params">_owner</span>, <span class="hljs-params">uint256</span> <span class="hljs-params">_age</span>)</span>;<br><br>    constructor<span class="hljs-literal">()</span> public&#123;<br>        adminUser.name = <span class="hljs-string">&quot;jackniu&quot;</span>;<br>        adminUser.age = <span class="hljs-number">40</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//值传递,adminUser的age不会被修改</span><br>    <span class="hljs-keyword">function</span> set<span class="hljs-constructor">Age(<span class="hljs-params">uint256</span> <span class="hljs-params">_age</span>)</span> public &#123;<br>        <span class="hljs-comment">//值传递，user是adminUser的拷贝</span><br>        User memory user = adminUser;<br>        user.age = _age;<br>        <br>        emit age<span class="hljs-constructor">Info(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>,<span class="hljs-params">_age</span>)</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>2 合约升级</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs typescript">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br><span class="hljs-comment">//返回值带结构体</span><br><span class="hljs-comment">//pragma experimental ABIEncoderV2;</span><br><br>struct Bank&#123;<br>    <span class="hljs-built_in">string</span> name;<br>    uint256 amount;<br>&#125;<br><br>contract data_demo&#123;<br>    Bank bank;<br><br>    <span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _name,uint256 _amount</span>) <span class="hljs-title">public</span> &#123;<br>        bank.name = _name;<br>        bank.amount = _amount;<br>    &#125;<br><br>    <span class="hljs-comment">//返回银行信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBank</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">Bank memory</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> bank;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现一个call_demo调用</span><br>contract  call_demo&#123;<br>    <span class="hljs-comment">//引用前一个合约的数据</span><br>    data_demo data;<br>    <br>    <span class="hljs-comment">// 构造时，指定请一个合约的地址</span><br>    <span class="hljs-title">constructor</span>(<span class="hljs-params">address addr</span>) <span class="hljs-title">public</span>&#123;<br>        data = data_demo(addr);<br>    &#125;<br>    <br>    <span class="hljs-comment">//合约可以对data_demo的地址进行更新</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upgrade</span>(<span class="hljs-params">address _addrV2</span>) <span class="hljs-title">public</span></span>&#123;<br>        data = data_demo(_addrV2);    <br>    &#125;<br>    <br>    <span class="hljs-comment">// 调用getbank方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>)<span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">Bank memory</span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> data.getBank();  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个合约部署之后地址不变，如果升级，那么地址就变了。</p><p>现在分离用户访问层面和底层数据层面的逻辑<br>用户访问层面始终给一个公开方法，用来查询最底层的数据，<br>但是里面实现了不同的数据层面，接口+多态的方式。</p><p>用户访问层面的方法封装  合约地址， 如果升级，也就是新的合约地址，但对于用于来说是无感的。</p><h2 id="Go语言与智能合约调用"><a href="#Go语言与智能合约调用" class="headerlink" title="Go语言与智能合约调用"></a>Go语言与智能合约调用</h2><p>智能合约号称是自动执行的，但了解智能合约原理后应该清楚，智能合约并不是自动执行的，内部的函数是需要被调用后才能够触发</p><ol><li>合约函数如何被调用<br>一个完整的DApp包括前端、后端、智能合约以及区块链系统，智能合约的调用是连接区块链与前后端的关键。<br>智能合约运行在以太坊节点的EVM中。调用的话必须访问某个节点，IPC 本地进程间通信， RPC远程通信。<br>Geth启动的时候可以选择开启RPC，默认端口是8545<br><img src="09.png"></li></ol><p>智能合约的运行过程是后端连接某节点，将智能合约的调用发送给节点，节点在验证了交易的合法性后进行全网广播，被矿工打包到区块中代表该交易得到确认，至此交易才算完成。<br>每个区块链平台都会提供主流的开发语言SDK， Geth本身就是用go语言开发的，因此如果使用go语言连接节点，发交易，直接在工程内导入go-ethereum包就可以了。</p><ol start="2"><li>智能合约被调用的基本步骤<br>合约为例<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs fortran">pragma solidity &gt;=<span class="hljs-number">0.7</span><span class="hljs-number">.0</span> &lt;<span class="hljs-number">0.9</span><span class="hljs-number">.0</span>;<br><br>contract calldemo&#123;<br>    uint <span class="hljs-built_in">count</span>;<br>    <br>    constructor() <span class="hljs-keyword">public</span> &#123;<br>        <span class="hljs-built_in">count</span> = <span class="hljs-number">2020</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> setCount(uint _count) <span class="hljs-keyword">external</span>&#123;<br>        <span class="hljs-built_in">count</span> =_count;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> getCount() <span class="hljs-keyword">public</span> view returns(uint)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">count</span>;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>步骤01： 编译合约，获取合约ABI (Application Binary Interface,应用二进制接口)<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;nonpayable&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;constructor&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [],<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;getCount&quot;</span>,<br><span class="hljs-attr">&quot;outputs&quot;</span>: [<br>&#123;<br><span class="hljs-attr">&quot;internalType&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span>,<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span><br>&#125;<br>],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;view&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;function&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;inputs&quot;</span>: [<br>&#123;<br><span class="hljs-attr">&quot;internalType&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span>,<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;_count&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;uint256&quot;</span><br>&#125;<br>],<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;setCount&quot;</span>,<br><span class="hljs-attr">&quot;outputs&quot;</span>: [],<br><span class="hljs-attr">&quot;stateMutability&quot;</span>: <span class="hljs-string">&quot;nonpayable&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;function&quot;</span><br>&#125;<br>]<br><br></code></pre></td></tr></table></figure>步骤02: 获取合约地址。注意要将合约部署到Geth节点。 因此环境选择Web3 Provider<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">geth</span> <span class="hljs-built_in">--datadir</span> ./<span class="hljs-string">data</span> <span class="hljs-built_in">--networkid</span> <span class="hljs-string">18</span> <span class="hljs-built_in">--port</span> <span class="hljs-string">30303</span>  <span class="hljs-built_in">--rpc</span> <span class="hljs-built_in">--rpcport</span> <span class="hljs-string">8545</span> <span class="hljs-built_in">--rpcapi</span> <span class="hljs-string">&#x27;db,net,eth,web3,personal&#x27;</span> <span class="hljs-built_in">--rpccorsdomain</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--gasprice</span> <span class="hljs-string">0</span> <span class="hljs-built_in">--allow-insecure-unlock</span>   <span class="hljs-string">console</span> <span class="hljs-string">2</span>&gt; <span class="hljs-string">1</span>.<span class="hljs-string">log</span><br><br><br><br><span class="hljs-string">personal</span>.<span class="hljs-string">newAccount</span>(<span class="hljs-string">&quot;123&quot;</span>) <br>    <span class="hljs-string">0x4185782d716e4b180c67cf4796518b8c2e556c8b</span><br><span class="hljs-string">acc0</span> = <span class="hljs-string">eth</span>.<span class="hljs-string">accounts</span>[<span class="hljs-string">0</span>]<br>    <span class="hljs-string">0xf7fde7db14b786cebc33a4cf45e55b61b3f2e922</span><br><span class="hljs-string">personal</span>.<span class="hljs-string">unlockAccount</span>(<span class="hljs-string">acc0</span>,<span class="hljs-string">&quot;123&quot;</span>)<br><br></code></pre></td></tr></table></figure></li></ol><p>部署后：获取合约地址  0x4698662Cb5598fE5392dF60Afbe5502338f19C23<br><img src="10.png"></p><p>步骤03： 利用abigen工具，将abi文件转换为go代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">abigen  -abi  calldemo.abi  -<span class="hljs-keyword">type</span> calldemo  -pkg  main -out calldemo.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p><img src="11.png"></p><p>步骤04： 创建main.go<br>分为4步：</p><ul><li>1 连接geth节点</li><li>2 生成合约实例</li><li>3 调用合约函数</li><li>4 打印</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;github.com/ethereum/go-ethereum/common&quot;</span><br>   <span class="hljs-string">&quot;github.com/ethereum/go-ethereum/ethclient&quot;</span><br>   <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">//1 连接到geth节点</span><br>   fmt.Println(<span class="hljs-string">&quot;A&quot;</span>)<br>   conn, err := ethclient.Dial(<span class="hljs-string">&quot;http://localhost:8545&quot;</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to connect to Ethereum client: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">//延迟关闭连接</span><br>   <span class="hljs-keyword">defer</span> conn.Close()<br><br>   <span class="hljs-comment">//2 生成合约实例</span><br>   demoIns, err := NewCalldemo(common.HexToAddress(<span class="hljs-string">&quot;0x4698662Cb5598fE5392dF60Afbe5502338f19C23&quot;</span>), conn)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to NewCLient: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">// 3 调用合约的函数</span><br>   val, err := demoIns.GetCount(<span class="hljs-literal">nil</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Fatalf(<span class="hljs-string">&quot;Failed to getCount: %v&quot;</span>, err)<br>   &#125;<br><br>   <span class="hljs-comment">// 4 打印结果</span><br>   fmt.Println(val)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B-1-区块链应用-基础知识</title>
    <link href="/nwc_bc_gogog.github.io/2021/11/23/B-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/nwc_bc_gogog.github.io/2021/11/23/B-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="01-什么是hash函数"><a href="#01-什么是hash函数" class="headerlink" title="01 什么是hash函数"></a>01 什么是hash函数</h2><p>hash函数，一般翻译为散列；<br>在比特币领域中hash函数指特定算法支持的hash函数 (SHA-256)</p><p>演示网站: <a href="https://andersbrownworth.com/blockchain">https://andersbrownworth.com/blockchain</a></p><p><img src="01.png" alt="区块"></p><p>创世区块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;config&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;chainId&quot;</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">&quot;homesteadBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip150Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip150Hash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>    <span class="hljs-attr">&quot;eip155Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;eip158Block&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;byzantiumBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;constantinopleBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;petersburgBlock&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;ethash&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;nonce&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;0x5d5cdc87&quot;</span>,<br>  <span class="hljs-attr">&quot;extraData&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;gasLimit&quot;</span>: <span class="hljs-string">&quot;0x47b760&quot;</span>,<br>  <span class="hljs-attr">&quot;difficulty&quot;</span>: <span class="hljs-string">&quot;0x80000&quot;</span>,<br>  <span class="hljs-attr">&quot;mixHash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;coinbase&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span>,<br>  <span class="hljs-attr">&quot;alloc&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;0000000000000000000000000000000000000000&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;balance&quot;</span>: <span class="hljs-string">&quot;0x1&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;number&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;gasUsed&quot;</span>: <span class="hljs-string">&quot;0x0&quot;</span>,<br>  <span class="hljs-attr">&quot;parentHash&quot;</span>: <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>coinbase:挖矿后获得奖励的地址<br>Difficulty: 挖矿难度<br>gasLimit: 一个区块所能容纳的gas的上限，智能合约指令在执行时需要消耗gas，可以通过以太币自动兑换。<br>nonce: 随机值<br>mixHash: 一个256位的哈希证明，与nonce结合，验证本区块的有效性<br>extraData: 附加信息，随意填写<br>parentHash: 前一块的hash，因为是创世块所以为0</p><p><img src="02.png" alt="区块链创世块"></p><p>命令:</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">geth</span> <span class="hljs-built_in">--datadir</span> ./<span class="hljs-string">data</span> <span class="hljs-built_in">--networkid</span> <span class="hljs-string">19900112</span> <span class="hljs-built_in">--port</span> <span class="hljs-string">30303</span>  <span class="hljs-built_in">--rpc</span> <span class="hljs-built_in">--rpcport</span> <span class="hljs-string">8545</span> <span class="hljs-built_in">--rpcapi</span> <span class="hljs-string">&#x27;db,net,eth,web3,personal&#x27;</span> <span class="hljs-built_in">--rpccorsdomain</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">--gasprice</span> <span class="hljs-string">0</span> <span class="hljs-built_in">--allow-insecure-unlock</span>   <span class="hljs-string">console</span><br><br><br><span class="hljs-string">personal</span>.<span class="hljs-string">newAccount</span>(<span class="hljs-string">&quot;123&quot;</span>) <br>        <span class="hljs-string">0x4185782d716e4b180c67cf4796518b8c2e556c8b</span><br><span class="hljs-string">acc0</span> = <span class="hljs-string">eth</span>.<span class="hljs-string">accounts</span>[<span class="hljs-string">0</span>]<br>        <span class="hljs-string">0xf7fde7db14b786cebc33a4cf45e55b61b3f2e922</span><br> <span class="hljs-string">personal</span>.<span class="hljs-string">unlockAccount</span>(<span class="hljs-string">acc0</span>,<span class="hljs-string">&quot;123&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>区块链应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
